Index: DMS/templates/DMS/jquery.jstree.js
===================================================================
--- DMS/templates/DMS/jquery.jstree.js	(revision bc68b351b9f9b801928a41147abff436c769539b)
+++ DMS/templates/DMS/jquery.jstree.js	(revision bc68b351b9f9b801928a41147abff436c769539b)
@@ -1,5964 +0,0 @@
-/*
- * jsTree 1.0-rc3
- * http://jstree.com/
- *
- * Copyright (c) 2010 Ivan Bozhanov (vakata.com)
- *
- * Licensed same as jquery - under the terms of either the MIT License or the GPL Version 2 License
- *   http://www.opensource.org/licenses/mit-license.php
- *   http://www.gnu.org/licenses/gpl.html
- *
- * $Date: 2011-02-09 01:17:14 +0200 (ср, 09 февр 2011) $
- * $Revision: 236 $
- */
-
-/*jslint browser: true, onevar: true, undef: true, bitwise: true, strict: true */
-/*global window : false, clearInterval: false, clearTimeout: false, document: false, setInterval: false, setTimeout: false, jQuery: false, navigator: false, XSLTProcessor: false, DOMParser: false, XMLSerializer: false*/
-
-"use strict";
-
-// top wrapper to prevent multiple inclusion (is this OK?)
-(function () {
-    if (jQuery && jQuery.jstree) {
-        return;
-    }
-    var is_ie6 = false, is_ie7 = false, is_ff2 = false;
-
-    /*
-     * jsTree core
-     */
-    (function ($) {
-        // Common functions not related to jsTree
-        // decided to move them to a `vakata` "namespace"
-        $.vakata = {};
-        // CSS related functions
-        $.vakata.css = {
-            get_css: function (rule_name, delete_flag, sheet) {
-                rule_name = rule_name.toLowerCase();
-                var css_rules = sheet.cssRules || sheet.rules,
-                    j = 0;
-                do {
-                    if (css_rules.length && j > css_rules.length + 5) {
-                        return false;
-                    }
-                    if (css_rules[j].selectorText && css_rules[j].selectorText.toLowerCase() == rule_name) {
-                        if (delete_flag === true) {
-                            if (sheet.removeRule) {
-                                sheet.removeRule(j);
-                            }
-                            if (sheet.deleteRule) {
-                                sheet.deleteRule(j);
-                            }
-                            return true;
-                        }
-                        else {
-                            return css_rules[j];
-                        }
-                    }
-                }
-                while (css_rules[++j]);
-                return false;
-            },
-            add_css: function (rule_name, sheet) {
-                if ($.jstree.css.get_css(rule_name, false, sheet)) {
-                    return false;
-                }
-                if (sheet.insertRule) {
-                    sheet.insertRule(rule_name + ' { }', 0);
-                } else {
-                    sheet.addRule(rule_name, null, 0);
-                }
-                return $.vakata.css.get_css(rule_name);
-            },
-            remove_css: function (rule_name, sheet) {
-                return $.vakata.css.get_css(rule_name, true, sheet);
-            },
-            add_sheet: function (opts) {
-                var tmp = false, is_new = true;
-                if (opts.str) {
-                    if (opts.title) {
-                        tmp = $("style[id='" + opts.title + "-stylesheet']")[0];
-                    }
-                    if (tmp) {
-                        is_new = false;
-                    }
-                    else {
-                        tmp = document.createElement("style");
-                        tmp.setAttribute('type', "text/css");
-                        if (opts.title) {
-                            tmp.setAttribute("id", opts.title + "-stylesheet");
-                        }
-                    }
-                    if (tmp.styleSheet) {
-                        if (is_new) {
-                            document.getElementsByTagName("head")[0].appendChild(tmp);
-                            tmp.styleSheet.cssText = opts.str;
-                        }
-                        else {
-                            tmp.styleSheet.cssText = tmp.styleSheet.cssText + " " + opts.str;
-                        }
-                    }
-                    else {
-                        tmp.appendChild(document.createTextNode(opts.str));
-                        document.getElementsByTagName("head")[0].appendChild(tmp);
-                    }
-                    return tmp.sheet || tmp.styleSheet;
-                }
-                if (opts.url) {
-                    if (document.createStyleSheet) {
-                        try {
-                            tmp = document.createStyleSheet(opts.url);
-                        } catch (e) {
-                        }
-                    }
-                    else {
-                        tmp = document.createElement('link');
-                        tmp.rel = 'stylesheet';
-                        tmp.type = 'text/css';
-                        tmp.media = "all";
-                        tmp.href = opts.url;
-                        document.getElementsByTagName("head")[0].appendChild(tmp);
-                        return tmp.styleSheet;
-                    }
-                }
-            }
-        };
-
-        // private variables
-        var instances = [],			// instance array (used by $.jstree.reference/create/focused)
-            focused_instance = -1,	// the index in the instance array of the currently focused instance
-            plugins = {},			// list of included plugins
-            prepared_move = {};		// for the move_node function
-
-        // jQuery plugin wrapper (thanks to jquery UI widget function)
-        $.fn.jstree = function (settings) {
-            var isMethodCall = (typeof settings == 'string'), // is this a method call like $().jstree("open_node")
-                args = Array.prototype.slice.call(arguments, 1),
-                returnValue = this;
-
-            // if a method call execute the method on all selected instances
-            if (isMethodCall) {
-                if (settings.substring(0, 1) == '_') {
-                    return returnValue;
-                }
-                this.each(function () {
-                    var instance = instances[$.data(this, "jstree_instance_id")],
-                        methodValue = (instance && $.isFunction(instance[settings])) ? instance[settings].apply(instance, args) : instance;
-                    if (typeof methodValue !== "undefined" && (settings.indexOf("is_") === 0 || (methodValue !== true && methodValue !== false))) {
-                        returnValue = methodValue;
-                        return false;
-                    }
-                });
-            }
-            else {
-                this.each(function () {
-                    // extend settings and allow for multiple hashes and $.data
-                    var instance_id = $.data(this, "jstree_instance_id"),
-                        a = [],
-                        b = settings ? $.extend({}, true, settings) : {},
-                        c = $(this),
-                        s = false,
-                        t = [];
-                    a = a.concat(args);
-                    if (c.data("jstree")) {
-                        a.push(c.data("jstree"));
-                    }
-                    b = a.length ? $.extend.apply(null, [true, b].concat(a)) : b;
-
-                    // if an instance already exists, destroy it first
-                    if (typeof instance_id !== "undefined" && instances[instance_id]) {
-                        instances[instance_id].destroy();
-                    }
-                    // push a new empty object to the instances array
-                    instance_id = parseInt(instances.push({}), 10) - 1;
-                    // store the jstree instance id to the container element
-                    $.data(this, "jstree_instance_id", instance_id);
-                    // clean up all plugins
-                    b.plugins = $.isArray(b.plugins) ? b.plugins : $.jstree.defaults.plugins.slice();
-                    b.plugins.unshift("core");
-                    // only unique plugins
-                    b.plugins = b.plugins.sort().join(",,").replace(/(,|^)([^,]+)(,,\2)+(,|$)/g, "$1$2$4").replace(/,,+/g, ",").replace(/,$/, "").split(",");
-
-                    // extend defaults with passed data
-                    s = $.extend(true, {}, $.jstree.defaults, b);
-                    s.plugins = b.plugins;
-                    $.each(plugins, function (i, val) {
-                        if ($.inArray(i, s.plugins) === -1) {
-                            s[i] = null;
-                            delete s[i];
-                        }
-                        else {
-                            t.push(i);
-                        }
-                    });
-                    s.plugins = t;
-
-                    // push the new object to the instances array (at the same time set the default classes to the container) and init
-                    instances[instance_id] = new $.jstree._instance(instance_id, $(this).addClass("jstree jstree-" + instance_id), s);
-                    // init all activated plugins for this instance
-                    $.each(instances[instance_id]._get_settings().plugins, function (i, val) {
-                        instances[instance_id].data[val] = {};
-                    });
-                    $.each(instances[instance_id]._get_settings().plugins, function (i, val) {
-                        if (plugins[val]) {
-                            plugins[val].__init.apply(instances[instance_id]);
-                        }
-                    });
-                    // initialize the instance
-                    setTimeout(function () {
-                        if (instances[instance_id]) {
-                            instances[instance_id].init();
-                        }
-                    }, 0);
-                });
-            }
-            // return the jquery selection (or if it was a method call that returned a value - the returned value)
-            return returnValue;
-        };
-        // object to store exposed functions and objects
-        $.jstree = {
-            defaults: {
-                plugins: []
-            },
-            _focused: function () {
-                return instances[focused_instance] || null;
-            },
-            _reference: function (needle) {
-                // get by instance id
-                if (instances[needle]) {
-                    return instances[needle];
-                }
-                // get by DOM (if still no luck - return null
-                var o = $(needle);
-                if (!o.length && typeof needle === "string") {
-                    o = $("#" + needle);
-                }
-                if (!o.length) {
-                    return null;
-                }
-                return instances[o.closest(".jstree").data("jstree_instance_id")] || null;
-            },
-            _instance: function (index, container, settings) {
-                // for plugins to store data in
-                this.data = {core: {}};
-                this.get_settings = function () {
-                    return $.extend(true, {}, settings);
-                };
-                this._get_settings = function () {
-                    return settings;
-                };
-                this.get_index = function () {
-                    return index;
-                };
-                this.get_container = function () {
-                    return container;
-                };
-                this.get_container_ul = function () {
-                    return container.children("ul:eq(0)");
-                };
-                this._set_settings = function (s) {
-                    settings = $.extend(true, {}, settings, s);
-                };
-            },
-            _fn: {},
-            plugin: function (pname, pdata) {
-                pdata = $.extend({}, {
-                    __init: $.noop,
-                    __destroy: $.noop,
-                    _fn: {},
-                    defaults: false
-                }, pdata);
-                plugins[pname] = pdata;
-
-                $.jstree.defaults[pname] = pdata.defaults;
-                $.each(pdata._fn, function (i, val) {
-                    val.plugin = pname;
-                    val.old = $.jstree._fn[i];
-                    $.jstree._fn[i] = function () {
-                        var rslt,
-                            func = val,
-                            args = Array.prototype.slice.call(arguments),
-                            evnt = new $.Event("before.jstree"),
-                            rlbk = false;
-
-                        if (this.data.core.locked === true && i !== "unlock" && i !== "is_locked") {
-                            return;
-                        }
-
-                        // Check if function belongs to the included plugins of this instance
-                        do {
-                            if (func && func.plugin && $.inArray(func.plugin, this._get_settings().plugins) !== -1) {
-                                break;
-                            }
-                            func = func.old;
-                        } while (func);
-                        if (!func) {
-                            return;
-                        }
-
-                        // context and function to trigger events, then finally call the function
-                        if (i.indexOf("_") === 0) {
-                            rslt = func.apply(this, args);
-                        }
-                        else {
-                            rslt = this.get_container().triggerHandler(evnt, {
-                                "func": i,
-                                "inst": this,
-                                "args": args,
-                                "plugin": func.plugin
-                            });
-                            if (rslt === false) {
-                                return;
-                            }
-                            if (typeof rslt !== "undefined") {
-                                args = rslt;
-                            }
-
-                            rslt = func.apply(
-                                $.extend({}, this, {
-                                    __callback: function (data) {
-                                        this.get_container().triggerHandler(i + '.jstree', {
-                                            "inst": this,
-                                            "args": args,
-                                            "rslt": data,
-                                            "rlbk": rlbk
-                                        });
-                                    },
-                                    __rollback: function () {
-                                        rlbk = this.get_rollback();
-                                        return rlbk;
-                                    },
-                                    __call_old: function (replace_arguments) {
-                                        return func.old.apply(this, (replace_arguments ? Array.prototype.slice.call(arguments, 1) : args ));
-                                    }
-                                }), args);
-                        }
-
-                        // return the result
-                        return rslt;
-                    };
-                    $.jstree._fn[i].old = val.old;
-                    $.jstree._fn[i].plugin = pname;
-                });
-            },
-            rollback: function (rb) {
-                if (rb) {
-                    if (!$.isArray(rb)) {
-                        rb = [rb];
-                    }
-                    $.each(rb, function (i, val) {
-                        instances[val.i].set_rollback(val.h, val.d);
-                    });
-                }
-            }
-        };
-        // set the prototype for all instances
-        $.jstree._fn = $.jstree._instance.prototype = {};
-
-        // load the css when DOM is ready
-        $(function () {
-            // code is copied from jQuery ($.browser is deprecated + there is a bug in IE)
-            var u = navigator.userAgent.toLowerCase(),
-                v = (u.match(/.+?(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [0, '0'])[1],
-                css_string = '' +
-                    '.jstree ul, .jstree li { display:block; margin:0 0 0 0; padding:0 0 0 0; list-style-type:none; } ' +
-                    '.jstree li { display:block; min-height:18px; line-height:18px; white-space:nowrap; margin-left:18px; min-width:18px; } ' +
-                    '.jstree-rtl li { margin-left:0; margin-right:18px; } ' +
-                    '.jstree > ul > li { margin-left:0px; } ' +
-                    '.jstree-rtl > ul > li { margin-right:0px; } ' +
-                    '.jstree ins { display:inline-block; text-decoration:none; width:18px; height:18px; margin:0 0 0 0; padding:0; } ' +
-                    '.jstree a { display:inline-block; line-height:16px; height:16px; color:black; white-space:nowrap; text-decoration:none; padding:1px 2px; margin:0; } ' +
-                    '.jstree a:focus { outline: none; } ' +
-                    '.jstree a > ins { height:16px; width:16px; } ' +
-                    '.jstree a > .jstree-icon { margin-right:3px; } ' +
-                    '.jstree-rtl a > .jstree-icon { margin-left:3px; margin-right:0; } ' +
-                    'li.jstree-open > ul { display:block; } ' +
-                    'li.jstree-closed > ul { display:none; } ';
-            // Correct IE 6 (does not support the > CSS selector)
-            if (/msie/.test(u) && parseInt(v, 10) == 6) {
-                is_ie6 = true;
-
-                // fix image flicker and lack of caching
-                try {
-                    document.execCommand("BackgroundImageCache", false, true);
-                } catch (err) {
-                }
-
-                css_string += '' +
-                    '.jstree li { height:18px; margin-left:0; margin-right:0; } ' +
-                    '.jstree li li { margin-left:18px; } ' +
-                    '.jstree-rtl li li { margin-left:0px; margin-right:18px; } ' +
-                    'li.jstree-open ul { display:block; } ' +
-                    'li.jstree-closed ul { display:none !important; } ' +
-                    '.jstree li a { display:inline; border-width:0 !important; padding:0px 2px !important; } ' +
-                    '.jstree li a ins { height:16px; width:16px; margin-right:3px; } ' +
-                    '.jstree-rtl li a ins { margin-right:0px; margin-left:3px; } ';
-            }
-            // Correct IE 7 (shifts anchor nodes onhover)
-            if (/msie/.test(u) && parseInt(v, 10) == 7) {
-                is_ie7 = true;
-                css_string += '.jstree li a { border-width:0 !important; padding:0px 2px !important; } ';
-            }
-            // correct ff2 lack of display:inline-block
-            if (!/compatible/.test(u) && /mozilla/.test(u) && parseFloat(v, 10) < 1.9) {
-                is_ff2 = true;
-                css_string += '' +
-                    '.jstree ins { display:-moz-inline-box; } ' +
-                    '.jstree li { line-height:12px; } ' + // WHY??
-                    '.jstree a { display:-moz-inline-box; } ' +
-                    '.jstree .jstree-no-icons .jstree-checkbox { display:-moz-inline-stack !important; } ';
-                /* this shouldn't be here as it is theme specific */
-            }
-            // the default stylesheet
-            $.vakata.css.add_sheet({str: css_string, title: "jstree"});
-        });
-
-        // core functions (open, close, create, update, delete)
-        $.jstree.plugin("core", {
-            __init: function () {
-                this.data.core.locked = false;
-                this.data.core.to_open = this.get_settings().core.initially_open;
-                this.data.core.to_load = this.get_settings().core.initially_load;
-            },
-            defaults: {
-                html_titles: false,
-                animation: 500,
-                initially_open: [],
-                initially_load: [],
-                open_parents: true,
-                notify_plugins: true,
-                rtl: false,
-                load_open: false,
-                strings: {
-                    loading: "Loading ...",
-                    new_node: "New node",
-                    multiple_selection: "Multiple selection"
-                }
-            },
-            _fn: {
-                init: function () {
-                    this.set_focus();
-                    if (this._get_settings().core.rtl) {
-                        this.get_container().addClass("jstree-rtl").css("direction", "rtl");
-                    }
-                    this.get_container().html("<ul><li class='jstree-last jstree-leaf'><ins>&#160;</ins><a class='jstree-loading' href='#'><ins class='jstree-icon'>&#160;</ins>" + this._get_string("loading") + "</a></li></ul>");
-                    this.data.core.li_height = this.get_container_ul().find("li.jstree-closed, li.jstree-leaf").eq(0).height() || 18;
-
-                    this.get_container()
-                        .delegate("li > ins", "click.jstree", $.proxy(function (event) {
-                            var trgt = $(event.target);
-                            // if(trgt.is("ins") && event.pageY - trgt.offset().top < this.data.core.li_height) { this.toggle_node(trgt); }
-                            this.toggle_node(trgt);
-                        }, this))
-                        .bind("mousedown.jstree", $.proxy(function () {
-                            this.set_focus(); // This used to be setTimeout(set_focus,0) - why?
-                        }, this))
-                        .bind("dblclick.jstree", function (event) {
-                            var sel;
-                            if (document.selection && document.selection.empty) {
-                                document.selection.empty();
-                            }
-                            else {
-                                if (window.getSelection) {
-                                    sel = window.getSelection();
-                                    try {
-                                        sel.removeAllRanges();
-                                        sel.collapse();
-                                    } catch (err) {
-                                    }
-                                }
-                            }
-                        });
-                    if (this._get_settings().core.notify_plugins) {
-                        this.get_container()
-                            .bind("load_node.jstree", $.proxy(function (e, data) {
-                                var o = this._get_node(data.rslt.obj),
-                                    t = this;
-                                if (o === -1) {
-                                    o = this.get_container_ul();
-                                }
-                                if (!o.length) {
-                                    return;
-                                }
-                                o.find("li").each(function () {
-                                    var th = $(this);
-                                    if (th.data("jstree")) {
-                                        $.each(th.data("jstree"), function (plugin, values) {
-                                            if (t.data[plugin] && $.isFunction(t["_" + plugin + "_notify"])) {
-                                                t["_" + plugin + "_notify"].call(t, th, values);
-                                            }
-                                        });
-                                    }
-                                });
-                            }, this));
-                    }
-                    if (this._get_settings().core.load_open) {
-                        this.get_container()
-                            .bind("load_node.jstree", $.proxy(function (e, data) {
-                                var o = this._get_node(data.rslt.obj),
-                                    t = this;
-                                if (o === -1) {
-                                    o = this.get_container_ul();
-                                }
-                                if (!o.length) {
-                                    return;
-                                }
-                                o.find("li.jstree-open:not(:has(ul))").each(function () {
-                                    t.load_node(this, $.noop, $.noop);
-                                });
-                            }, this));
-                    }
-                    this.__callback();
-                    this.load_node(-1, function () {
-                        this.loaded();
-                        this.reload_nodes();
-                    });
-                },
-                destroy: function () {
-                    var i,
-                        n = this.get_index(),
-                        s = this._get_settings(),
-                        _this = this;
-
-                    $.each(s.plugins, function (i, val) {
-                        try {
-                            plugins[val].__destroy.apply(_this);
-                        } catch (err) {
-                        }
-                    });
-                    this.__callback();
-                    // set focus to another instance if this one is focused
-                    if (this.is_focused()) {
-                        for (i in instances) {
-                            if (instances.hasOwnProperty(i) && i != n) {
-                                instances[i].set_focus();
-                                break;
-                            }
-                        }
-                    }
-                    // if no other instance found
-                    if (n === focused_instance) {
-                        focused_instance = -1;
-                    }
-                    // remove all traces of jstree in the DOM (only the ones set using jstree*) and cleans all events
-                    this.get_container()
-                        .unbind(".jstree")
-                        .undelegate(".jstree")
-                        .removeData("jstree_instance_id")
-                        .find("[class^='jstree']")
-                        .andSelf()
-                        .attr("class", function () {
-                            return this.className.replace(/jstree[^ ]*|$/ig, '');
-                        });
-                    $(document)
-                        .unbind(".jstree-" + n)
-                        .undelegate(".jstree-" + n);
-                    // remove the actual data
-                    instances[n] = null;
-                    delete instances[n];
-                },
-
-                _core_notify: function (n, data) {
-                    if (data.opened) {
-                        this.open_node(n, false, true);
-                    }
-                },
-
-                lock: function () {
-                    this.data.core.locked = true;
-                    this.get_container().children("ul").addClass("jstree-locked").css("opacity", "0.7");
-                    this.__callback({});
-                },
-                unlock: function () {
-                    this.data.core.locked = false;
-                    this.get_container().children("ul").removeClass("jstree-locked").css("opacity", "1");
-                    this.__callback({});
-                },
-                is_locked: function () {
-                    return this.data.core.locked;
-                },
-                save_opened: function () {
-                    var _this = this;
-                    this.data.core.to_open = [];
-                    this.get_container_ul().find("li.jstree-open").each(function () {
-                        if (this.id) {
-                            _this.data.core.to_open.push("#" + this.id.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:"));
-                        }
-                    });
-                    this.__callback(_this.data.core.to_open);
-                },
-                save_loaded: function () {
-                },
-                reload_nodes: function (is_callback) {
-                    var _this = this,
-                        done = true,
-                        current = [],
-                        remaining = [];
-                    if (!is_callback) {
-                        this.data.core.reopen = false;
-                        this.data.core.refreshing = true;
-                        this.data.core.to_open = $.map($.makeArray(this.data.core.to_open), function (n) {
-                            return "#" + n.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:");
-                        });
-                        this.data.core.to_load = $.map($.makeArray(this.data.core.to_load), function (n) {
-                            return "#" + n.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:");
-                        });
-                        if (this.data.core.to_open.length) {
-                            this.data.core.to_load = this.data.core.to_load.concat(this.data.core.to_open);
-                        }
-                    }
-                    if (this.data.core.to_load.length) {
-                        $.each(this.data.core.to_load, function (i, val) {
-                            if (val == "#") {
-                                return true;
-                            }
-                            if ($(val).length) {
-                                current.push(val);
-                            }
-                            else {
-                                remaining.push(val);
-                            }
-                        });
-                        if (current.length) {
-                            this.data.core.to_load = remaining;
-                            $.each(current, function (i, val) {
-                                if (!_this._is_loaded(val)) {
-                                    _this.load_node(val, function () {
-                                        _this.reload_nodes(true);
-                                    }, function () {
-                                        _this.reload_nodes(true);
-                                    });
-                                    done = false;
-                                }
-                            });
-                        }
-                    }
-                    if (this.data.core.to_open.length) {
-                        $.each(this.data.core.to_open, function (i, val) {
-                            _this.open_node(val, false, true);
-                        });
-                    }
-                    if (done) {
-                        // TODO: find a more elegant approach to syncronizing returning requests
-                        if (this.data.core.reopen) {
-                            clearTimeout(this.data.core.reopen);
-                        }
-                        this.data.core.reopen = setTimeout(function () {
-                            _this.__callback({}, _this);
-                        }, 50);
-                        this.data.core.refreshing = false;
-                        this.reopen();
-                    }
-                },
-                reopen: function () {
-                    var _this = this;
-                    if (this.data.core.to_open.length) {
-                        $.each(this.data.core.to_open, function (i, val) {
-                            _this.open_node(val, false, true);
-                        });
-                    }
-                    this.__callback({});
-                },
-                refresh: function (obj) {
-                    var _this = this;
-                    this.save_opened();
-                    if (!obj) {
-                        obj = -1;
-                    }
-                    obj = this._get_node(obj);
-                    if (!obj) {
-                        obj = -1;
-                    }
-                    if (obj !== -1) {
-                        obj.children("UL").remove();
-                    }
-                    else {
-                        this.get_container_ul().empty();
-                    }
-                    this.load_node(obj, function () {
-                        _this.__callback({"obj": obj});
-                        _this.reload_nodes();
-                    });
-                },
-                // Dummy function to fire after the first load (so that there is a jstree.loaded event)
-                loaded: function () {
-                    this.__callback();
-                },
-                // deal with focus
-                set_focus: function () {
-                    if (this.is_focused()) {
-                        return;
-                    }
-                    var f = $.jstree._focused();
-                    if (f) {
-                        f.unset_focus();
-                    }
-
-                    this.get_container().addClass("jstree-focused");
-                    focused_instance = this.get_index();
-                    this.__callback();
-                },
-                is_focused: function () {
-                    return focused_instance == this.get_index();
-                },
-                unset_focus: function () {
-                    if (this.is_focused()) {
-                        this.get_container().removeClass("jstree-focused");
-                        focused_instance = -1;
-                    }
-                    this.__callback();
-                },
-
-                // traverse
-                _get_node: function (obj) {
-                    var $obj = $(obj, this.get_container());
-                    if ($obj.is(".jstree") || obj == -1) {
-                        return -1;
-                    }
-                    $obj = $obj.closest("li", this.get_container());
-                    return $obj.length ? $obj : false;
-                },
-                _get_next: function (obj, strict) {
-                    obj = this._get_node(obj);
-                    if (obj === -1) {
-                        return this.get_container().find("> ul > li:first-child");
-                    }
-                    if (!obj.length) {
-                        return false;
-                    }
-                    if (strict) {
-                        return (obj.nextAll("li").size() > 0) ? obj.nextAll("li:eq(0)") : false;
-                    }
-
-                    if (obj.hasClass("jstree-open")) {
-                        return obj.find("li:eq(0)");
-                    }
-                    else if (obj.nextAll("li").size() > 0) {
-                        return obj.nextAll("li:eq(0)");
-                    }
-                    else {
-                        return obj.parentsUntil(".jstree", "li").next("li").eq(0);
-                    }
-                },
-                _get_prev: function (obj, strict) {
-                    obj = this._get_node(obj);
-                    if (obj === -1) {
-                        return this.get_container().find("> ul > li:last-child");
-                    }
-                    if (!obj.length) {
-                        return false;
-                    }
-                    if (strict) {
-                        return (obj.prevAll("li").length > 0) ? obj.prevAll("li:eq(0)") : false;
-                    }
-
-                    if (obj.prev("li").length) {
-                        obj = obj.prev("li").eq(0);
-                        while (obj.hasClass("jstree-open")) {
-                            obj = obj.children("ul:eq(0)").children("li:last");
-                        }
-                        return obj;
-                    }
-                    else {
-                        var o = obj.parentsUntil(".jstree", "li:eq(0)");
-                        return o.length ? o : false;
-                    }
-                },
-                _get_parent: function (obj) {
-                    obj = this._get_node(obj);
-                    if (obj == -1 || !obj.length) {
-                        return false;
-                    }
-                    var o = obj.parentsUntil(".jstree", "li:eq(0)");
-                    return o.length ? o : -1;
-                },
-                _get_children: function (obj) {
-                    obj = this._get_node(obj);
-                    if (obj === -1) {
-                        return this.get_container().children("ul:eq(0)").children("li");
-                    }
-                    if (!obj.length) {
-                        return false;
-                    }
-                    return obj.children("ul:eq(0)").children("li");
-                },
-                get_path: function (obj, id_mode) {
-                    var p = [],
-                        _this = this;
-                    obj = this._get_node(obj);
-                    if (obj === -1 || !obj || !obj.length) {
-                        return false;
-                    }
-                    obj.parentsUntil(".jstree", "li").each(function () {
-                        p.push(id_mode ? this.id : _this.get_text(this));
-                    });
-                    p.reverse();
-                    p.push(id_mode ? obj.attr("id") : this.get_text(obj));
-                    return p;
-                },
-
-                // string functions
-                _get_string: function (key) {
-                    return this._get_settings().core.strings[key] || key;
-                },
-
-                is_open: function (obj) {
-                    obj = this._get_node(obj);
-                    return obj && obj !== -1 && obj.hasClass("jstree-open");
-                },
-                is_closed: function (obj) {
-                    obj = this._get_node(obj);
-                    return obj && obj !== -1 && obj.hasClass("jstree-closed");
-                },
-                is_leaf: function (obj) {
-                    obj = this._get_node(obj);
-                    return obj && obj !== -1 && obj.hasClass("jstree-leaf");
-                },
-                correct_state: function (obj) {
-                    obj = this._get_node(obj);
-                    if (!obj || obj === -1) {
-                        return false;
-                    }
-                    obj.removeClass("jstree-closed jstree-open").addClass("jstree-leaf").children("ul").remove();
-                    this.__callback({"obj": obj});
-                },
-                // open/close
-                open_node: function (obj, callback, skip_animation) {
-                    obj = this._get_node(obj);
-                    if (!obj.length) {
-                        return false;
-                    }
-                    if (!obj.hasClass("jstree-closed")) {
-                        if (callback) {
-                            callback.call();
-                        }
-                        return false;
-                    }
-                    var s = skip_animation || is_ie6 ? 0 : this._get_settings().core.animation,
-                        t = this;
-                    if (!this._is_loaded(obj)) {
-                        obj.children("a").addClass("jstree-loading");
-                        this.load_node(obj, function () {
-                            t.open_node(obj, callback, skip_animation);
-                        }, callback);
-                    }
-                    else {
-                        if (this._get_settings().core.open_parents) {
-                            obj.parentsUntil(".jstree", ".jstree-closed").each(function () {
-                                t.open_node(this, false, true);
-                            });
-                        }
-                        if (s) {
-                            obj.children("ul").css("display", "none");
-                        }
-                        obj.removeClass("jstree-closed").addClass("jstree-open").children("a").removeClass("jstree-loading");
-                        if (s) {
-                            obj.children("ul").stop(true, true).slideDown(s, function () {
-                                this.style.display = "";
-                                t.after_open(obj);
-                            });
-                        }
-                        else {
-                            t.after_open(obj);
-                        }
-                        this.__callback({"obj": obj});
-                        if (callback) {
-                            callback.call();
-                        }
-                    }
-                },
-                after_open: function (obj) {
-                    this.__callback({"obj": obj});
-                },
-                close_node: function (obj, skip_animation) {
-                    obj = this._get_node(obj);
-                    var s = skip_animation || is_ie6 ? 0 : this._get_settings().core.animation,
-                        t = this;
-                    if (!obj.length || !obj.hasClass("jstree-open")) {
-                        return false;
-                    }
-                    if (s) {
-                        obj.children("ul").attr("style", "display:block !important");
-                    }
-                    obj.removeClass("jstree-open").addClass("jstree-closed");
-                    if (s) {
-                        obj.children("ul").stop(true, true).slideUp(s, function () {
-                            this.style.display = "";
-                            t.after_close(obj);
-                        });
-                    }
-                    else {
-                        t.after_close(obj);
-                    }
-                    this.__callback({"obj": obj});
-                },
-                after_close: function (obj) {
-                    this.__callback({"obj": obj});
-                },
-                toggle_node: function (obj) {
-                    obj = this._get_node(obj);
-                    if (obj.hasClass("jstree-closed")) {
-                        return this.open_node(obj);
-                    }
-                    if (obj.hasClass("jstree-open")) {
-                        return this.close_node(obj);
-                    }
-                },
-                open_all: function (obj, do_animation, original_obj) {
-                    obj = obj ? this._get_node(obj) : -1;
-                    if (!obj || obj === -1) {
-                        obj = this.get_container_ul();
-                    }
-                    if (original_obj) {
-                        obj = obj.find("li.jstree-closed");
-                    }
-                    else {
-                        original_obj = obj;
-                        if (obj.is(".jstree-closed")) {
-                            obj = obj.find("li.jstree-closed").andSelf();
-                        }
-                        else {
-                            obj = obj.find("li.jstree-closed");
-                        }
-                    }
-                    var _this = this;
-                    obj.each(function () {
-                        var __this = this;
-                        if (!_this._is_loaded(this)) {
-                            _this.open_node(this, function () {
-                                _this.open_all(__this, do_animation, original_obj);
-                            }, !do_animation);
-                        }
-                        else {
-                            _this.open_node(this, false, !do_animation);
-                        }
-                    });
-                    // so that callback is fired AFTER all nodes are open
-                    if (original_obj.find('li.jstree-closed').length === 0) {
-                        this.__callback({"obj": original_obj});
-                    }
-                },
-                close_all: function (obj, do_animation) {
-                    var _this = this;
-                    obj = obj ? this._get_node(obj) : this.get_container();
-                    if (!obj || obj === -1) {
-                        obj = this.get_container_ul();
-                    }
-                    obj.find("li.jstree-open").andSelf().each(function () {
-                        _this.close_node(this, !do_animation);
-                    });
-                    this.__callback({"obj": obj});
-                },
-                clean_node: function (obj) {
-                    obj = obj && obj != -1 ? $(obj) : this.get_container_ul();
-                    obj = obj.is("li") ? obj.find("li").andSelf() : obj.find("li");
-                    obj.removeClass("jstree-last")
-                        .filter("li:last-child").addClass("jstree-last").end()
-                        .filter(":has(li)")
-                        .not(".jstree-open").removeClass("jstree-leaf").addClass("jstree-closed");
-                    obj.not(".jstree-open, .jstree-closed").addClass("jstree-leaf").children("ul").remove();
-                    this.__callback({"obj": obj});
-                },
-                // rollback
-                get_rollback: function () {
-                    this.__callback();
-                    return {i: this.get_index(), h: this.get_container().children("ul").clone(true), d: this.data};
-                },
-                set_rollback: function (html, data) {
-                    this.get_container().empty().append(html);
-                    this.data = data;
-                    this.__callback();
-                },
-                // Dummy functions to be overwritten by any datastore plugin included
-                load_node: function (obj, s_call, e_call) {
-                    this.__callback({"obj": obj});
-                },
-                _is_loaded: function (obj) {
-                    return true;
-                },
-
-                // Basic operations: create
-                create_node: function (obj, position, js, callback, is_loaded) {
-                    obj = this._get_node(obj);
-                    position = typeof position === "undefined" ? "last" : position;
-                    var d = $("<li />"),
-                        s = this._get_settings().core,
-                        tmp;
-
-                    if (obj !== -1 && !obj.length) {
-                        return false;
-                    }
-                    if (!is_loaded && !this._is_loaded(obj)) {
-                        this.load_node(obj, function () {
-                            this.create_node(obj, position, js, callback, true);
-                        });
-                        return false;
-                    }
-
-                    this.__rollback();
-
-                    if (typeof js === "string") {
-                        js = {"data": js};
-                    }
-                    if (!js) {
-                        js = {};
-                    }
-                    if (js.attr) {
-                        d.attr(js.attr);
-                    }
-                    if (js.metadata) {
-                        d.data(js.metadata);
-                    }
-                    if (js.state) {
-                        d.addClass("jstree-" + js.state);
-                    }
-                    if (!js.data) {
-                        js.data = this._get_string("new_node");
-                    }
-                    if (!$.isArray(js.data)) {
-                        tmp = js.data;
-                        js.data = [];
-                        js.data.push(tmp);
-                    }
-                    $.each(js.data, function (i, m) {
-                        tmp = $("<a />");
-                        if ($.isFunction(m)) {
-                            m = m.call(this, js);
-                        }
-                        if (typeof m == "string") {
-                            tmp.attr('href', '#')[s.html_titles ? "html" : "text"](m);
-                        }
-                        else {
-                            if (!m.attr) {
-                                m.attr = {};
-                            }
-                            if (!m.attr.href) {
-                                m.attr.href = '#';
-                            }
-                            tmp.attr(m.attr)[s.html_titles ? "html" : "text"](m.title);
-                            if (m.language) {
-                                tmp.addClass(m.language);
-                            }
-                        }
-                        tmp.prepend("<ins class='jstree-icon'>&#160;</ins>");
-                        if (!m.icon && js.icon) {
-                            m.icon = js.icon;
-                        }
-                        if (m.icon) {
-                            if (m.icon.indexOf("/") === -1) {
-                                tmp.children("ins").addClass(m.icon);
-                            }
-                            else {
-                                tmp.children("ins").css("background", "url('" + m.icon + "') center center no-repeat");
-                            }
-                        }
-                        d.append(tmp);
-                    });
-                    d.prepend("<ins class='jstree-icon'>&#160;</ins>");
-                    if (obj === -1) {
-                        obj = this.get_container();
-                        if (position === "before") {
-                            position = "first";
-                        }
-                        if (position === "after") {
-                            position = "last";
-                        }
-                    }
-                    switch (position) {
-                        case "before":
-                            obj.before(d);
-                            tmp = this._get_parent(obj);
-                            break;
-                        case "after" :
-                            obj.after(d);
-                            tmp = this._get_parent(obj);
-                            break;
-                        case "inside":
-                        case "first" :
-                            if (!obj.children("ul").length) {
-                                obj.append("<ul />");
-                            }
-                            obj.children("ul").prepend(d);
-                            tmp = obj;
-                            break;
-                        case "last":
-                            if (!obj.children("ul").length) {
-                                obj.append("<ul />");
-                            }
-                            obj.children("ul").append(d);
-                            tmp = obj;
-                            break;
-                        default:
-                            if (!obj.children("ul").length) {
-                                obj.append("<ul />");
-                            }
-                            if (!position) {
-                                position = 0;
-                            }
-                            tmp = obj.children("ul").children("li").eq(position);
-                            if (tmp.length) {
-                                tmp.before(d);
-                            }
-                            else {
-                                obj.children("ul").append(d);
-                            }
-                            tmp = obj;
-                            break;
-                    }
-                    if (tmp === -1 || tmp.get(0) === this.get_container().get(0)) {
-                        tmp = -1;
-                    }
-                    this.clean_node(tmp);
-                    this.__callback({"obj": d, "parent": tmp});
-                    if (callback) {
-                        callback.call(this, d);
-                    }
-                    return d;
-                },
-                // Basic operations: rename (deal with text)
-                get_text: function (obj) {
-                    obj = this._get_node(obj);
-                    if (!obj.length) {
-                        return false;
-                    }
-                    var s = this._get_settings().core.html_titles;
-                    obj = obj.children("a:eq(0)");
-                    if (s) {
-                        obj = obj.clone();
-                        obj.children("INS").remove();
-                        return obj.html();
-                    }
-                    else {
-                        obj = obj.contents().filter(function () {
-                            return this.nodeType == 3;
-                        })[0];
-                        return obj.nodeValue;
-                    }
-                },
-                set_text: function (obj, val) {
-                    obj = this._get_node(obj);
-                    if (!obj.length) {
-                        return false;
-                    }
-                    obj = obj.children("a:eq(0)");
-                    if (this._get_settings().core.html_titles) {
-                        var tmp = obj.children("INS").clone();
-                        obj.html(val).prepend(tmp);
-                        this.__callback({"obj": obj, "name": val});
-                        return true;
-                    }
-                    else {
-                        obj = obj.contents().filter(function () {
-                            return this.nodeType == 3;
-                        })[0];
-                        this.__callback({"obj": obj, "name": val});
-                        return (obj.nodeValue = val);
-                    }
-                },
-                rename_node: function (obj, val) {
-                    obj = this._get_node(obj);
-                    this.__rollback();
-                    if (obj && obj.length && this.set_text.apply(this, Array.prototype.slice.call(arguments))) {
-                        this.__callback({"obj": obj, "name": val});
-                    }
-                },
-                // Basic operations: deleting nodes
-                delete_node: function (obj) {
-                    obj = this._get_node(obj);
-                    if (!obj.length) {
-                        return false;
-                    }
-                    this.__rollback();
-                    var p = this._get_parent(obj), prev = $([]), t = this;
-                    obj.each(function () {
-                        prev = prev.add(t._get_prev(this));
-                    });
-                    obj = obj.detach();
-                    if (p !== -1 && p.find("> ul > li").length === 0) {
-                        p.removeClass("jstree-open jstree-closed").addClass("jstree-leaf");
-                    }
-                    this.clean_node(p);
-                    this.__callback({"obj": obj, "prev": prev, "parent": p});
-                    return obj;
-                },
-                prepare_move: function (o, r, pos, cb, is_cb) {
-                    var p = {};
-
-                    p.ot = $.jstree._reference(o) || this;
-                    p.o = p.ot._get_node(o);
-                    p.r = r === -1 ? -1 : this._get_node(r);
-                    p.p = (typeof pos === "undefined" || pos === false) ? "last" : pos; // TODO: move to a setting
-                    if (!is_cb && prepared_move.o && prepared_move.o[0] === p.o[0] && prepared_move.r[0] === p.r[0] && prepared_move.p === p.p) {
-                        this.__callback(prepared_move);
-                        if (cb) {
-                            cb.call(this, prepared_move);
-                        }
-                        return;
-                    }
-                    p.ot = $.jstree._reference(p.o) || this;
-                    p.rt = $.jstree._reference(p.r) || this; // r === -1 ? p.ot : $.jstree._reference(p.r) || this
-                    if (p.r === -1 || !p.r) {
-                        p.cr = -1;
-                        switch (p.p) {
-                            case "first":
-                            case "before":
-                            case "inside":
-                                p.cp = 0;
-                                break;
-                            case "after":
-                            case "last":
-                                p.cp = p.rt.get_container().find(" > ul > li").length;
-                                break;
-                            default:
-                                p.cp = p.p;
-                                break;
-                        }
-                    }
-                    else {
-                        if (!/^(before|after)$/.test(p.p) && !this._is_loaded(p.r)) {
-                            return this.load_node(p.r, function () {
-                                this.prepare_move(o, r, pos, cb, true);
-                            });
-                        }
-                        switch (p.p) {
-                            case "before":
-                                p.cp = p.r.index();
-                                p.cr = p.rt._get_parent(p.r);
-                                break;
-                            case "after":
-                                p.cp = p.r.index() + 1;
-                                p.cr = p.rt._get_parent(p.r);
-                                break;
-                            case "inside":
-                            case "first":
-                                p.cp = 0;
-                                p.cr = p.r;
-                                break;
-                            case "last":
-                                p.cp = p.r.find(" > ul > li").length;
-                                p.cr = p.r;
-                                break;
-                            default:
-                                p.cp = p.p;
-                                p.cr = p.r;
-                                break;
-                        }
-                    }
-                    p.np = p.cr == -1 ? p.rt.get_container() : p.cr;
-                    p.op = p.ot._get_parent(p.o);
-                    p.cop = p.o.index();
-                    if (p.op === -1) {
-                        p.op = p.ot ? p.ot.get_container() : this.get_container();
-                    }
-                    if (!/^(before|after)$/.test(p.p) && p.op && p.np && p.op[0] === p.np[0] && p.o.index() < p.cp) {
-                        p.cp++;
-                    }
-                    //if(p.p === "before" && p.op && p.np && p.op[0] === p.np[0] && p.o.index() < p.cp) { p.cp--; }
-                    p.or = p.np.find(" > ul > li:nth-child(" + (p.cp + 1) + ")");
-                    prepared_move = p;
-                    this.__callback(prepared_move);
-                    if (cb) {
-                        cb.call(this, prepared_move);
-                    }
-                },
-                check_move: function () {
-                    var obj = prepared_move, ret = true, r = obj.r === -1 ? this.get_container() : obj.r;
-                    if (!obj || !obj.o || obj.or[0] === obj.o[0]) {
-                        return false;
-                    }
-                    if (obj.op && obj.np && obj.op[0] === obj.np[0] && obj.cp - 1 === obj.o.index()) {
-                        return false;
-                    }
-                    obj.o.each(function () {
-                        if (r.parentsUntil(".jstree", "li").andSelf().index(this) !== -1) {
-                            ret = false;
-                            return false;
-                        }
-                    });
-                    return ret;
-                },
-                move_node: function (obj, ref, position, is_copy, is_prepared, skip_check) {
-                    if (!is_prepared) {
-                        return this.prepare_move(obj, ref, position, function (p) {
-                            this.move_node(p, false, false, is_copy, true, skip_check);
-                        });
-                    }
-                    if (is_copy) {
-                        prepared_move.cy = true;
-                    }
-                    if (!skip_check && !this.check_move()) {
-                        return false;
-                    }
-
-                    this.__rollback();
-                    var o = false;
-                    if (is_copy) {
-                        o = obj.o.clone(true);
-                        o.find("*[id]").andSelf().each(function () {
-                            if (this.id) {
-                                this.id = "copy_" + this.id;
-                            }
-                        });
-                    }
-                    else {
-                        o = obj.o;
-                    }
-
-                    if (obj.or.length) {
-                        obj.or.before(o);
-                    }
-                    else {
-                        if (!obj.np.children("ul").length) {
-                            $("<ul />").appendTo(obj.np);
-                        }
-                        obj.np.children("ul:eq(0)").append(o);
-                    }
-
-                    try {
-                        obj.ot.clean_node(obj.op);
-                        obj.rt.clean_node(obj.np);
-                        if (!obj.op.find("> ul > li").length) {
-                            obj.op.removeClass("jstree-open jstree-closed").addClass("jstree-leaf").children("ul").remove();
-                        }
-                    } catch (e) {
-                    }
-
-                    if (is_copy) {
-                        prepared_move.cy = true;
-                        prepared_move.oc = o;
-                    }
-                    this.__callback(prepared_move);
-                    return prepared_move;
-                },
-                _get_move: function () {
-                    return prepared_move;
-                }
-            }
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree ui plugin
-     * This plugins handles selecting/deselecting/hovering/dehovering nodes
-     */
-    (function ($) {
-        var scrollbar_width, e1, e2;
-        $(function () {
-            if (/msie/.test(navigator.userAgent.toLowerCase())) {
-                e1 = $('<textarea cols="10" rows="2"></textarea>').css({
-                    position: 'absolute',
-                    top: -1000,
-                    left: 0
-                }).appendTo('body');
-                e2 = $('<textarea cols="10" rows="2" style="overflow: hidden;"></textarea>').css({
-                    position: 'absolute',
-                    top: -1000,
-                    left: 0
-                }).appendTo('body');
-                scrollbar_width = e1.width() - e2.width();
-                e1.add(e2).remove();
-            }
-            else {
-                e1 = $('<div />').css({
-                    width: 100,
-                    height: 100,
-                    overflow: 'auto',
-                    position: 'absolute',
-                    top: -1000,
-                    left: 0
-                })
-                    .prependTo('body').append('<div />').find('div').css({width: '100%', height: 200});
-                scrollbar_width = 100 - e1.width();
-                e1.parent().remove();
-            }
-        });
-        $.jstree.plugin("ui", {
-            __init: function () {
-                this.data.ui.selected = $();
-                this.data.ui.last_selected = false;
-                this.data.ui.hovered = null;
-                this.data.ui.to_select = this.get_settings().ui.initially_select;
-
-                this.get_container()
-                    .delegate("a", "click.jstree", $.proxy(function (event) {
-                        event.preventDefault();
-                        event.currentTarget.blur();
-                        if (!$(event.currentTarget).hasClass("jstree-loading")) {
-                            this.select_node(event.currentTarget, true, event);
-                        }
-                    }, this))
-                    .delegate("a", "mouseenter.jstree", $.proxy(function (event) {
-                        if (!$(event.currentTarget).hasClass("jstree-loading")) {
-                            this.hover_node(event.target);
-                        }
-                    }, this))
-                    .delegate("a", "mouseleave.jstree", $.proxy(function (event) {
-                        if (!$(event.currentTarget).hasClass("jstree-loading")) {
-                            this.dehover_node(event.target);
-                        }
-                    }, this))
-                    .bind("reopen.jstree", $.proxy(function () {
-                        this.reselect();
-                    }, this))
-                    .bind("get_rollback.jstree", $.proxy(function () {
-                        this.dehover_node();
-                        this.save_selected();
-                    }, this))
-                    .bind("set_rollback.jstree", $.proxy(function () {
-                        this.reselect();
-                    }, this))
-                    .bind("close_node.jstree", $.proxy(function (event, data) {
-                        var s = this._get_settings().ui,
-                            obj = this._get_node(data.rslt.obj),
-                            clk = (obj && obj.length) ? obj.children("ul").find("a.jstree-clicked") : $(),
-                            _this = this;
-                        if (s.selected_parent_close === false || !clk.length) {
-                            return;
-                        }
-                        clk.each(function () {
-                            _this.deselect_node(this);
-                            if (s.selected_parent_close === "select_parent") {
-                                _this.select_node(obj);
-                            }
-                        });
-                    }, this))
-                    .bind("delete_node.jstree", $.proxy(function (event, data) {
-                        var s = this._get_settings().ui.select_prev_on_delete,
-                            obj = this._get_node(data.rslt.obj),
-                            clk = (obj && obj.length) ? obj.find("a.jstree-clicked") : [],
-                            _this = this;
-                        clk.each(function () {
-                            _this.deselect_node(this);
-                        });
-                        if (s && clk.length) {
-                            data.rslt.prev.each(function () {
-                                if (this.parentNode) {
-                                    _this.select_node(this);
-                                    return false;
-                                    /* if return false is removed all prev nodes will be selected */
-                                }
-                            });
-                        }
-                    }, this))
-                    .bind("move_node.jstree", $.proxy(function (event, data) {
-                        if (data.rslt.cy) {
-                            data.rslt.oc.find("a.jstree-clicked").removeClass("jstree-clicked");
-                        }
-                    }, this));
-            },
-            defaults: {
-                select_limit: -1, // 0, 1, 2 ... or -1 for unlimited
-                select_multiple_modifier: "ctrl", // on, or ctrl, shift, alt
-                select_range_modifier: "shift",
-                selected_parent_close: "select_parent", // false, "deselect", "select_parent"
-                selected_parent_open: true,
-                select_prev_on_delete: true,
-                disable_selecting_children: false,
-                initially_select: []
-            },
-            _fn: {
-                _get_node: function (obj, allow_multiple) {
-                    if (typeof obj === "undefined" || obj === null) {
-                        return allow_multiple ? this.data.ui.selected : this.data.ui.last_selected;
-                    }
-                    var $obj = $(obj, this.get_container());
-                    if ($obj.is(".jstree") || obj == -1) {
-                        return -1;
-                    }
-                    $obj = $obj.closest("li", this.get_container());
-                    return $obj.length ? $obj : false;
-                },
-                _ui_notify: function (n, data) {
-                    if (data.selected) {
-                        this.select_node(n, false);
-                    }
-                },
-                save_selected: function () {
-                    var _this = this;
-                    this.data.ui.to_select = [];
-                    this.data.ui.selected.each(function () {
-                        if (this.id) {
-                            _this.data.ui.to_select.push("#" + this.id.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:"));
-                        }
-                    });
-                    this.__callback(this.data.ui.to_select);
-                },
-                reselect: function () {
-                    var _this = this,
-                        s = this.data.ui.to_select;
-                    s = $.map($.makeArray(s), function (n) {
-                        return "#" + n.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:");
-                    });
-                    // this.deselect_all(); WHY deselect, breaks plugin state notifier?
-                    $.each(s, function (i, val) {
-                        if (val && val !== "#") {
-                            _this.select_node(val);
-                        }
-                    });
-                    this.data.ui.selected = this.data.ui.selected.filter(function () {
-                        return this.parentNode;
-                    });
-                    this.__callback();
-                },
-                refresh: function (obj) {
-                    this.save_selected();
-                    return this.__call_old();
-                },
-                hover_node: function (obj) {
-                    obj = this._get_node(obj);
-                    if (!obj.length) {
-                        return false;
-                    }
-                    //if(this.data.ui.hovered && obj.get(0) === this.data.ui.hovered.get(0)) { return; }
-                    if (!obj.hasClass("jstree-hovered")) {
-                        this.dehover_node();
-                    }
-                    this.data.ui.hovered = obj.children("a").addClass("jstree-hovered").parent();
-                    this._fix_scroll(obj);
-                    this.__callback({"obj": obj});
-                },
-                dehover_node: function () {
-                    var obj = this.data.ui.hovered, p;
-                    if (!obj || !obj.length) {
-                        return false;
-                    }
-                    p = obj.children("a").removeClass("jstree-hovered").parent();
-                    if (this.data.ui.hovered[0] === p[0]) {
-                        this.data.ui.hovered = null;
-                    }
-                    this.__callback({"obj": obj});
-                },
-                select_node: function (obj, check, e) {
-                    obj = this._get_node(obj);
-                    if (obj == -1 || !obj || !obj.length) {
-                        return false;
-                    }
-                    var s = this._get_settings().ui,
-                        is_multiple = (s.select_multiple_modifier == "on" || (s.select_multiple_modifier !== false && e && e[s.select_multiple_modifier + "Key"])),
-                        is_range = (s.select_range_modifier !== false && e && e[s.select_range_modifier + "Key"] && this.data.ui.last_selected && this.data.ui.last_selected[0] !== obj[0] && this.data.ui.last_selected.parent()[0] === obj.parent()[0]),
-                        is_selected = this.is_selected(obj),
-                        proceed = true,
-                        t = this;
-                    if (check) {
-                        if (s.disable_selecting_children && is_multiple &&
-                            (
-                                (obj.parentsUntil(".jstree", "li").children("a.jstree-clicked").length) ||
-                                (obj.children("ul").find("a.jstree-clicked:eq(0)").length)
-                            )
-                        ) {
-                            return false;
-                        }
-                        proceed = false;
-                        switch (!0) {
-                            case (is_range):
-                                this.data.ui.last_selected.addClass("jstree-last-selected");
-                                obj = obj[obj.index() < this.data.ui.last_selected.index() ? "nextUntil" : "prevUntil"](".jstree-last-selected").andSelf();
-                                if (s.select_limit == -1 || obj.length < s.select_limit) {
-                                    this.data.ui.last_selected.removeClass("jstree-last-selected");
-                                    this.data.ui.selected.each(function () {
-                                        if (this !== t.data.ui.last_selected[0]) {
-                                            t.deselect_node(this);
-                                        }
-                                    });
-                                    is_selected = false;
-                                    proceed = true;
-                                }
-                                else {
-                                    proceed = false;
-                                }
-                                break;
-                            case (is_selected && !is_multiple):
-                                this.deselect_all();
-                                is_selected = false;
-                                proceed = true;
-                                break;
-                            case (!is_selected && !is_multiple):
-                                if (s.select_limit == -1 || s.select_limit > 0) {
-                                    this.deselect_all();
-                                    proceed = true;
-                                }
-                                break;
-                            case (is_selected && is_multiple):
-                                this.deselect_node(obj);
-                                break;
-                            case (!is_selected && is_multiple):
-                                if (s.select_limit == -1 || this.data.ui.selected.length + 1 <= s.select_limit) {
-                                    proceed = true;
-                                }
-                                break;
-                        }
-                    }
-                    if (proceed && !is_selected) {
-                        if (!is_range) {
-                            this.data.ui.last_selected = obj;
-                        }
-                        obj.children("a").addClass("jstree-clicked");
-                        if (s.selected_parent_open) {
-                            obj.parents(".jstree-closed").each(function () {
-                                t.open_node(this, false, true);
-                            });
-                        }
-                        this.data.ui.selected = this.data.ui.selected.add(obj);
-                        this._fix_scroll(obj.eq(0));
-                        this.__callback({"obj": obj, "e": e});
-                    }
-                },
-                _fix_scroll: function (obj) {
-                    var c = this.get_container()[0], t;
-                    if (c.scrollHeight > c.offsetHeight) {
-                        obj = this._get_node(obj);
-                        if (!obj || obj === -1 || !obj.length || !obj.is(":visible")) {
-                            return;
-                        }
-                        t = obj.offset().top - this.get_container().offset().top;
-                        if (t < 0) {
-                            c.scrollTop = c.scrollTop + t - 1;
-                        }
-                        if (t + this.data.core.li_height + (c.scrollWidth > c.offsetWidth ? scrollbar_width : 0) > c.offsetHeight) {
-                            c.scrollTop = c.scrollTop + (t - c.offsetHeight + this.data.core.li_height + 1 + (c.scrollWidth > c.offsetWidth ? scrollbar_width : 0));
-                        }
-                    }
-                },
-                deselect_node: function (obj) {
-                    obj = this._get_node(obj);
-                    if (!obj.length) {
-                        return false;
-                    }
-                    if (this.is_selected(obj)) {
-                        obj.children("a").removeClass("jstree-clicked");
-                        this.data.ui.selected = this.data.ui.selected.not(obj);
-                        if (this.data.ui.last_selected.get(0) === obj.get(0)) {
-                            this.data.ui.last_selected = this.data.ui.selected.eq(0);
-                        }
-                        this.__callback({"obj": obj});
-                    }
-                },
-                toggle_select: function (obj) {
-                    obj = this._get_node(obj);
-                    if (!obj.length) {
-                        return false;
-                    }
-                    if (this.is_selected(obj)) {
-                        this.deselect_node(obj);
-                    }
-                    else {
-                        this.select_node(obj);
-                    }
-                },
-                is_selected: function (obj) {
-                    return this.data.ui.selected.index(this._get_node(obj)) >= 0;
-                },
-                get_selected: function (context) {
-                    return context ? $(context).find("a.jstree-clicked").parent() : this.data.ui.selected;
-                },
-                deselect_all: function (context) {
-                    var ret = context ? $(context).find("a.jstree-clicked").parent() : this.get_container().find("a.jstree-clicked").parent();
-                    ret.children("a.jstree-clicked").removeClass("jstree-clicked");
-                    this.data.ui.selected = $([]);
-                    this.data.ui.last_selected = false;
-                    this.__callback({"obj": ret});
-                }
-            }
-        });
-        // include the selection plugin by default
-        $.jstree.defaults.plugins.push("ui");
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree CRRM plugin
-     * Handles creating/renaming/removing/moving nodes by user interaction.
-     */
-    (function ($) {
-        $.jstree.plugin("crrm", {
-            __init: function () {
-                this.get_container()
-                    .bind("move_node.jstree", $.proxy(function (e, data) {
-                        if (this._get_settings().crrm.move.open_onmove) {
-                            var t = this;
-                            data.rslt.np.parentsUntil(".jstree").andSelf().filter(".jstree-closed").each(function () {
-                                t.open_node(this, false, true);
-                            });
-                        }
-                    }, this));
-            },
-            defaults: {
-                input_width_limit: 200,
-                move: {
-                    always_copy: false, // false, true or "multitree"
-                    open_onmove: true,
-                    default_position: "last",
-                    check_move: function (m) {
-                        return true;
-                    }
-                }
-            },
-            _fn: {
-                _show_input: function (obj, callback) {
-                    obj = this._get_node(obj);
-                    var rtl = this._get_settings().core.rtl,
-                        w = this._get_settings().crrm.input_width_limit,
-                        w1 = obj.children("ins").width(),
-                        w2 = obj.find("> a:visible > ins").width() * obj.find("> a:visible > ins").length,
-                        t = this.get_text(obj),
-                        h1 = $("<div />", {
-                            css: {
-                                "position": "absolute",
-                                "top": "-200px",
-                                "left": (rtl ? "0px" : "-1000px"),
-                                "visibility": "hidden"
-                            }
-                        }).appendTo("body"),
-                        h2 = obj.css("position", "relative").append(
-                            $("<input />", {
-                                "value": t,
-                                "class": "jstree-rename-input",
-                                // "size" : t.length,
-                                "css": {
-                                    "padding": "0",
-                                    "border": "1px solid silver",
-                                    "position": "absolute",
-                                    "left": (rtl ? "auto" : (w1 + w2 + 4) + "px"),
-                                    "right": (rtl ? (w1 + w2 + 4) + "px" : "auto"),
-                                    "top": "0px",
-                                    "height": (this.data.core.li_height - 2) + "px",
-                                    "lineHeight": (this.data.core.li_height - 2) + "px",
-                                    "width": "150px" // will be set a bit further down
-                                },
-                                "blur": $.proxy(function () {
-                                    var i = obj.children(".jstree-rename-input"),
-                                        v = i.val();
-                                    if (v === "") {
-                                        v = t;
-                                    }
-                                    h1.remove();
-                                    i.remove(); // rollback purposes
-                                    this.set_text(obj, t); // rollback purposes
-                                    this.rename_node(obj, v);
-                                    callback.call(this, obj, v, t);
-                                    obj.css("position", "");
-                                }, this),
-                                "keyup": function (event) {
-                                    var key = event.keyCode || event.which;
-                                    if (key == 27) {
-                                        this.value = t;
-                                        this.blur();
-                                    }
-                                    else if (key == 13) {
-                                        this.blur();
-                                    }
-                                    else {
-                                        h2.width(Math.min(h1.text("pW" + this.value).width(), w));
-                                    }
-                                },
-                                "keypress": function (event) {
-                                    var key = event.keyCode || event.which;
-                                    if (key == 13) {
-                                        return false;
-                                    }
-                                }
-                            })
-                        ).children(".jstree-rename-input");
-                    this.set_text(obj, "");
-                    h1.css({
-                        fontFamily: h2.css('fontFamily') || '',
-                        fontSize: h2.css('fontSize') || '',
-                        fontWeight: h2.css('fontWeight') || '',
-                        fontStyle: h2.css('fontStyle') || '',
-                        fontStretch: h2.css('fontStretch') || '',
-                        fontVariant: h2.css('fontVariant') || '',
-                        letterSpacing: h2.css('letterSpacing') || '',
-                        wordSpacing: h2.css('wordSpacing') || ''
-                    });
-                    h2.width(Math.min(h1.text("pW" + h2[0].value).width(), w))[0].select();
-                },
-                rename: function (obj) {
-                    obj = this._get_node(obj);
-                    this.__rollback();
-                    var f = this.__callback;
-                    this._show_input(obj, function (obj, new_name, old_name) {
-                        f.call(this, {"obj": obj, "new_name": new_name, "old_name": old_name});
-                    });
-                },
-                create: function (obj, position, js, callback, skip_rename) {
-                    var t, _this = this;
-                    obj = this._get_node(obj);
-                    if (!obj) {
-                        obj = -1;
-                    }
-                    this.__rollback();
-                    t = this.create_node(obj, position, js, function (t) {
-                        var p = this._get_parent(t),
-                            pos = $(t).index();
-                        if (callback) {
-                            callback.call(this, t);
-                        }
-                        if (p.length && p.hasClass("jstree-closed")) {
-                            this.open_node(p, false, true);
-                        }
-                        if (!skip_rename) {
-                            this._show_input(t, function (obj, new_name, old_name) {
-                                _this.__callback({"obj": obj, "name": new_name, "parent": p, "position": pos});
-                            });
-                        }
-                        else {
-                            _this.__callback({"obj": t, "name": this.get_text(t), "parent": p, "position": pos});
-                        }
-                    });
-                    return t;
-                },
-                remove: function (obj) {
-                    obj = this._get_node(obj, true);
-                    var p = this._get_parent(obj), prev = this._get_prev(obj);
-                    this.__rollback();
-                    obj = this.delete_node(obj);
-                    if (obj !== false) {
-                        this.__callback({"obj": obj, "prev": prev, "parent": p});
-                    }
-                },
-                check_move: function () {
-                    if (!this.__call_old()) {
-                        return false;
-                    }
-                    var s = this._get_settings().crrm.move;
-                    if (!s.check_move.call(this, this._get_move())) {
-                        return false;
-                    }
-                    return true;
-                },
-                move_node: function (obj, ref, position, is_copy, is_prepared, skip_check) {
-                    var s = this._get_settings().crrm.move;
-                    if (!is_prepared) {
-                        if (typeof position === "undefined") {
-                            position = s.default_position;
-                        }
-                        if (position === "inside" && !s.default_position.match(/^(before|after)$/)) {
-                            position = s.default_position;
-                        }
-                        return this.__call_old(true, obj, ref, position, is_copy, false, skip_check);
-                    }
-                    // if the move is already prepared
-                    if (s.always_copy === true || (s.always_copy === "multitree" && obj.rt.get_index() !== obj.ot.get_index() )) {
-                        is_copy = true;
-                    }
-                    this.__call_old(true, obj, ref, position, is_copy, true, skip_check);
-                },
-
-                cut: function (obj) {
-                    obj = this._get_node(obj, true);
-                    if (!obj || !obj.length) {
-                        return false;
-                    }
-                    this.data.crrm.cp_nodes = false;
-                    this.data.crrm.ct_nodes = obj;
-                    this.__callback({"obj": obj});
-                },
-                copy: function (obj) {
-                    obj = this._get_node(obj, true);
-                    if (!obj || !obj.length) {
-                        return false;
-                    }
-                    this.data.crrm.ct_nodes = false;
-                    this.data.crrm.cp_nodes = obj;
-                    this.__callback({"obj": obj});
-                },
-                paste: function (obj) {
-                    obj = this._get_node(obj);
-                    if (!obj || !obj.length) {
-                        return false;
-                    }
-                    var nodes = this.data.crrm.ct_nodes ? this.data.crrm.ct_nodes : this.data.crrm.cp_nodes;
-                    if (!this.data.crrm.ct_nodes && !this.data.crrm.cp_nodes) {
-                        return false;
-                    }
-                    if (this.data.crrm.ct_nodes) {
-                        this.move_node(this.data.crrm.ct_nodes, obj);
-                        this.data.crrm.ct_nodes = false;
-                    }
-                    if (this.data.crrm.cp_nodes) {
-                        this.move_node(this.data.crrm.cp_nodes, obj, false, true);
-                    }
-                    this.__callback({"obj": obj, "nodes": nodes});
-                }
-            }
-        });
-        // include the crr plugin by default
-        // $.jstree.defaults.plugins.push("crrm");
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree themes plugin
-     * Handles loading and setting themes, as well as detecting path to themes, etc.
-     */
-    (function ($) {
-        var themes_loaded = [];
-        // this variable stores the path to the themes folder - if left as false - it will be autodetected
-        $.jstree._themes = false;
-        $.jstree.plugin("themes", {
-            __init: function () {
-                this.get_container()
-                    .bind("init.jstree", $.proxy(function () {
-                        var s = this._get_settings().themes;
-                        this.data.themes.dots = s.dots;
-                        this.data.themes.icons = s.icons;
-                        this.set_theme(s.theme, s.url);
-                    }, this))
-                    .bind("loaded.jstree", $.proxy(function () {
-                        // bound here too, as simple HTML tree's won't honor dots & icons otherwise
-                        if (!this.data.themes.dots) {
-                            this.hide_dots();
-                        }
-                        else {
-                            this.show_dots();
-                        }
-                        if (!this.data.themes.icons) {
-                            this.hide_icons();
-                        }
-                        else {
-                            this.show_icons();
-                        }
-                    }, this));
-            },
-            defaults: {
-                theme: "default",
-                url: false,
-                dots: true,
-                icons: true
-            },
-            _fn: {
-                set_theme: function (theme_name, theme_url) {
-                    if (!theme_name) {
-                        return false;
-                    }
-                    if (!theme_url) {
-                        theme_url = $.jstree._themes + theme_name + '/style.css';
-                    }
-                    if ($.inArray(theme_url, themes_loaded) == -1) {
-                        $.vakata.css.add_sheet({"url": theme_url});
-                        themes_loaded.push(theme_url);
-                    }
-                    if (this.data.themes.theme != theme_name) {
-                        this.get_container().removeClass('jstree-' + this.data.themes.theme);
-                        this.data.themes.theme = theme_name;
-                    }
-                    this.get_container().addClass('jstree-' + theme_name);
-                    if (!this.data.themes.dots) {
-                        this.hide_dots();
-                    }
-                    else {
-                        this.show_dots();
-                    }
-                    if (!this.data.themes.icons) {
-                        this.hide_icons();
-                    }
-                    else {
-                        this.show_icons();
-                    }
-                    this.__callback();
-                },
-                get_theme: function () {
-                    return this.data.themes.theme;
-                },
-
-                show_dots: function () {
-                    this.data.themes.dots = true;
-                    this.get_container().children("ul").removeClass("jstree-no-dots");
-                },
-                hide_dots: function () {
-                    this.data.themes.dots = false;
-                    this.get_container().children("ul").addClass("jstree-no-dots");
-                },
-                toggle_dots: function () {
-                    if (this.data.themes.dots) {
-                        this.hide_dots();
-                    } else {
-                        this.show_dots();
-                    }
-                },
-
-                show_icons: function () {
-                    this.data.themes.icons = true;
-                    this.get_container().children("ul").removeClass("jstree-no-icons");
-                },
-                hide_icons: function () {
-                    this.data.themes.icons = false;
-                    this.get_container().children("ul").addClass("jstree-no-icons");
-                },
-                toggle_icons: function () {
-                    if (this.data.themes.icons) {
-                        this.hide_icons();
-                    } else {
-                        this.show_icons();
-                    }
-                }
-            }
-        });
-        // autodetect themes path
-        $(function () {
-            if ($.jstree._themes === false) {
-                $("script").each(function () {
-                    if (this.src.toString().match(/jquery\.jstree[^\/]*?\.js(\?.*)?$/)) {
-                        $.jstree._themes = this.src.toString().replace(/jquery\.jstree[^\/]*?\.js(\?.*)?$/, "") + 'themes/';
-                        return false;
-                    }
-                });
-            }
-            if ($.jstree._themes === false) {
-                $.jstree._themes = "themes/";
-            }
-        });
-        // include the themes plugin by default
-        $.jstree.defaults.plugins.push("themes");
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree hotkeys plugin
-     * Enables keyboard navigation for all tree instances
-     * Depends on the jstree ui & jquery hotkeys plugins
-     */
-    (function ($) {
-        var bound = [];
-
-        function exec(i, event) {
-            var f = $.jstree._focused(), tmp;
-            if (f && f.data && f.data.hotkeys && f.data.hotkeys.enabled) {
-                tmp = f._get_settings().hotkeys[i];
-                if (tmp) {
-                    return tmp.call(f, event);
-                }
-            }
-        }
-
-        $.jstree.plugin("hotkeys", {
-            __init: function () {
-                if (typeof $.hotkeys === "undefined") {
-                    throw "jsTree hotkeys: jQuery hotkeys plugin not included.";
-                }
-                if (!this.data.ui) {
-                    throw "jsTree hotkeys: jsTree UI plugin not included.";
-                }
-                $.each(this._get_settings().hotkeys, function (i, v) {
-                    if (v !== false && $.inArray(i, bound) == -1) {
-                        $(document).bind("keydown", i, function (event) {
-                            return exec(i, event);
-                        });
-                        bound.push(i);
-                    }
-                });
-                this.get_container()
-                    .bind("lock.jstree", $.proxy(function () {
-                        if (this.data.hotkeys.enabled) {
-                            this.data.hotkeys.enabled = false;
-                            this.data.hotkeys.revert = true;
-                        }
-                    }, this))
-                    .bind("unlock.jstree", $.proxy(function () {
-                        if (this.data.hotkeys.revert) {
-                            this.data.hotkeys.enabled = true;
-                        }
-                    }, this));
-                this.enable_hotkeys();
-            },
-            defaults: {
-                "up": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
-                    this.hover_node(this._get_prev(o));
-                    return false;
-                },
-                "ctrl+up": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
-                    this.hover_node(this._get_prev(o));
-                    return false;
-                },
-                "shift+up": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
-                    this.hover_node(this._get_prev(o));
-                    return false;
-                },
-                "down": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
-                    this.hover_node(this._get_next(o));
-                    return false;
-                },
-                "ctrl+down": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
-                    this.hover_node(this._get_next(o));
-                    return false;
-                },
-                "shift+down": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected || -1;
-                    this.hover_node(this._get_next(o));
-                    return false;
-                },
-                "left": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected;
-                    if (o) {
-                        if (o.hasClass("jstree-open")) {
-                            this.close_node(o);
-                        }
-                        else {
-                            this.hover_node(this._get_prev(o));
-                        }
-                    }
-                    return false;
-                },
-                "ctrl+left": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected;
-                    if (o) {
-                        if (o.hasClass("jstree-open")) {
-                            this.close_node(o);
-                        }
-                        else {
-                            this.hover_node(this._get_prev(o));
-                        }
-                    }
-                    return false;
-                },
-                "shift+left": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected;
-                    if (o) {
-                        if (o.hasClass("jstree-open")) {
-                            this.close_node(o);
-                        }
-                        else {
-                            this.hover_node(this._get_prev(o));
-                        }
-                    }
-                    return false;
-                },
-                "right": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected;
-                    if (o && o.length) {
-                        if (o.hasClass("jstree-closed")) {
-                            this.open_node(o);
-                        }
-                        else {
-                            this.hover_node(this._get_next(o));
-                        }
-                    }
-                    return false;
-                },
-                "ctrl+right": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected;
-                    if (o && o.length) {
-                        if (o.hasClass("jstree-closed")) {
-                            this.open_node(o);
-                        }
-                        else {
-                            this.hover_node(this._get_next(o));
-                        }
-                    }
-                    return false;
-                },
-                "shift+right": function () {
-                    var o = this.data.ui.hovered || this.data.ui.last_selected;
-                    if (o && o.length) {
-                        if (o.hasClass("jstree-closed")) {
-                            this.open_node(o);
-                        }
-                        else {
-                            this.hover_node(this._get_next(o));
-                        }
-                    }
-                    return false;
-                },
-                "space": function () {
-                    if (this.data.ui.hovered) {
-                        this.data.ui.hovered.children("a:eq(0)").click();
-                    }
-                    return false;
-                },
-                "ctrl+space": function (event) {
-                    event.type = "click";
-                    if (this.data.ui.hovered) {
-                        this.data.ui.hovered.children("a:eq(0)").trigger(event);
-                    }
-                    return false;
-                },
-                "shift+space": function (event) {
-                    event.type = "click";
-                    if (this.data.ui.hovered) {
-                        this.data.ui.hovered.children("a:eq(0)").trigger(event);
-                    }
-                    return false;
-                },
-                "f2": function () {
-                    this.rename(this.data.ui.hovered || this.data.ui.last_selected);
-                },
-                "del": function () {
-                    this.remove(this.data.ui.hovered || this._get_node(null));
-                }
-            },
-            _fn: {
-                enable_hotkeys: function () {
-                    this.data.hotkeys.enabled = true;
-                },
-                disable_hotkeys: function () {
-                    this.data.hotkeys.enabled = false;
-                }
-            }
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree JSON plugin
-     * The JSON data store. Datastores are build by overriding the `load_node` and `_is_loaded` functions.
-     */
-    (function ($) {
-        $.jstree.plugin("json_data", {
-            __init: function () {
-                var s = this._get_settings().json_data;
-                if (s.progressive_unload) {
-                    this.get_container().bind("after_close.jstree", function (e, data) {
-                        data.rslt.obj.children("ul").remove();
-                    });
-                }
-            },
-            defaults: {
-                // `data` can be a function:
-                //  * accepts two arguments - node being loaded and a callback to pass the result to
-                //  * will be executed in the current tree's scope & ajax won't be supported
-                data: false,
-                ajax: false,
-                correct_state: true,
-                progressive_render: false,
-                progressive_unload: false
-            },
-            _fn: {
-                load_node: function (obj, s_call, e_call) {
-                    var _this = this;
-                    this.load_node_json(obj, function () {
-                        _this.__callback({"obj": _this._get_node(obj)});
-                        s_call.call(this);
-                    }, e_call);
-                },
-                _is_loaded: function (obj) {
-                    var s = this._get_settings().json_data;
-                    obj = this._get_node(obj);
-                    return obj == -1 || !obj || (!s.ajax && !s.progressive_render && !$.isFunction(s.data)) || obj.is(".jstree-open, .jstree-leaf") || obj.children("ul").children("li").length > 0;
-                },
-                refresh: function (obj) {
-                    obj = this._get_node(obj);
-                    var s = this._get_settings().json_data;
-                    if (obj && obj !== -1 && s.progressive_unload && ($.isFunction(s.data) || !!s.ajax)) {
-                        obj.removeData("jstree_children");
-                    }
-                    return this.__call_old();
-                },
-                load_node_json: function (obj, s_call, e_call) {
-                    var s = this.get_settings().json_data, d,
-                        error_func = function () {
-                        },
-                        success_func = function () {
-                        };
-                    obj = this._get_node(obj);
-
-                    if (obj && obj !== -1 && (s.progressive_render || s.progressive_unload) && !obj.is(".jstree-open, .jstree-leaf") && obj.children("ul").children("li").length === 0 && obj.data("jstree_children")) {
-                        d = this._parse_json(obj.data("jstree_children"), obj);
-                        if (d) {
-                            obj.append(d);
-                            if (!s.progressive_unload) {
-                                obj.removeData("jstree_children");
-                            }
-                        }
-                        this.clean_node(obj);
-                        if (s_call) {
-                            s_call.call(this);
-                        }
-                        return;
-                    }
-
-                    if (obj && obj !== -1) {
-                        if (obj.data("jstree_is_loading")) {
-                            return;
-                        }
-                        else {
-                            obj.data("jstree_is_loading", true);
-                        }
-                    }
-                    switch (!0) {
-                        case (!s.data && !s.ajax):
-                            throw "Neither data nor ajax settings supplied.";
-                        // function option added here for easier model integration (also supporting async - see callback)
-                        case ($.isFunction(s.data)):
-                            s.data.call(this, obj, $.proxy(function (d) {
-                                d = this._parse_json(d, obj);
-                                if (!d) {
-                                    if (obj === -1 || !obj) {
-                                        if (s.correct_state) {
-                                            this.get_container().children("ul").empty();
-                                        }
-                                    }
-                                    else {
-                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                        obj.removeData("jstree_is_loading");
-                                        if (s.correct_state) {
-                                            this.correct_state(obj);
-                                        }
-                                    }
-                                    if (e_call) {
-                                        e_call.call(this);
-                                    }
-                                }
-                                else {
-                                    if (obj === -1 || !obj) {
-                                        this.get_container().children("ul").empty().append(d.children());
-                                    }
-                                    else {
-                                        obj.append(d).children("a.jstree-loading").removeClass("jstree-loading");
-                                        obj.removeData("jstree_is_loading");
-                                    }
-                                    this.clean_node(obj);
-                                    if (s_call) {
-                                        s_call.call(this);
-                                    }
-                                }
-                            }, this));
-                            break;
-                        case (!!s.data && !s.ajax) || (!!s.data && !!s.ajax && (!obj || obj === -1)):
-                            if (!obj || obj == -1) {
-                                d = this._parse_json(s.data, obj);
-                                if (d) {
-                                    this.get_container().children("ul").empty().append(d.children());
-                                    this.clean_node();
-                                }
-                                else {
-                                    if (s.correct_state) {
-                                        this.get_container().children("ul").empty();
-                                    }
-                                }
-                            }
-                            if (s_call) {
-                                s_call.call(this);
-                            }
-                            break;
-                        case (!s.data && !!s.ajax) || (!!s.data && !!s.ajax && obj && obj !== -1):
-                            error_func = function (x, t, e) {
-                                var ef = this.get_settings().json_data.ajax.error;
-                                if (ef) {
-                                    ef.call(this, x, t, e);
-                                }
-                                if (obj != -1 && obj.length) {
-                                    obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                    obj.removeData("jstree_is_loading");
-                                    if (t === "success" && s.correct_state) {
-                                        this.correct_state(obj);
-                                    }
-                                }
-                                else {
-                                    if (t === "success" && s.correct_state) {
-                                        this.get_container().children("ul").empty();
-                                    }
-                                }
-                                if (e_call) {
-                                    e_call.call(this);
-                                }
-                            };
-                            success_func = function (d, t, x) {
-                                var sf = this.get_settings().json_data.ajax.success;
-                                if (sf) {
-                                    d = sf.call(this, d, t, x) || d;
-                                }
-                                if (d === "" || (d && d.toString && d.toString().replace(/^[\s\n]+$/, "") === "") || (!$.isArray(d) && !$.isPlainObject(d))) {
-                                    return error_func.call(this, x, t, "");
-                                }
-                                d = this._parse_json(d, obj);
-                                if (d) {
-                                    if (obj === -1 || !obj) {
-                                        this.get_container().children("ul").empty().append(d.children());
-                                    }
-                                    else {
-                                        obj.append(d).children("a.jstree-loading").removeClass("jstree-loading");
-                                        obj.removeData("jstree_is_loading");
-                                    }
-                                    this.clean_node(obj);
-                                    if (s_call) {
-                                        s_call.call(this);
-                                    }
-                                }
-                                else {
-                                    if (obj === -1 || !obj) {
-                                        if (s.correct_state) {
-                                            this.get_container().children("ul").empty();
-                                            if (s_call) {
-                                                s_call.call(this);
-                                            }
-                                        }
-                                    }
-                                    else {
-                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                        obj.removeData("jstree_is_loading");
-                                        if (s.correct_state) {
-                                            this.correct_state(obj);
-                                            if (s_call) {
-                                                s_call.call(this);
-                                            }
-                                        }
-                                    }
-                                }
-                            };
-                            s.ajax.context = this;
-                            s.ajax.error = error_func;
-                            s.ajax.success = success_func;
-                            if (!s.ajax.dataType) {
-                                s.ajax.dataType = "json";
-                            }
-                            if ($.isFunction(s.ajax.url)) {
-                                s.ajax.url = s.ajax.url.call(this, obj);
-                            }
-                            if ($.isFunction(s.ajax.data)) {
-                                s.ajax.data = s.ajax.data.call(this, obj);
-                            }
-                            $.ajax(s.ajax);
-                            break;
-                    }
-                },
-                _parse_json: function (js, obj, is_callback) {
-                    var d = false,
-                        p = this._get_settings(),
-                        s = p.json_data,
-                        t = p.core.html_titles,
-                        tmp, i, j, ul1, ul2;
-
-                    if (!js) {
-                        return d;
-                    }
-                    if (s.progressive_unload && obj && obj !== -1) {
-                        obj.data("jstree_children", d);
-                    }
-                    if ($.isArray(js)) {
-                        d = $();
-                        if (!js.length) {
-                            return false;
-                        }
-                        for (i = 0, j = js.length; i < j; i++) {
-                            tmp = this._parse_json(js[i], obj, true);
-                            if (tmp.length) {
-                                d = d.add(tmp);
-                            }
-                        }
-                    }
-                    else {
-                        if (typeof js == "string") {
-                            js = {data: js};
-                        }
-                        if (!js.data && js.data !== "") {
-                            return d;
-                        }
-                        d = $("<li />");
-                        if (js.attr) {
-                            d.attr(js.attr);
-                        }
-                        if (js.metadata) {
-                            d.data(js.metadata);
-                        }
-                        if (js.state) {
-                            d.addClass("jstree-" + js.state);
-                        }
-                        if (!$.isArray(js.data)) {
-                            tmp = js.data;
-                            js.data = [];
-                            js.data.push(tmp);
-                        }
-                        $.each(js.data, function (i, m) {
-                            tmp = $("<a />");
-                            if ($.isFunction(m)) {
-                                m = m.call(this, js);
-                            }
-                            if (typeof m == "string") {
-                                tmp.attr('href', '#')[t ? "html" : "text"](m);
-                            }
-                            else {
-                                if (!m.attr) {
-                                    m.attr = {};
-                                }
-                                if (!m.attr.href) {
-                                    m.attr.href = '#';
-                                }
-                                tmp.attr(m.attr)[t ? "html" : "text"](m.title);
-                                if (m.language) {
-                                    tmp.addClass(m.language);
-                                }
-                            }
-                            tmp.prepend("<ins class='jstree-icon'>&#160;</ins>");
-                            if (!m.icon && js.icon) {
-                                m.icon = js.icon;
-                            }
-                            if (m.icon) {
-                                if (m.icon.indexOf("/") === -1) {
-                                    tmp.children("ins").addClass(m.icon);
-                                }
-                                else {
-                                    tmp.children("ins").css("background", "url('" + m.icon + "') center center no-repeat");
-                                }
-                            }
-                            d.append(tmp);
-                        });
-                        d.prepend("<ins class='jstree-icon'>&#160;</ins>");
-                        if (js.children) {
-                            if (s.progressive_render && js.state !== "open") {
-                                d.addClass("jstree-closed").data("jstree_children", js.children);
-                            }
-                            else {
-                                if (s.progressive_unload) {
-                                    d.data("jstree_children", js.children);
-                                }
-                                if ($.isArray(js.children) && js.children.length) {
-                                    tmp = this._parse_json(js.children, obj, true);
-                                    if (tmp.length) {
-                                        ul2 = $("<ul />");
-                                        ul2.append(tmp);
-                                        d.append(ul2);
-                                    }
-                                }
-                            }
-                        }
-                    }
-                    if (!is_callback) {
-                        ul1 = $("<ul />");
-                        ul1.append(d);
-                        d = ul1;
-                    }
-                    return d;
-                },
-                get_json: function (obj, li_attr, a_attr, is_callback) {
-                    var result = [],
-                        s = this._get_settings(),
-                        _this = this,
-                        tmp1, tmp2, li, a, t, lang;
-                    obj = this._get_node(obj);
-                    if (!obj || obj === -1) {
-                        obj = this.get_container().find("> ul > li");
-                    }
-                    li_attr = $.isArray(li_attr) ? li_attr : ["id", "class"];
-                    if (!is_callback && this.data.types) {
-                        li_attr.push(s.types.type_attr);
-                    }
-                    a_attr = $.isArray(a_attr) ? a_attr : [];
-
-                    obj.each(function () {
-                        li = $(this);
-                        tmp1 = {data: []};
-                        if (li_attr.length) {
-                            tmp1.attr = {};
-                        }
-                        $.each(li_attr, function (i, v) {
-                            tmp2 = li.attr(v);
-                            if (tmp2 && tmp2.length && tmp2.replace(/jstree[^ ]*/ig, '').length) {
-                                tmp1.attr[v] = (" " + tmp2).replace(/ jstree[^ ]*/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "");
-                            }
-                        });
-                        if (li.hasClass("jstree-open")) {
-                            tmp1.state = "open";
-                        }
-                        if (li.hasClass("jstree-closed")) {
-                            tmp1.state = "closed";
-                        }
-                        if (li.data()) {
-                            tmp1.metadata = li.data();
-                        }
-                        a = li.children("a");
-                        a.each(function () {
-                            t = $(this);
-                            if (
-                                a_attr.length ||
-                                $.inArray("languages", s.plugins) !== -1 ||
-                                t.children("ins").get(0).style.backgroundImage.length ||
-                                (t.children("ins").get(0).className && t.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, '').length)
-                            ) {
-                                lang = false;
-                                if ($.inArray("languages", s.plugins) !== -1 && $.isArray(s.languages) && s.languages.length) {
-                                    $.each(s.languages, function (l, lv) {
-                                        if (t.hasClass(lv)) {
-                                            lang = lv;
-                                            return false;
-                                        }
-                                    });
-                                }
-                                tmp2 = {attr: {}, title: _this.get_text(t, lang)};
-                                $.each(a_attr, function (k, z) {
-                                    tmp2.attr[z] = (" " + (t.attr(z) || "")).replace(/ jstree[^ ]*/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "");
-                                });
-                                if ($.inArray("languages", s.plugins) !== -1 && $.isArray(s.languages) && s.languages.length) {
-                                    $.each(s.languages, function (k, z) {
-                                        if (t.hasClass(z)) {
-                                            tmp2.language = z;
-                                            return true;
-                                        }
-                                    });
-                                }
-                                if (t.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/^\s+$/ig, "").length) {
-                                    tmp2.icon = t.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "");
-                                }
-                                if (t.children("ins").get(0).style.backgroundImage.length) {
-                                    tmp2.icon = t.children("ins").get(0).style.backgroundImage.replace("url(", "").replace(")", "");
-                                }
-                            }
-                            else {
-                                tmp2 = _this.get_text(t);
-                            }
-                            if (a.length > 1) {
-                                tmp1.data.push(tmp2);
-                            }
-                            else {
-                                tmp1.data = tmp2;
-                            }
-                        });
-                        li = li.find("> ul > li");
-                        if (li.length) {
-                            tmp1.children = _this.get_json(li, li_attr, a_attr, true);
-                        }
-                        result.push(tmp1);
-                    });
-                    return result;
-                }
-            }
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree languages plugin
-     * Adds support for multiple language versions in one tree
-     * This basically allows for many titles coexisting in one node, but only one of them being visible at any given time
-     * This is useful for maintaining the same structure in many languages (hence the name of the plugin)
-     */
-    (function ($) {
-        $.jstree.plugin("languages", {
-            __init: function () {
-                this._load_css();
-            },
-            defaults: [],
-            _fn: {
-                set_lang: function (i) {
-                    var langs = this._get_settings().languages,
-                        st = false,
-                        selector = ".jstree-" + this.get_index() + ' a';
-                    if (!$.isArray(langs) || langs.length === 0) {
-                        return false;
-                    }
-                    if ($.inArray(i, langs) == -1) {
-                        if (!!langs[i]) {
-                            i = langs[i];
-                        }
-                        else {
-                            return false;
-                        }
-                    }
-                    if (i == this.data.languages.current_language) {
-                        return true;
-                    }
-                    st = $.vakata.css.get_css(selector + "." + this.data.languages.current_language, false, this.data.languages.language_css);
-                    if (st !== false) {
-                        st.style.display = "none";
-                    }
-                    st = $.vakata.css.get_css(selector + "." + i, false, this.data.languages.language_css);
-                    if (st !== false) {
-                        st.style.display = "";
-                    }
-                    this.data.languages.current_language = i;
-                    this.__callback(i);
-                    return true;
-                },
-                get_lang: function () {
-                    return this.data.languages.current_language;
-                },
-                _get_string: function (key, lang) {
-                    var langs = this._get_settings().languages,
-                        s = this._get_settings().core.strings;
-                    if ($.isArray(langs) && langs.length) {
-                        lang = (lang && $.inArray(lang, langs) != -1) ? lang : this.data.languages.current_language;
-                    }
-                    if (s[lang] && s[lang][key]) {
-                        return s[lang][key];
-                    }
-                    if (s[key]) {
-                        return s[key];
-                    }
-                    return key;
-                },
-                get_text: function (obj, lang) {
-                    obj = this._get_node(obj) || this.data.ui.last_selected;
-                    if (!obj.size()) {
-                        return false;
-                    }
-                    var langs = this._get_settings().languages,
-                        s = this._get_settings().core.html_titles;
-                    if ($.isArray(langs) && langs.length) {
-                        lang = (lang && $.inArray(lang, langs) != -1) ? lang : this.data.languages.current_language;
-                        obj = obj.children("a." + lang);
-                    }
-                    else {
-                        obj = obj.children("a:eq(0)");
-                    }
-                    if (s) {
-                        obj = obj.clone();
-                        obj.children("INS").remove();
-                        return obj.html();
-                    }
-                    else {
-                        obj = obj.contents().filter(function () {
-                            return this.nodeType == 3;
-                        })[0];
-                        return obj.nodeValue;
-                    }
-                },
-                set_text: function (obj, val, lang) {
-                    obj = this._get_node(obj) || this.data.ui.last_selected;
-                    if (!obj.size()) {
-                        return false;
-                    }
-                    var langs = this._get_settings().languages,
-                        s = this._get_settings().core.html_titles,
-                        tmp;
-                    if ($.isArray(langs) && langs.length) {
-                        lang = (lang && $.inArray(lang, langs) != -1) ? lang : this.data.languages.current_language;
-                        obj = obj.children("a." + lang);
-                    }
-                    else {
-                        obj = obj.children("a:eq(0)");
-                    }
-                    if (s) {
-                        tmp = obj.children("INS").clone();
-                        obj.html(val).prepend(tmp);
-                        this.__callback({"obj": obj, "name": val, "lang": lang});
-                        return true;
-                    }
-                    else {
-                        obj = obj.contents().filter(function () {
-                            return this.nodeType == 3;
-                        })[0];
-                        this.__callback({"obj": obj, "name": val, "lang": lang});
-                        return (obj.nodeValue = val);
-                    }
-                },
-                _load_css: function () {
-                    var langs = this._get_settings().languages,
-                        str = "/* languages css */",
-                        selector = ".jstree-" + this.get_index() + ' a',
-                        ln;
-                    if ($.isArray(langs) && langs.length) {
-                        this.data.languages.current_language = langs[0];
-                        for (ln = 0; ln < langs.length; ln++) {
-                            str += selector + "." + langs[ln] + " {";
-                            if (langs[ln] != this.data.languages.current_language) {
-                                str += " display:none; ";
-                            }
-                            str += " } ";
-                        }
-                        this.data.languages.language_css = $.vakata.css.add_sheet({
-                            'str': str,
-                            'title': "jstree-languages"
-                        });
-                    }
-                },
-                create_node: function (obj, position, js, callback) {
-                    var t = this.__call_old(true, obj, position, js, function (t) {
-                        var langs = this._get_settings().languages,
-                            a = t.children("a"),
-                            ln;
-                        if ($.isArray(langs) && langs.length) {
-                            for (ln = 0; ln < langs.length; ln++) {
-                                if (!a.is("." + langs[ln])) {
-                                    t.append(a.eq(0).clone().removeClass(langs.join(" ")).addClass(langs[ln]));
-                                }
-                            }
-                            a.not("." + langs.join(", .")).remove();
-                        }
-                        if (callback) {
-                            callback.call(this, t);
-                        }
-                    });
-                    return t;
-                }
-            }
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree cookies plugin
-     * Stores the currently opened/selected nodes in a cookie and then restores them
-     * Depends on the jquery.cookie plugin
-     */
-    (function ($) {
-        $.jstree.plugin("cookies", {
-            __init: function () {
-                if (typeof $.cookie === "undefined") {
-                    throw "jsTree cookie: jQuery cookie plugin not included.";
-                }
-
-                var s = this._get_settings().cookies,
-                    tmp;
-                if (!!s.save_loaded) {
-                    tmp = $.cookie(s.save_loaded);
-                    if (tmp && tmp.length) {
-                        this.data.core.to_load = tmp.split(",");
-                    }
-                }
-                if (!!s.save_opened) {
-                    tmp = $.cookie(s.save_opened);
-                    if (tmp && tmp.length) {
-                        this.data.core.to_open = tmp.split(",");
-                    }
-                }
-                if (!!s.save_selected) {
-                    tmp = $.cookie(s.save_selected);
-                    if (tmp && tmp.length && this.data.ui) {
-                        this.data.ui.to_select = tmp.split(",");
-                    }
-                }
-                this.get_container()
-                    .one(( this.data.ui ? "reselect" : "reopen" ) + ".jstree", $.proxy(function () {
-                        this.get_container()
-                            .bind("open_node.jstree close_node.jstree select_node.jstree deselect_node.jstree", $.proxy(function (e) {
-                                if (this._get_settings().cookies.auto_save) {
-                                    this.save_cookie((e.handleObj.namespace + e.handleObj.type).replace("jstree", ""));
-                                }
-                            }, this));
-                    }, this));
-            },
-            defaults: {
-                save_loaded: "jstree_load",
-                save_opened: "jstree_open",
-                save_selected: "jstree_select",
-                auto_save: true,
-                cookie_options: {}
-            },
-            _fn: {
-                save_cookie: function (c) {
-                    if (this.data.core.refreshing) {
-                        return;
-                    }
-                    var s = this._get_settings().cookies;
-                    if (!c) { // if called manually and not by event
-                        if (s.save_loaded) {
-                            this.save_loaded();
-                            $.cookie(s.save_loaded, this.data.core.to_load.join(","), s.cookie_options);
-                        }
-                        if (s.save_opened) {
-                            this.save_opened();
-                            $.cookie(s.save_opened, this.data.core.to_open.join(","), s.cookie_options);
-                        }
-                        if (s.save_selected && this.data.ui) {
-                            this.save_selected();
-                            $.cookie(s.save_selected, this.data.ui.to_select.join(","), s.cookie_options);
-                        }
-                        return;
-                    }
-                    switch (c) {
-                        case "open_node":
-                        case "close_node":
-                            if (!!s.save_opened) {
-                                this.save_opened();
-                                $.cookie(s.save_opened, this.data.core.to_open.join(","), s.cookie_options);
-                            }
-                            if (!!s.save_loaded) {
-                                this.save_loaded();
-                                $.cookie(s.save_loaded, this.data.core.to_load.join(","), s.cookie_options);
-                            }
-                            break;
-                        case "select_node":
-                        case "deselect_node":
-                            if (!!s.save_selected && this.data.ui) {
-                                this.save_selected();
-                                $.cookie(s.save_selected, this.data.ui.to_select.join(","), s.cookie_options);
-                            }
-                            break;
-                    }
-                }
-            }
-        });
-        // include cookies by default
-        // $.jstree.defaults.plugins.push("cookies");
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree sort plugin
-     * Sorts items alphabetically (or using any other function)
-     */
-    (function ($) {
-        $.jstree.plugin("sort", {
-            __init: function () {
-                this.get_container()
-                    .bind("load_node.jstree", $.proxy(function (e, data) {
-                        var obj = this._get_node(data.rslt.obj);
-                        obj = obj === -1 ? this.get_container().children("ul") : obj.children("ul");
-                        this.sort(obj);
-                    }, this))
-                    .bind("rename_node.jstree create_node.jstree create.jstree", $.proxy(function (e, data) {
-                        this.sort(data.rslt.obj.parent());
-                    }, this))
-                    .bind("move_node.jstree", $.proxy(function (e, data) {
-                        var m = data.rslt.np == -1 ? this.get_container() : data.rslt.np;
-                        this.sort(m.children("ul"));
-                    }, this));
-            },
-            defaults: function (a, b) {
-                return this.get_text(a) > this.get_text(b) ? 1 : -1;
-            },
-            _fn: {
-                sort: function (obj) {
-                    var s = this._get_settings().sort,
-                        t = this;
-                    obj.append($.makeArray(obj.children("li")).sort($.proxy(s, t)));
-                    obj.find("> li > ul").each(function () {
-                        t.sort($(this));
-                    });
-                    this.clean_node(obj);
-                }
-            }
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree DND plugin
-     * Drag and drop plugin for moving/copying nodes
-     */
-    (function ($) {
-        var o = false,
-            r = false,
-            m = false,
-            ml = false,
-            sli = false,
-            sti = false,
-            dir1 = false,
-            dir2 = false,
-            last_pos = false;
-        $.vakata.dnd = {
-            is_down: false,
-            is_drag: false,
-            helper: false,
-            scroll_spd: 10,
-            init_x: 0,
-            init_y: 0,
-            threshold: 5,
-            helper_left: 5,
-            helper_top: 10,
-            user_data: {},
-
-            drag_start: function (e, data, html) {
-                if ($.vakata.dnd.is_drag) {
-                    $.vakata.drag_stop({});
-                }
-                try {
-                    e.currentTarget.unselectable = "on";
-                    e.currentTarget.onselectstart = function () {
-                        return false;
-                    };
-                    if (e.currentTarget.style) {
-                        e.currentTarget.style.MozUserSelect = "none";
-                    }
-                } catch (err) {
-                }
-                $.vakata.dnd.init_x = e.pageX;
-                $.vakata.dnd.init_y = e.pageY;
-                $.vakata.dnd.user_data = data;
-                $.vakata.dnd.is_down = true;
-                $.vakata.dnd.helper = $("<div id='vakata-dragged' />").html(html); //.fadeTo(10,0.25);
-                $(document).bind("mousemove", $.vakata.dnd.drag);
-                $(document).bind("mouseup", $.vakata.dnd.drag_stop);
-                return false;
-            },
-            drag: function (e) {
-                if (!$.vakata.dnd.is_down) {
-                    return;
-                }
-                if (!$.vakata.dnd.is_drag) {
-                    if (Math.abs(e.pageX - $.vakata.dnd.init_x) > 5 || Math.abs(e.pageY - $.vakata.dnd.init_y) > 5) {
-                        $.vakata.dnd.helper.appendTo("body");
-                        $.vakata.dnd.is_drag = true;
-                        $(document).triggerHandler("drag_start.vakata", {"event": e, "data": $.vakata.dnd.user_data});
-                    }
-                    else {
-                        return;
-                    }
-                }
-
-                // maybe use a scrolling parent element instead of document?
-                if (e.type === "mousemove") { // thought of adding scroll in order to move the helper, but mouse poisition is n/a
-                    var d = $(document), t = d.scrollTop(), l = d.scrollLeft();
-                    if (e.pageY - t < 20) {
-                        if (sti && dir1 === "down") {
-                            clearInterval(sti);
-                            sti = false;
-                        }
-                        if (!sti) {
-                            dir1 = "up";
-                            sti = setInterval(function () {
-                                $(document).scrollTop($(document).scrollTop() - $.vakata.dnd.scroll_spd);
-                            }, 150);
-                        }
-                    }
-                    else {
-                        if (sti && dir1 === "up") {
-                            clearInterval(sti);
-                            sti = false;
-                        }
-                    }
-                    if ($(window).height() - (e.pageY - t) < 20) {
-                        if (sti && dir1 === "up") {
-                            clearInterval(sti);
-                            sti = false;
-                        }
-                        if (!sti) {
-                            dir1 = "down";
-                            sti = setInterval(function () {
-                                $(document).scrollTop($(document).scrollTop() + $.vakata.dnd.scroll_spd);
-                            }, 150);
-                        }
-                    }
-                    else {
-                        if (sti && dir1 === "down") {
-                            clearInterval(sti);
-                            sti = false;
-                        }
-                    }
-
-                    if (e.pageX - l < 20) {
-                        if (sli && dir2 === "right") {
-                            clearInterval(sli);
-                            sli = false;
-                        }
-                        if (!sli) {
-                            dir2 = "left";
-                            sli = setInterval(function () {
-                                $(document).scrollLeft($(document).scrollLeft() - $.vakata.dnd.scroll_spd);
-                            }, 150);
-                        }
-                    }
-                    else {
-                        if (sli && dir2 === "left") {
-                            clearInterval(sli);
-                            sli = false;
-                        }
-                    }
-                    if ($(window).width() - (e.pageX - l) < 20) {
-                        if (sli && dir2 === "left") {
-                            clearInterval(sli);
-                            sli = false;
-                        }
-                        if (!sli) {
-                            dir2 = "right";
-                            sli = setInterval(function () {
-                                $(document).scrollLeft($(document).scrollLeft() + $.vakata.dnd.scroll_spd);
-                            }, 150);
-                        }
-                    }
-                    else {
-                        if (sli && dir2 === "right") {
-                            clearInterval(sli);
-                            sli = false;
-                        }
-                    }
-                }
-
-                $.vakata.dnd.helper.css({
-                    left: (e.pageX + $.vakata.dnd.helper_left) + "px",
-                    top: (e.pageY + $.vakata.dnd.helper_top) + "px"
-                });
-                $(document).triggerHandler("drag.vakata", {"event": e, "data": $.vakata.dnd.user_data});
-            },
-            drag_stop: function (e) {
-                if (sli) {
-                    clearInterval(sli);
-                }
-                if (sti) {
-                    clearInterval(sti);
-                }
-                $(document).unbind("mousemove", $.vakata.dnd.drag);
-                $(document).unbind("mouseup", $.vakata.dnd.drag_stop);
-                $(document).triggerHandler("drag_stop.vakata", {"event": e, "data": $.vakata.dnd.user_data});
-                $.vakata.dnd.helper.remove();
-                $.vakata.dnd.init_x = 0;
-                $.vakata.dnd.init_y = 0;
-                $.vakata.dnd.user_data = {};
-                $.vakata.dnd.is_down = false;
-                $.vakata.dnd.is_drag = false;
-            }
-        };
-        $(function () {
-            var css_string = '#vakata-dragged { display:block; margin:0 0 0 0; padding:4px 4px 4px 24px; position:absolute; top:-2000px; line-height:16px; z-index:10000; } ';
-            $.vakata.css.add_sheet({str: css_string, title: "vakata"});
-        });
-
-        $.jstree.plugin("dnd", {
-            __init: function () {
-                this.data.dnd = {
-                    active: false,
-                    after: false,
-                    inside: false,
-                    before: false,
-                    off: false,
-                    prepared: false,
-                    w: 0,
-                    to1: false,
-                    to2: false,
-                    cof: false,
-                    cw: false,
-                    ch: false,
-                    i1: false,
-                    i2: false,
-                    mto: false
-                };
-                this.get_container()
-                    .bind("mouseenter.jstree", $.proxy(function (e) {
-                        if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
-                            if (this.data.themes) {
-                                m.attr("class", "jstree-" + this.data.themes.theme);
-                                if (ml) {
-                                    ml.attr("class", "jstree-" + this.data.themes.theme);
-                                }
-                                $.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme);
-                            }
-                            //if($(e.currentTarget).find("> ul > li").length === 0) {
-                            if (e.currentTarget === e.target && $.vakata.dnd.user_data.obj && $($.vakata.dnd.user_data.obj).length && $($.vakata.dnd.user_data.obj).parents(".jstree:eq(0)")[0] !== e.target) { // node should not be from the same tree
-                                var tr = $.jstree._reference(e.target), dc;
-                                if (tr.data.dnd.foreign) {
-                                    dc = tr._get_settings().dnd.drag_check.call(this, {
-                                        "o": o,
-                                        "r": tr.get_container(),
-                                        is_root: true
-                                    });
-                                    if (dc === true || dc.inside === true || dc.before === true || dc.after === true) {
-                                        $.vakata.dnd.helper.children("ins").attr("class", "jstree-ok");
-                                    }
-                                }
-                                else {
-                                    tr.prepare_move(o, tr.get_container(), "last");
-                                    if (tr.check_move()) {
-                                        $.vakata.dnd.helper.children("ins").attr("class", "jstree-ok");
-                                    }
-                                }
-                            }
-                        }
-                    }, this))
-                    .bind("mouseup.jstree", $.proxy(function (e) {
-                        //if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && $(e.currentTarget).find("> ul > li").length === 0) {
-                        if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && e.currentTarget === e.target && $.vakata.dnd.user_data.obj && $($.vakata.dnd.user_data.obj).length && $($.vakata.dnd.user_data.obj).parents(".jstree:eq(0)")[0] !== e.target) { // node should not be from the same tree
-                            var tr = $.jstree._reference(e.currentTarget), dc;
-                            if (tr.data.dnd.foreign) {
-                                dc = tr._get_settings().dnd.drag_check.call(this, {
-                                    "o": o,
-                                    "r": tr.get_container(),
-                                    is_root: true
-                                });
-                                if (dc === true || dc.inside === true || dc.before === true || dc.after === true) {
-                                    tr._get_settings().dnd.drag_finish.call(this, {
-                                        "o": o,
-                                        "r": tr.get_container(),
-                                        is_root: true
-                                    });
-                                }
-                            }
-                            else {
-                                tr.move_node(o, tr.get_container(), "last", e[tr._get_settings().dnd.copy_modifier + "Key"]);
-                            }
-                        }
-                    }, this))
-                    .bind("mouseleave.jstree", $.proxy(function (e) {
-                        if (e.relatedTarget && e.relatedTarget.id && e.relatedTarget.id === "jstree-marker-line") {
-                            return false;
-                        }
-                        if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
-                            if (this.data.dnd.i1) {
-                                clearInterval(this.data.dnd.i1);
-                            }
-                            if (this.data.dnd.i2) {
-                                clearInterval(this.data.dnd.i2);
-                            }
-                            if (this.data.dnd.to1) {
-                                clearTimeout(this.data.dnd.to1);
-                            }
-                            if (this.data.dnd.to2) {
-                                clearTimeout(this.data.dnd.to2);
-                            }
-                            if ($.vakata.dnd.helper.children("ins").hasClass("jstree-ok")) {
-                                $.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
-                            }
-                        }
-                    }, this))
-                    .bind("mousemove.jstree", $.proxy(function (e) {
-                        if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
-                            var cnt = this.get_container()[0];
-
-                            // Horizontal scroll
-                            if (e.pageX + 24 > this.data.dnd.cof.left + this.data.dnd.cw) {
-                                if (this.data.dnd.i1) {
-                                    clearInterval(this.data.dnd.i1);
-                                }
-                                this.data.dnd.i1 = setInterval($.proxy(function () {
-                                    this.scrollLeft += $.vakata.dnd.scroll_spd;
-                                }, cnt), 100);
-                            }
-                            else if (e.pageX - 24 < this.data.dnd.cof.left) {
-                                if (this.data.dnd.i1) {
-                                    clearInterval(this.data.dnd.i1);
-                                }
-                                this.data.dnd.i1 = setInterval($.proxy(function () {
-                                    this.scrollLeft -= $.vakata.dnd.scroll_spd;
-                                }, cnt), 100);
-                            }
-                            else {
-                                if (this.data.dnd.i1) {
-                                    clearInterval(this.data.dnd.i1);
-                                }
-                            }
-
-                            // Vertical scroll
-                            if (e.pageY + 24 > this.data.dnd.cof.top + this.data.dnd.ch) {
-                                if (this.data.dnd.i2) {
-                                    clearInterval(this.data.dnd.i2);
-                                }
-                                this.data.dnd.i2 = setInterval($.proxy(function () {
-                                    this.scrollTop += $.vakata.dnd.scroll_spd;
-                                }, cnt), 100);
-                            }
-                            else if (e.pageY - 24 < this.data.dnd.cof.top) {
-                                if (this.data.dnd.i2) {
-                                    clearInterval(this.data.dnd.i2);
-                                }
-                                this.data.dnd.i2 = setInterval($.proxy(function () {
-                                    this.scrollTop -= $.vakata.dnd.scroll_spd;
-                                }, cnt), 100);
-                            }
-                            else {
-                                if (this.data.dnd.i2) {
-                                    clearInterval(this.data.dnd.i2);
-                                }
-                            }
-
-                        }
-                    }, this))
-                    .bind("scroll.jstree", $.proxy(function (e) {
-                        if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && m && ml) {
-                            m.hide();
-                            ml.hide();
-                        }
-                    }, this))
-                    .delegate("a", "mousedown.jstree", $.proxy(function (e) {
-                        if (e.which === 1) {
-                            this.start_drag(e.currentTarget, e);
-                            return false;
-                        }
-                    }, this))
-                    .delegate("a", "mouseenter.jstree", $.proxy(function (e) {
-                        if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
-                            this.dnd_enter(e.currentTarget);
-                        }
-                    }, this))
-                    .delegate("a", "mousemove.jstree", $.proxy(function (e) {
-                        if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
-                            if (!r || !r.length || r.children("a")[0] !== e.currentTarget) {
-                                this.dnd_enter(e.currentTarget);
-                            }
-                            if (typeof this.data.dnd.off.top === "undefined") {
-                                this.data.dnd.off = $(e.target).offset();
-                            }
-                            this.data.dnd.w = (e.pageY - (this.data.dnd.off.top || 0)) % this.data.core.li_height;
-                            if (this.data.dnd.w < 0) {
-                                this.data.dnd.w += this.data.core.li_height;
-                            }
-                            this.dnd_show();
-                        }
-                    }, this))
-                    .delegate("a", "mouseleave.jstree", $.proxy(function (e) {
-                        if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
-                            if (e.relatedTarget && e.relatedTarget.id && e.relatedTarget.id === "jstree-marker-line") {
-                                return false;
-                            }
-                            if (m) {
-                                m.hide();
-                            }
-                            if (ml) {
-                                ml.hide();
-                            }
-                            /*
-                             var ec = $(e.currentTarget).closest("li"),
-                             er = $(e.relatedTarget).closest("li");
-                             if(er[0] !== ec.prev()[0] && er[0] !== ec.next()[0]) {
-                             if(m) { m.hide(); }
-                             if(ml) { ml.hide(); }
-                             }
-                             */
-                            this.data.dnd.mto = setTimeout(
-                                (function (t) {
-                                    return function () {
-                                        t.dnd_leave(e);
-                                    };
-                                })(this),
-                                0);
-                        }
-                    }, this))
-                    .delegate("a", "mouseup.jstree", $.proxy(function (e) {
-                        if ($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree) {
-                            this.dnd_finish(e);
-                        }
-                    }, this));
-
-                $(document)
-                    .bind("drag_stop.vakata", $.proxy(function () {
-                        if (this.data.dnd.to1) {
-                            clearTimeout(this.data.dnd.to1);
-                        }
-                        if (this.data.dnd.to2) {
-                            clearTimeout(this.data.dnd.to2);
-                        }
-                        if (this.data.dnd.i1) {
-                            clearInterval(this.data.dnd.i1);
-                        }
-                        if (this.data.dnd.i2) {
-                            clearInterval(this.data.dnd.i2);
-                        }
-                        this.data.dnd.after = false;
-                        this.data.dnd.before = false;
-                        this.data.dnd.inside = false;
-                        this.data.dnd.off = false;
-                        this.data.dnd.prepared = false;
-                        this.data.dnd.w = false;
-                        this.data.dnd.to1 = false;
-                        this.data.dnd.to2 = false;
-                        this.data.dnd.i1 = false;
-                        this.data.dnd.i2 = false;
-                        this.data.dnd.active = false;
-                        this.data.dnd.foreign = false;
-                        if (m) {
-                            m.css({"top": "-2000px"});
-                        }
-                        if (ml) {
-                            ml.css({"top": "-2000px"});
-                        }
-                    }, this))
-                    .bind("drag_start.vakata", $.proxy(function (e, data) {
-                        if (data.data.jstree) {
-                            var et = $(data.event.target);
-                            if (et.closest(".jstree").hasClass("jstree-" + this.get_index())) {
-                                this.dnd_enter(et);
-                            }
-                        }
-                    }, this));
-                /*
-                 .bind("keydown.jstree-" + this.get_index() + " keyup.jstree-" + this.get_index(), $.proxy(function(e) {
-                 if($.vakata.dnd.is_drag && $.vakata.dnd.user_data.jstree && !this.data.dnd.foreign) {
-                 var h = $.vakata.dnd.helper.children("ins");
-                 if(e[this._get_settings().dnd.copy_modifier + "Key"] && h.hasClass("jstree-ok")) {
-                 h.parent().html(h.parent().html().replace(/ \(Copy\)$/, "") + " (Copy)");
-                 }
-                 else {
-                 h.parent().html(h.parent().html().replace(/ \(Copy\)$/, ""));
-                 }
-                 }
-                 }, this)); */
-
-
-                var s = this._get_settings().dnd;
-                if (s.drag_target) {
-                    $(document)
-                        .delegate(s.drag_target, "mousedown.jstree-" + this.get_index(), $.proxy(function (e) {
-                            o = e.target;
-                            $.vakata.dnd.drag_start(e, {
-                                jstree: true,
-                                obj: e.target
-                            }, "<ins class='jstree-icon'></ins>" + $(e.target).text());
-                            if (this.data.themes) {
-                                if (m) {
-                                    m.attr("class", "jstree-" + this.data.themes.theme);
-                                }
-                                if (ml) {
-                                    ml.attr("class", "jstree-" + this.data.themes.theme);
-                                }
-                                $.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme);
-                            }
-                            $.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
-                            var cnt = this.get_container();
-                            this.data.dnd.cof = cnt.offset();
-                            this.data.dnd.cw = parseInt(cnt.width(), 10);
-                            this.data.dnd.ch = parseInt(cnt.height(), 10);
-                            this.data.dnd.foreign = true;
-                            e.preventDefault();
-                        }, this));
-                }
-                if (s.drop_target) {
-                    $(document)
-                        .delegate(s.drop_target, "mouseenter.jstree-" + this.get_index(), $.proxy(function (e) {
-                            if (this.data.dnd.active && this._get_settings().dnd.drop_check.call(this, {
-                                    "o": o,
-                                    "r": $(e.target),
-                                    "e": e
-                                })) {
-                                $.vakata.dnd.helper.children("ins").attr("class", "jstree-ok");
-                            }
-                        }, this))
-                        .delegate(s.drop_target, "mouseleave.jstree-" + this.get_index(), $.proxy(function (e) {
-                            if (this.data.dnd.active) {
-                                $.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
-                            }
-                        }, this))
-                        .delegate(s.drop_target, "mouseup.jstree-" + this.get_index(), $.proxy(function (e) {
-                            if (this.data.dnd.active && $.vakata.dnd.helper.children("ins").hasClass("jstree-ok")) {
-                                this._get_settings().dnd.drop_finish.call(this, {"o": o, "r": $(e.target), "e": e});
-                            }
-                        }, this));
-                }
-            },
-            defaults: {
-                copy_modifier: "ctrl",
-                check_timeout: 100,
-                open_timeout: 500,
-                drop_target: ".jstree-drop",
-                drop_check: function (data) {
-                    return true;
-                },
-                drop_finish: $.noop,
-                drag_target: ".jstree-draggable",
-                drag_finish: $.noop,
-                drag_check: function (data) {
-                    return {after: false, before: false, inside: true};
-                }
-            },
-            _fn: {
-                dnd_prepare: function () {
-                    if (!r || !r.length) {
-                        return;
-                    }
-                    this.data.dnd.off = r.offset();
-                    if (this._get_settings().core.rtl) {
-                        this.data.dnd.off.right = this.data.dnd.off.left + r.width();
-                    }
-                    if (this.data.dnd.foreign) {
-                        var a = this._get_settings().dnd.drag_check.call(this, {"o": o, "r": r});
-                        this.data.dnd.after = a.after;
-                        this.data.dnd.before = a.before;
-                        this.data.dnd.inside = a.inside;
-                        this.data.dnd.prepared = true;
-                        return this.dnd_show();
-                    }
-                    this.prepare_move(o, r, "before");
-                    this.data.dnd.before = this.check_move();
-                    this.prepare_move(o, r, "after");
-                    this.data.dnd.after = this.check_move();
-                    if (this._is_loaded(r)) {
-                        this.prepare_move(o, r, "inside");
-                        this.data.dnd.inside = this.check_move();
-                    }
-                    else {
-                        this.data.dnd.inside = false;
-                    }
-                    this.data.dnd.prepared = true;
-                    return this.dnd_show();
-                },
-                dnd_show: function () {
-                    if (!this.data.dnd.prepared) {
-                        return;
-                    }
-                    var o = ["before", "inside", "after"],
-                        r = false,
-                        rtl = this._get_settings().core.rtl,
-                        pos;
-                    if (this.data.dnd.w < this.data.core.li_height / 3) {
-                        o = ["before", "inside", "after"];
-                    }
-                    else if (this.data.dnd.w <= this.data.core.li_height * 2 / 3) {
-                        o = this.data.dnd.w < this.data.core.li_height / 2 ? ["inside", "before", "after"] : ["inside", "after", "before"];
-                    }
-                    else {
-                        o = ["after", "inside", "before"];
-                    }
-                    $.each(o, $.proxy(function (i, val) {
-                        if (this.data.dnd[val]) {
-                            $.vakata.dnd.helper.children("ins").attr("class", "jstree-ok");
-                            r = val;
-                            return false;
-                        }
-                    }, this));
-                    if (r === false) {
-                        $.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
-                    }
-
-                    pos = rtl ? (this.data.dnd.off.right - 18) : (this.data.dnd.off.left + 10);
-                    switch (r) {
-                        case "before":
-                            m.css({"left": pos + "px", "top": (this.data.dnd.off.top - 6) + "px"}).show();
-                            if (ml) {
-                                ml.css({"left": (pos + 8) + "px", "top": (this.data.dnd.off.top - 1) + "px"}).show();
-                            }
-                            break;
-                        case "after":
-                            m.css({
-                                "left": pos + "px",
-                                "top": (this.data.dnd.off.top + this.data.core.li_height - 6) + "px"
-                            }).show();
-                            if (ml) {
-                                ml.css({
-                                    "left": (pos + 8) + "px",
-                                    "top": (this.data.dnd.off.top + this.data.core.li_height - 1) + "px"
-                                }).show();
-                            }
-                            break;
-                        case "inside":
-                            m.css({
-                                "left": pos + ( rtl ? -4 : 4) + "px",
-                                "top": (this.data.dnd.off.top + this.data.core.li_height / 2 - 5) + "px"
-                            }).show();
-                            if (ml) {
-                                ml.hide();
-                            }
-                            break;
-                        default:
-                            m.hide();
-                            if (ml) {
-                                ml.hide();
-                            }
-                            break;
-                    }
-                    last_pos = r;
-                    return r;
-                },
-                dnd_open: function () {
-                    this.data.dnd.to2 = false;
-                    this.open_node(r, $.proxy(this.dnd_prepare, this), true);
-                },
-                dnd_finish: function (e) {
-                    if (this.data.dnd.foreign) {
-                        if (this.data.dnd.after || this.data.dnd.before || this.data.dnd.inside) {
-                            this._get_settings().dnd.drag_finish.call(this, {"o": o, "r": r, "p": last_pos});
-                        }
-                    }
-                    else {
-                        this.dnd_prepare();
-                        this.move_node(o, r, last_pos, e[this._get_settings().dnd.copy_modifier + "Key"]);
-                    }
-                    o = false;
-                    r = false;
-                    m.hide();
-                    if (ml) {
-                        ml.hide();
-                    }
-                },
-                dnd_enter: function (obj) {
-                    if (this.data.dnd.mto) {
-                        clearTimeout(this.data.dnd.mto);
-                        this.data.dnd.mto = false;
-                    }
-                    var s = this._get_settings().dnd;
-                    this.data.dnd.prepared = false;
-                    r = this._get_node(obj);
-                    if (s.check_timeout) {
-                        // do the calculations after a minimal timeout (users tend to drag quickly to the desired location)
-                        if (this.data.dnd.to1) {
-                            clearTimeout(this.data.dnd.to1);
-                        }
-                        this.data.dnd.to1 = setTimeout($.proxy(this.dnd_prepare, this), s.check_timeout);
-                    }
-                    else {
-                        this.dnd_prepare();
-                    }
-                    if (s.open_timeout) {
-                        if (this.data.dnd.to2) {
-                            clearTimeout(this.data.dnd.to2);
-                        }
-                        if (r && r.length && r.hasClass("jstree-closed")) {
-                            // if the node is closed - open it, then recalculate
-                            this.data.dnd.to2 = setTimeout($.proxy(this.dnd_open, this), s.open_timeout);
-                        }
-                    }
-                    else {
-                        if (r && r.length && r.hasClass("jstree-closed")) {
-                            this.dnd_open();
-                        }
-                    }
-                },
-                dnd_leave: function (e) {
-                    this.data.dnd.after = false;
-                    this.data.dnd.before = false;
-                    this.data.dnd.inside = false;
-                    $.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
-                    m.hide();
-                    if (ml) {
-                        ml.hide();
-                    }
-                    if (r && r[0] === e.target.parentNode) {
-                        if (this.data.dnd.to1) {
-                            clearTimeout(this.data.dnd.to1);
-                            this.data.dnd.to1 = false;
-                        }
-                        if (this.data.dnd.to2) {
-                            clearTimeout(this.data.dnd.to2);
-                            this.data.dnd.to2 = false;
-                        }
-                    }
-                },
-                start_drag: function (obj, e) {
-                    o = this._get_node(obj);
-                    if (this.data.ui && this.is_selected(o)) {
-                        o = this._get_node(null, true);
-                    }
-                    var dt = o.length > 1 ? this._get_string("multiple_selection") : this.get_text(o),
-                        cnt = this.get_container();
-                    if (!this._get_settings().core.html_titles) {
-                        dt = dt.replace(/</ig, "&lt;").replace(/>/ig, "&gt;");
-                    }
-                    $.vakata.dnd.drag_start(e, {jstree: true, obj: o}, "<ins class='jstree-icon'></ins>" + dt);
-                    if (this.data.themes) {
-                        if (m) {
-                            m.attr("class", "jstree-" + this.data.themes.theme);
-                        }
-                        if (ml) {
-                            ml.attr("class", "jstree-" + this.data.themes.theme);
-                        }
-                        $.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme);
-                    }
-                    this.data.dnd.cof = cnt.offset();
-                    this.data.dnd.cw = parseInt(cnt.width(), 10);
-                    this.data.dnd.ch = parseInt(cnt.height(), 10);
-                    this.data.dnd.active = true;
-                }
-            }
-        });
-        $(function () {
-            var css_string = '' +
-                '#vakata-dragged ins { display:block; text-decoration:none; width:16px; height:16px; margin:0 0 0 0; padding:0; position:absolute; top:4px; left:4px; ' +
-                ' -moz-border-radius:4px; border-radius:4px; -webkit-border-radius:4px; ' +
-                '} ' +
-                '#vakata-dragged .jstree-ok { background:green; } ' +
-                '#vakata-dragged .jstree-invalid { background:red; } ' +
-                '#jstree-marker { padding:0; margin:0; font-size:12px; overflow:hidden; height:12px; width:8px; position:absolute; top:-30px; z-index:10001; background-repeat:no-repeat; display:none; background-color:transparent; text-shadow:1px 1px 1px white; color:black; line-height:10px; } ' +
-                '#jstree-marker-line { padding:0; margin:0; line-height:0%; font-size:1px; overflow:hidden; height:1px; width:100px; position:absolute; top:-30px; z-index:10000; background-repeat:no-repeat; display:none; background-color:#456c43; ' +
-                ' cursor:pointer; border:1px solid #eeeeee; border-left:0; -moz-box-shadow: 0px 0px 2px #666; -webkit-box-shadow: 0px 0px 2px #666; box-shadow: 0px 0px 2px #666; ' +
-                ' -moz-border-radius:1px; border-radius:1px; -webkit-border-radius:1px; ' +
-                '}' +
-                '';
-            $.vakata.css.add_sheet({str: css_string, title: "jstree"});
-            m = $("<div />").attr({id: "jstree-marker"}).hide().html("&raquo;")
-                .bind("mouseleave mouseenter", function (e) {
-                    m.hide();
-                    ml.hide();
-                    e.preventDefault();
-                    e.stopImmediatePropagation();
-                    return false;
-                })
-                .appendTo("body");
-            ml = $("<div />").attr({id: "jstree-marker-line"}).hide()
-                .bind("mouseup", function (e) {
-                    if (r && r.length) {
-                        r.children("a").trigger(e);
-                        e.preventDefault();
-                        e.stopImmediatePropagation();
-                        return false;
-                    }
-                })
-                .bind("mouseleave", function (e) {
-                    var rt = $(e.relatedTarget);
-                    if (rt.is(".jstree") || rt.closest(".jstree").length === 0) {
-                        if (r && r.length) {
-                            r.children("a").trigger(e);
-                            m.hide();
-                            ml.hide();
-                            e.preventDefault();
-                            e.stopImmediatePropagation();
-                            return false;
-                        }
-                    }
-                })
-                .appendTo("body");
-            $(document).bind("drag_start.vakata", function (e, data) {
-                if (data.data.jstree) {
-                    m.show();
-                    if (ml) {
-                        ml.show();
-                    }
-                }
-            });
-            $(document).bind("drag_stop.vakata", function (e, data) {
-                if (data.data.jstree) {
-                    m.hide();
-                    if (ml) {
-                        ml.hide();
-                    }
-                }
-            });
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree checkbox plugin
-     * Inserts checkboxes in front of every node
-     * Depends on the ui plugin
-     * DOES NOT WORK NICELY WITH MULTITREE DRAG'N'DROP
-     */
-    (function ($) {
-        $.jstree.plugin("checkbox", {
-            __init: function () {
-                this.data.checkbox.noui = this._get_settings().checkbox.override_ui;
-                if (this.data.ui && this.data.checkbox.noui) {
-                    this.select_node = this.deselect_node = this.deselect_all = $.noop;
-                    this.get_selected = this.get_checked;
-                }
-
-                this.get_container()
-                    .bind("open_node.jstree create_node.jstree clean_node.jstree refresh.jstree", $.proxy(function (e, data) {
-                        this._prepare_checkboxes(data.rslt.obj);
-                    }, this))
-                    .bind("loaded.jstree", $.proxy(function (e) {
-                        this._prepare_checkboxes();
-                    }, this))
-                    .delegate((this.data.ui && this.data.checkbox.noui ? "a" : "ins.jstree-checkbox"), "click.jstree", $.proxy(function (e) {
-                        e.preventDefault();
-                        if (this._get_node(e.target).hasClass("jstree-checked")) {
-                            this.uncheck_node(e.target);
-                        }
-                        else {
-                            this.check_node(e.target);
-                        }
-                        if (this.data.ui && this.data.checkbox.noui) {
-                            this.save_selected();
-                            if (this.data.cookies) {
-                                this.save_cookie("select_node");
-                            }
-                        }
-                        else {
-                            e.stopImmediatePropagation();
-                            return false;
-                        }
-                    }, this));
-            },
-            defaults: {
-                override_ui: false,
-                two_state: false,
-                real_checkboxes: false,
-                checked_parent_open: true,
-                real_checkboxes_names: function (n) {
-                    return [("check_" + (n[0].id || Math.ceil(Math.random() * 10000))), 1];
-                }
-            },
-            __destroy: function () {
-                this.get_container()
-                    .find("input.jstree-real-checkbox").removeClass("jstree-real-checkbox").end()
-                    .find("ins.jstree-checkbox").remove();
-            },
-            _fn: {
-                _checkbox_notify: function (n, data) {
-                    if (data.checked) {
-                        this.check_node(n, false);
-                    }
-                },
-                _prepare_checkboxes: function (obj) {
-                    obj = !obj || obj == -1 ? this.get_container().find("> ul > li") : this._get_node(obj);
-                    if (obj === false) {
-                        return;
-                    } // added for removing root nodes
-                    var c, _this = this, t, ts = this._get_settings().checkbox.two_state,
-                        rc = this._get_settings().checkbox.real_checkboxes,
-                        rcn = this._get_settings().checkbox.real_checkboxes_names;
-                    obj.each(function () {
-                        t = $(this);
-                        c = t.is("li") && (t.hasClass("jstree-checked") || (rc && t.children(":checked").length)) ? "jstree-checked" : "jstree-unchecked";
-                        t.find("li").andSelf().each(function () {
-                            var $t = $(this), nm;
-                            $t.children("a" + (_this.data.languages ? "" : ":eq(0)")).not(":has(.jstree-checkbox)").prepend("<ins class='jstree-checkbox'>&#160;</ins>").parent().not(".jstree-checked, .jstree-unchecked").addClass(ts ? "jstree-unchecked" : c);
-                            if (rc) {
-                                if (!$t.children(":checkbox").length) {
-                                    nm = rcn.call(_this, $t);
-                                    $t.prepend("<input type='checkbox' class='jstree-real-checkbox' id='" + nm[0] + "' name='" + nm[0] + "' value='" + nm[1] + "' />");
-                                }
-                                else {
-                                    $t.children(":checkbox").addClass("jstree-real-checkbox");
-                                }
-                            }
-                            if (!ts) {
-                                if (c === "jstree-checked" || $t.hasClass("jstree-checked") || $t.children(':checked').length) {
-                                    $t.find("li").andSelf().addClass("jstree-checked").children(":checkbox").prop("checked", true);
-                                }
-                            }
-                            else {
-                                if ($t.hasClass("jstree-checked") || $t.children(':checked').length) {
-                                    $t.addClass("jstree-checked").children(":checkbox").prop("checked", true);
-                                }
-                            }
-                        });
-                    });
-                    if (!ts) {
-                        obj.find(".jstree-checked").parent().parent().each(function () {
-                            _this._repair_state(this);
-                        });
-                    }
-                },
-                change_state: function (obj, state) {
-                    obj = this._get_node(obj);
-                    var coll = false, rc = this._get_settings().checkbox.real_checkboxes;
-                    if (!obj || obj === -1) {
-                        return false;
-                    }
-                    state = (state === false || state === true) ? state : obj.hasClass("jstree-checked");
-                    if (this._get_settings().checkbox.two_state) {
-                        if (state) {
-                            obj.removeClass("jstree-checked").addClass("jstree-unchecked");
-                            if (rc) {
-                                obj.children(":checkbox").prop("checked", false);
-                            }
-                        }
-                        else {
-                            obj.removeClass("jstree-unchecked").addClass("jstree-checked");
-                            if (rc) {
-                                obj.children(":checkbox").prop("checked", true);
-                            }
-                        }
-                    }
-                    else {
-                        if (state) {
-                            coll = obj.find("li").andSelf();
-                            if (!coll.filter(".jstree-checked, .jstree-undetermined").length) {
-                                return false;
-                            }
-                            coll.removeClass("jstree-checked jstree-undetermined").addClass("jstree-unchecked");
-                            if (rc) {
-                                coll.children(":checkbox").prop("checked", false);
-                            }
-                        }
-                        else {
-                            coll = obj.find("li").andSelf();
-                            if (!coll.filter(".jstree-unchecked, .jstree-undetermined").length) {
-                                return false;
-                            }
-                            coll.removeClass("jstree-unchecked jstree-undetermined").addClass("jstree-checked");
-                            if (rc) {
-                                coll.children(":checkbox").prop("checked", true);
-                            }
-                            if (this.data.ui) {
-                                this.data.ui.last_selected = obj;
-                            }
-                            this.data.checkbox.last_selected = obj;
-                        }
-                        obj.parentsUntil(".jstree", "li").each(function () {
-                            var $this = $(this);
-                            if (state) {
-                                if ($this.children("ul").children("li.jstree-checked, li.jstree-undetermined").length) {
-                                    $this.parentsUntil(".jstree", "li").andSelf().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined");
-                                    if (rc) {
-                                        $this.parentsUntil(".jstree", "li").andSelf().children(":checkbox").prop("checked", false);
-                                    }
-                                    return false;
-                                }
-                                else {
-                                    $this.removeClass("jstree-checked jstree-undetermined").addClass("jstree-unchecked");
-                                    if (rc) {
-                                        $this.children(":checkbox").prop("checked", false);
-                                    }
-                                }
-                            }
-                            else {
-                                if ($this.children("ul").children("li.jstree-unchecked, li.jstree-undetermined").length) {
-                                    $this.parentsUntil(".jstree", "li").andSelf().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined");
-                                    if (rc) {
-                                        $this.parentsUntil(".jstree", "li").andSelf().children(":checkbox").prop("checked", false);
-                                    }
-                                    return false;
-                                }
-                                else {
-                                    $this.removeClass("jstree-unchecked jstree-undetermined").addClass("jstree-checked");
-                                    if (rc) {
-                                        $this.children(":checkbox").prop("checked", true);
-                                    }
-                                }
-                            }
-                        });
-                    }
-                    if (this.data.ui && this.data.checkbox.noui) {
-                        this.data.ui.selected = this.get_checked();
-                    }
-                    this.__callback(obj);
-                    return true;
-                },
-                check_node: function (obj) {
-                    if (this.change_state(obj, false)) {
-                        obj = this._get_node(obj);
-                        if (this._get_settings().checkbox.checked_parent_open) {
-                            var t = this;
-                            obj.parents(".jstree-closed").each(function () {
-                                t.open_node(this, false, true);
-                            });
-                        }
-                        this.__callback({"obj": obj});
-                    }
-                },
-                uncheck_node: function (obj) {
-                    if (this.change_state(obj, true)) {
-                        this.__callback({"obj": this._get_node(obj)});
-                    }
-                },
-                check_all: function () {
-                    var _this = this,
-                        coll = this._get_settings().checkbox.two_state ? this.get_container_ul().find("li") : this.get_container_ul().children("li");
-                    coll.each(function () {
-                        _this.change_state(this, false);
-                    });
-                    this.__callback();
-                },
-                uncheck_all: function () {
-                    var _this = this,
-                        coll = this._get_settings().checkbox.two_state ? this.get_container_ul().find("li") : this.get_container_ul().children("li");
-                    coll.each(function () {
-                        _this.change_state(this, true);
-                    });
-                    this.__callback();
-                },
-
-                is_checked: function (obj) {
-                    obj = this._get_node(obj);
-                    return obj.length ? obj.is(".jstree-checked") : false;
-                },
-                get_checked: function (obj, get_all) {
-                    obj = !obj || obj === -1 ? this.get_container() : this._get_node(obj);
-                    return get_all || this._get_settings().checkbox.two_state ? obj.find(".jstree-checked") : obj.find("> ul > .jstree-checked, .jstree-undetermined > ul > .jstree-checked");
-                },
-                get_unchecked: function (obj, get_all) {
-                    obj = !obj || obj === -1 ? this.get_container() : this._get_node(obj);
-                    return get_all || this._get_settings().checkbox.two_state ? obj.find(".jstree-unchecked") : obj.find("> ul > .jstree-unchecked, .jstree-undetermined > ul > .jstree-unchecked");
-                },
-
-                show_checkboxes: function () {
-                    this.get_container().children("ul").removeClass("jstree-no-checkboxes");
-                },
-                hide_checkboxes: function () {
-                    this.get_container().children("ul").addClass("jstree-no-checkboxes");
-                },
-
-                _repair_state: function (obj) {
-                    obj = this._get_node(obj);
-                    if (!obj.length) {
-                        return;
-                    }
-                    if (this._get_settings().checkbox.two_state) {
-                        obj.find('li').andSelf().not('.jstree-checked').removeClass('jstree-undetermined').addClass('jstree-unchecked').children(':checkbox').prop('checked', true);
-                        return;
-                    }
-                    var rc = this._get_settings().checkbox.real_checkboxes,
-                        a = obj.find("> ul > .jstree-checked").length,
-                        b = obj.find("> ul > .jstree-undetermined").length,
-                        c = obj.find("> ul > li").length;
-                    if (c === 0) {
-                        if (obj.hasClass("jstree-undetermined")) {
-                            this.change_state(obj, false);
-                        }
-                    }
-                    else if (a === 0 && b === 0) {
-                        this.change_state(obj, true);
-                    }
-                    else if (a === c) {
-                        this.change_state(obj, false);
-                    }
-                    else {
-                        obj.parentsUntil(".jstree", "li").andSelf().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined");
-                        if (rc) {
-                            obj.parentsUntil(".jstree", "li").andSelf().children(":checkbox").prop("checked", false);
-                        }
-                    }
-                },
-                reselect: function () {
-                    if (this.data.ui && this.data.checkbox.noui) {
-                        var _this = this,
-                            s = this.data.ui.to_select;
-                        s = $.map($.makeArray(s), function (n) {
-                            return "#" + n.toString().replace(/^#/, "").replace(/\\\//g, "/").replace(/\//g, "\\\/").replace(/\\\./g, ".").replace(/\./g, "\\.").replace(/\:/g, "\\:");
-                        });
-                        this.deselect_all();
-                        $.each(s, function (i, val) {
-                            _this.check_node(val);
-                        });
-                        this.__callback();
-                    }
-                    else {
-                        this.__call_old();
-                    }
-                },
-                save_loaded: function () {
-                    var _this = this;
-                    this.data.core.to_load = [];
-                    this.get_container_ul().find("li.jstree-closed.jstree-undetermined").each(function () {
-                        if (this.id) {
-                            _this.data.core.to_load.push("#" + this.id);
-                        }
-                    });
-                }
-            }
-        });
-        $(function () {
-            var css_string = '.jstree .jstree-real-checkbox { display:none; } ';
-            $.vakata.css.add_sheet({str: css_string, title: "jstree"});
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree XML plugin
-     * The XML data store. Datastores are build by overriding the `load_node` and `_is_loaded` functions.
-     */
-    (function ($) {
-        $.vakata.xslt = function (xml, xsl, callback) {
-            var rs = "", xm, xs, processor, support;
-            // TODO: IE9 no XSLTProcessor, no document.recalc
-            if (document.recalc) {
-                xm = document.createElement('xml');
-                xs = document.createElement('xml');
-                xm.innerHTML = xml;
-                xs.innerHTML = xsl;
-                $("body").append(xm).append(xs);
-                setTimeout((function (xm, xs, callback) {
-                    return function () {
-                        callback.call(null, xm.transformNode(xs.XMLDocument));
-                        setTimeout((function (xm, xs) {
-                            return function () {
-                                $(xm).remove();
-                                $(xs).remove();
-                            };
-                        })(xm, xs), 200);
-                    };
-                })(xm, xs, callback), 100);
-                return true;
-            }
-            if (typeof window.DOMParser !== "undefined" && typeof window.XMLHttpRequest !== "undefined" && typeof window.XSLTProcessor === "undefined") {
-                xml = new DOMParser().parseFromString(xml, "text/xml");
-                xsl = new DOMParser().parseFromString(xsl, "text/xml");
-                // alert(xml.transformNode());
-                // callback.call(null, new XMLSerializer().serializeToString(rs));
-
-            }
-            if (typeof window.DOMParser !== "undefined" && typeof window.XMLHttpRequest !== "undefined" && typeof window.XSLTProcessor !== "undefined") {
-                processor = new XSLTProcessor();
-                support = $.isFunction(processor.transformDocument) ? (typeof window.XMLSerializer !== "undefined") : true;
-                if (!support) {
-                    return false;
-                }
-                xml = new DOMParser().parseFromString(xml, "text/xml");
-                xsl = new DOMParser().parseFromString(xsl, "text/xml");
-                if ($.isFunction(processor.transformDocument)) {
-                    rs = document.implementation.createDocument("", "", null);
-                    processor.transformDocument(xml, xsl, rs, null);
-                    callback.call(null, new XMLSerializer().serializeToString(rs));
-                    return true;
-                }
-                else {
-                    processor.importStylesheet(xsl);
-                    rs = processor.transformToFragment(xml, document);
-                    callback.call(null, $("<div />").append(rs).html());
-                    return true;
-                }
-            }
-            return false;
-        };
-        var xsl = {
-                'nest': '<' + '?xml version="1.0" encoding="utf-8" ?>' +
-                '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >' +
-                '<xsl:output method="html" encoding="utf-8" omit-xml-declaration="yes" standalone="no" indent="no" media-type="text/html" />' +
-                '<xsl:template match="/">' +
-                '	<xsl:call-template name="nodes">' +
-                '		<xsl:with-param name="node" select="/root" />' +
-                '	</xsl:call-template>' +
-                '</xsl:template>' +
-                '<xsl:template name="nodes">' +
-                '	<xsl:param name="node" />' +
-                '	<ul>' +
-                '	<xsl:for-each select="$node/item">' +
-                '		<xsl:variable name="children" select="count(./item) &gt; 0" />' +
-                '		<li>' +
-                '			<xsl:attribute name="class">' +
-                '				<xsl:if test="position() = last()">jstree-last </xsl:if>' +
-                '				<xsl:choose>' +
-                '					<xsl:when test="@state = \'open\'">jstree-open </xsl:when>' +
-                '					<xsl:when test="$children or @hasChildren or @state = \'closed\'">jstree-closed </xsl:when>' +
-                '					<xsl:otherwise>jstree-leaf </xsl:otherwise>' +
-                '				</xsl:choose>' +
-                '				<xsl:value-of select="@class" />' +
-                '			</xsl:attribute>' +
-                '			<xsl:for-each select="@*">' +
-                '				<xsl:if test="name() != \'class\' and name() != \'state\' and name() != \'hasChildren\'">' +
-                '					<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' +
-                '				</xsl:if>' +
-                '			</xsl:for-each>' +
-                '	<ins class="jstree-icon"><xsl:text>&#xa0;</xsl:text></ins>' +
-                '			<xsl:for-each select="content/name">' +
-                '				<a>' +
-                '				<xsl:attribute name="href">' +
-                '					<xsl:choose>' +
-                '					<xsl:when test="@href"><xsl:value-of select="@href" /></xsl:when>' +
-                '					<xsl:otherwise>#</xsl:otherwise>' +
-                '					</xsl:choose>' +
-                '				</xsl:attribute>' +
-                '				<xsl:attribute name="class"><xsl:value-of select="@lang" /> <xsl:value-of select="@class" /></xsl:attribute>' +
-                '				<xsl:attribute name="style"><xsl:value-of select="@style" /></xsl:attribute>' +
-                '				<xsl:for-each select="@*">' +
-                '					<xsl:if test="name() != \'style\' and name() != \'class\' and name() != \'href\'">' +
-                '						<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' +
-                '					</xsl:if>' +
-                '				</xsl:for-each>' +
-                '					<ins>' +
-                '						<xsl:attribute name="class">jstree-icon ' +
-                '							<xsl:if test="string-length(attribute::icon) > 0 and not(contains(@icon,\'/\'))"><xsl:value-of select="@icon" /></xsl:if>' +
-                '						</xsl:attribute>' +
-                '						<xsl:if test="string-length(attribute::icon) > 0 and contains(@icon,\'/\')"><xsl:attribute name="style">background:url(<xsl:value-of select="@icon" />) center center no-repeat;</xsl:attribute></xsl:if>' +
-                '						<xsl:text>&#xa0;</xsl:text>' +
-                '					</ins>' +
-                '					<xsl:copy-of select="./child::node()" />' +
-                '				</a>' +
-                '			</xsl:for-each>' +
-                '			<xsl:if test="$children or @hasChildren"><xsl:call-template name="nodes"><xsl:with-param name="node" select="current()" /></xsl:call-template></xsl:if>' +
-                '		</li>' +
-                '	</xsl:for-each>' +
-                '	</ul>' +
-                '</xsl:template>' +
-                '</xsl:stylesheet>',
-
-                'flat': '<' + '?xml version="1.0" encoding="utf-8" ?>' +
-                '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" >' +
-                '<xsl:output method="html" encoding="utf-8" omit-xml-declaration="yes" standalone="no" indent="no" media-type="text/xml" />' +
-                '<xsl:template match="/">' +
-                '	<ul>' +
-                '	<xsl:for-each select="//item[not(@parent_id) or @parent_id=0 or not(@parent_id = //item/@id)]">' + /* the last `or` may be removed */
-                '		<xsl:call-template name="nodes">' +
-                '			<xsl:with-param name="node" select="." />' +
-                '			<xsl:with-param name="is_last" select="number(position() = last())" />' +
-                '		</xsl:call-template>' +
-                '	</xsl:for-each>' +
-                '	</ul>' +
-                '</xsl:template>' +
-                '<xsl:template name="nodes">' +
-                '	<xsl:param name="node" />' +
-                '	<xsl:param name="is_last" />' +
-                '	<xsl:variable name="children" select="count(//item[@parent_id=$node/attribute::id]) &gt; 0" />' +
-                '	<li>' +
-                '	<xsl:attribute name="class">' +
-                '		<xsl:if test="$is_last = true()">jstree-last </xsl:if>' +
-                '		<xsl:choose>' +
-                '			<xsl:when test="@state = \'open\'">jstree-open </xsl:when>' +
-                '			<xsl:when test="$children or @hasChildren or @state = \'closed\'">jstree-closed </xsl:when>' +
-                '			<xsl:otherwise>jstree-leaf </xsl:otherwise>' +
-                '		</xsl:choose>' +
-                '		<xsl:value-of select="@class" />' +
-                '	</xsl:attribute>' +
-                '	<xsl:for-each select="@*">' +
-                '		<xsl:if test="name() != \'parent_id\' and name() != \'hasChildren\' and name() != \'class\' and name() != \'state\'">' +
-                '		<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' +
-                '		</xsl:if>' +
-                '	</xsl:for-each>' +
-                '	<ins class="jstree-icon"><xsl:text>&#xa0;</xsl:text></ins>' +
-                '	<xsl:for-each select="content/name">' +
-                '		<a>' +
-                '		<xsl:attribute name="href">' +
-                '			<xsl:choose>' +
-                '			<xsl:when test="@href"><xsl:value-of select="@href" /></xsl:when>' +
-                '			<xsl:otherwise>#</xsl:otherwise>' +
-                '			</xsl:choose>' +
-                '		</xsl:attribute>' +
-                '		<xsl:attribute name="class"><xsl:value-of select="@lang" /> <xsl:value-of select="@class" /></xsl:attribute>' +
-                '		<xsl:attribute name="style"><xsl:value-of select="@style" /></xsl:attribute>' +
-                '		<xsl:for-each select="@*">' +
-                '			<xsl:if test="name() != \'style\' and name() != \'class\' and name() != \'href\'">' +
-                '				<xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>' +
-                '			</xsl:if>' +
-                '		</xsl:for-each>' +
-                '			<ins>' +
-                '				<xsl:attribute name="class">jstree-icon ' +
-                '					<xsl:if test="string-length(attribute::icon) > 0 and not(contains(@icon,\'/\'))"><xsl:value-of select="@icon" /></xsl:if>' +
-                '				</xsl:attribute>' +
-                '				<xsl:if test="string-length(attribute::icon) > 0 and contains(@icon,\'/\')"><xsl:attribute name="style">background:url(<xsl:value-of select="@icon" />) center center no-repeat;</xsl:attribute></xsl:if>' +
-                '				<xsl:text>&#xa0;</xsl:text>' +
-                '			</ins>' +
-                '			<xsl:copy-of select="./child::node()" />' +
-                '		</a>' +
-                '	</xsl:for-each>' +
-                '	<xsl:if test="$children">' +
-                '		<ul>' +
-                '		<xsl:for-each select="//item[@parent_id=$node/attribute::id]">' +
-                '			<xsl:call-template name="nodes">' +
-                '				<xsl:with-param name="node" select="." />' +
-                '				<xsl:with-param name="is_last" select="number(position() = last())" />' +
-                '			</xsl:call-template>' +
-                '		</xsl:for-each>' +
-                '		</ul>' +
-                '	</xsl:if>' +
-                '	</li>' +
-                '</xsl:template>' +
-                '</xsl:stylesheet>'
-            },
-            escape_xml = function (string) {
-                return string
-                    .toString()
-                    .replace(/&/g, '&amp;')
-                    .replace(/</g, '&lt;')
-                    .replace(/>/g, '&gt;')
-                    .replace(/"/g, '&quot;')
-                    .replace(/'/g, '&apos;');
-            };
-        $.jstree.plugin("xml_data", {
-            defaults: {
-                data: false,
-                ajax: false,
-                xsl: "flat",
-                clean_node: false,
-                correct_state: true,
-                get_skip_empty: false,
-                get_include_preamble: true
-            },
-            _fn: {
-                load_node: function (obj, s_call, e_call) {
-                    var _this = this;
-                    this.load_node_xml(obj, function () {
-                        _this.__callback({"obj": _this._get_node(obj)});
-                        s_call.call(this);
-                    }, e_call);
-                },
-                _is_loaded: function (obj) {
-                    var s = this._get_settings().xml_data;
-                    obj = this._get_node(obj);
-                    return obj == -1 || !obj || (!s.ajax && !$.isFunction(s.data)) || obj.is(".jstree-open, .jstree-leaf") || obj.children("ul").children("li").size() > 0;
-                },
-                load_node_xml: function (obj, s_call, e_call) {
-                    var s = this.get_settings().xml_data,
-                        error_func = function () {
-                        },
-                        success_func = function () {
-                        };
-
-                    obj = this._get_node(obj);
-                    if (obj && obj !== -1) {
-                        if (obj.data("jstree_is_loading")) {
-                            return;
-                        }
-                        else {
-                            obj.data("jstree_is_loading", true);
-                        }
-                    }
-                    switch (!0) {
-                        case (!s.data && !s.ajax):
-                            throw "Neither data nor ajax settings supplied.";
-                        case ($.isFunction(s.data)):
-                            s.data.call(this, obj, $.proxy(function (d) {
-                                this.parse_xml(d, $.proxy(function (d) {
-                                    if (d) {
-                                        d = d.replace(/ ?xmlns="[^"]*"/ig, "");
-                                        if (d.length > 10) {
-                                            d = $(d);
-                                            if (obj === -1 || !obj) {
-                                                this.get_container().children("ul").empty().append(d.children());
-                                            }
-                                            else {
-                                                obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                                obj.append(d);
-                                                obj.removeData("jstree_is_loading");
-                                            }
-                                            if (s.clean_node) {
-                                                this.clean_node(obj);
-                                            }
-                                            if (s_call) {
-                                                s_call.call(this);
-                                            }
-                                        }
-                                        else {
-                                            if (obj && obj !== -1) {
-                                                obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                                obj.removeData("jstree_is_loading");
-                                                if (s.correct_state) {
-                                                    this.correct_state(obj);
-                                                    if (s_call) {
-                                                        s_call.call(this);
-                                                    }
-                                                }
-                                            }
-                                            else {
-                                                if (s.correct_state) {
-                                                    this.get_container().children("ul").empty();
-                                                    if (s_call) {
-                                                        s_call.call(this);
-                                                    }
-                                                }
-                                            }
-                                        }
-                                    }
-                                }, this));
-                            }, this));
-                            break;
-                        case (!!s.data && !s.ajax) || (!!s.data && !!s.ajax && (!obj || obj === -1)):
-                            if (!obj || obj == -1) {
-                                this.parse_xml(s.data, $.proxy(function (d) {
-                                    if (d) {
-                                        d = d.replace(/ ?xmlns="[^"]*"/ig, "");
-                                        if (d.length > 10) {
-                                            d = $(d);
-                                            this.get_container().children("ul").empty().append(d.children());
-                                            if (s.clean_node) {
-                                                this.clean_node(obj);
-                                            }
-                                            if (s_call) {
-                                                s_call.call(this);
-                                            }
-                                        }
-                                    }
-                                    else {
-                                        if (s.correct_state) {
-                                            this.get_container().children("ul").empty();
-                                            if (s_call) {
-                                                s_call.call(this);
-                                            }
-                                        }
-                                    }
-                                }, this));
-                            }
-                            break;
-                        case (!s.data && !!s.ajax) || (!!s.data && !!s.ajax && obj && obj !== -1):
-                            error_func = function (x, t, e) {
-                                var ef = this.get_settings().xml_data.ajax.error;
-                                if (ef) {
-                                    ef.call(this, x, t, e);
-                                }
-                                if (obj !== -1 && obj.length) {
-                                    obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                    obj.removeData("jstree_is_loading");
-                                    if (t === "success" && s.correct_state) {
-                                        this.correct_state(obj);
-                                    }
-                                }
-                                else {
-                                    if (t === "success" && s.correct_state) {
-                                        this.get_container().children("ul").empty();
-                                    }
-                                }
-                                if (e_call) {
-                                    e_call.call(this);
-                                }
-                            };
-                            success_func = function (d, t, x) {
-                                d = x.responseText;
-                                var sf = this.get_settings().xml_data.ajax.success;
-                                if (sf) {
-                                    d = sf.call(this, d, t, x) || d;
-                                }
-                                if (d === "" || (d && d.toString && d.toString().replace(/^[\s\n]+$/, "") === "")) {
-                                    return error_func.call(this, x, t, "");
-                                }
-                                this.parse_xml(d, $.proxy(function (d) {
-                                    if (d) {
-                                        d = d.replace(/ ?xmlns="[^"]*"/ig, "");
-                                        if (d.length > 10) {
-                                            d = $(d);
-                                            if (obj === -1 || !obj) {
-                                                this.get_container().children("ul").empty().append(d.children());
-                                            }
-                                            else {
-                                                obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                                obj.append(d);
-                                                obj.removeData("jstree_is_loading");
-                                            }
-                                            if (s.clean_node) {
-                                                this.clean_node(obj);
-                                            }
-                                            if (s_call) {
-                                                s_call.call(this);
-                                            }
-                                        }
-                                        else {
-                                            if (obj && obj !== -1) {
-                                                obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                                obj.removeData("jstree_is_loading");
-                                                if (s.correct_state) {
-                                                    this.correct_state(obj);
-                                                    if (s_call) {
-                                                        s_call.call(this);
-                                                    }
-                                                }
-                                            }
-                                            else {
-                                                if (s.correct_state) {
-                                                    this.get_container().children("ul").empty();
-                                                    if (s_call) {
-                                                        s_call.call(this);
-                                                    }
-                                                }
-                                            }
-                                        }
-                                    }
-                                }, this));
-                            };
-                            s.ajax.context = this;
-                            s.ajax.error = error_func;
-                            s.ajax.success = success_func;
-                            if (!s.ajax.dataType) {
-                                s.ajax.dataType = "xml";
-                            }
-                            if ($.isFunction(s.ajax.url)) {
-                                s.ajax.url = s.ajax.url.call(this, obj);
-                            }
-                            if ($.isFunction(s.ajax.data)) {
-                                s.ajax.data = s.ajax.data.call(this, obj);
-                            }
-                            $.ajax(s.ajax);
-                            break;
-                    }
-                },
-                parse_xml: function (xml, callback) {
-                    var s = this._get_settings().xml_data;
-                    $.vakata.xslt(xml, xsl[s.xsl], callback);
-                },
-                get_xml: function (tp, obj, li_attr, a_attr, is_callback) {
-                    var result = "",
-                        s = this._get_settings(),
-                        _this = this,
-                        tmp1, tmp2, li, a, lang;
-                    if (!tp) {
-                        tp = "flat";
-                    }
-                    if (!is_callback) {
-                        is_callback = 0;
-                    }
-                    obj = this._get_node(obj);
-                    if (!obj || obj === -1) {
-                        obj = this.get_container().find("> ul > li");
-                    }
-                    li_attr = $.isArray(li_attr) ? li_attr : ["id", "class"];
-                    if (!is_callback && this.data.types && $.inArray(s.types.type_attr, li_attr) === -1) {
-                        li_attr.push(s.types.type_attr);
-                    }
-
-                    a_attr = $.isArray(a_attr) ? a_attr : [];
-
-                    if (!is_callback) {
-                        if (s.xml_data.get_include_preamble) {
-                            result += '<' + '?xml version="1.0" encoding="UTF-8"?' + '>';
-                        }
-                        result += "<root>";
-                    }
-                    obj.each(function () {
-                        result += "<item";
-                        li = $(this);
-                        $.each(li_attr, function (i, v) {
-                            var t = li.attr(v);
-                            if (!s.xml_data.get_skip_empty || typeof t !== "undefined") {
-                                result += " " + v + "=\"" + escape_xml((" " + (t || "")).replace(/ jstree[^ ]*/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "")) + "\"";
-                            }
-                        });
-                        if (li.hasClass("jstree-open")) {
-                            result += " state=\"open\"";
-                        }
-                        if (li.hasClass("jstree-closed")) {
-                            result += " state=\"closed\"";
-                        }
-                        if (tp === "flat") {
-                            result += " parent_id=\"" + escape_xml(is_callback) + "\"";
-                        }
-                        result += ">";
-                        result += "<content>";
-                        a = li.children("a");
-                        a.each(function () {
-                            tmp1 = $(this);
-                            lang = false;
-                            result += "<name";
-                            if ($.inArray("languages", s.plugins) !== -1) {
-                                $.each(s.languages, function (k, z) {
-                                    if (tmp1.hasClass(z)) {
-                                        result += " lang=\"" + escape_xml(z) + "\"";
-                                        lang = z;
-                                        return false;
-                                    }
-                                });
-                            }
-                            if (a_attr.length) {
-                                $.each(a_attr, function (k, z) {
-                                    var t = tmp1.attr(z);
-                                    if (!s.xml_data.get_skip_empty || typeof t !== "undefined") {
-                                        result += " " + z + "=\"" + escape_xml((" " + t || "").replace(/ jstree[^ ]*/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "")) + "\"";
-                                    }
-                                });
-                            }
-                            if (tmp1.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/^\s+$/ig, "").length) {
-                                result += ' icon="' + escape_xml(tmp1.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, '').replace(/\s+$/ig, " ").replace(/^ /, "").replace(/ $/, "")) + '"';
-                            }
-                            if (tmp1.children("ins").get(0).style.backgroundImage.length) {
-                                result += ' icon="' + escape_xml(tmp1.children("ins").get(0).style.backgroundImage.replace("url(", "").replace(")", "").replace(/'/ig, "").replace(/"/ig, "")) + '"';
-                            }
-                            result += ">";
-                            result += "<![CDATA[" + _this.get_text(tmp1, lang) + "]]>";
-                            result += "</name>";
-                        });
-                        result += "</content>";
-                        tmp2 = li[0].id || true;
-                        li = li.find("> ul > li");
-                        if (li.length) {
-                            tmp2 = _this.get_xml(tp, li, li_attr, a_attr, tmp2);
-                        }
-                        else {
-                            tmp2 = "";
-                        }
-                        if (tp == "nest") {
-                            result += tmp2;
-                        }
-                        result += "</item>";
-                        if (tp == "flat") {
-                            result += tmp2;
-                        }
-                    });
-                    if (!is_callback) {
-                        result += "</root>";
-                    }
-                    return result;
-                }
-            }
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree search plugin
-     * Enables both sync and async search on the tree
-     * DOES NOT WORK WITH JSON PROGRESSIVE RENDER
-     */
-    (function ($) {
-        $.expr[':'].jstree_contains = function (a, i, m) {
-            return (a.textContent || a.innerText || "").toLowerCase().indexOf(m[3].toLowerCase()) >= 0;
-        };
-        $.expr[':'].jstree_title_contains = function (a, i, m) {
-            return (a.getAttribute("title") || "").toLowerCase().indexOf(m[3].toLowerCase()) >= 0;
-        };
-        $.jstree.plugin("search", {
-            __init: function () {
-                this.data.search.str = "";
-                this.data.search.result = $();
-                if (this._get_settings().search.show_only_matches) {
-                    this.get_container()
-                        .bind("search.jstree", function (e, data) {
-                            $(this).children("ul").find("li").hide().removeClass("jstree-last");
-                            data.rslt.nodes.parentsUntil(".jstree").andSelf().show()
-                                .filter("ul").each(function () {
-                                $(this).children("li:visible").eq(-1).addClass("jstree-last");
-                            });
-                        })
-                        .bind("clear_search.jstree", function () {
-                            $(this).children("ul").find("li").css("display", "").end().end().jstree("clean_node", -1);
-                        });
-                }
-            },
-            defaults: {
-                ajax: false,
-                search_method: "jstree_contains", // for case insensitive - jstree_contains
-                show_only_matches: false
-            },
-            _fn: {
-                search: function (str, skip_async) {
-                    if ($.trim(str) === "") {
-                        this.clear_search();
-                        return;
-                    }
-                    var s = this.get_settings().search,
-                        t = this,
-                        error_func = function () {
-                        },
-                        success_func = function () {
-                        };
-                    this.data.search.str = str;
-
-                    if (!skip_async && s.ajax !== false && this.get_container_ul().find("li.jstree-closed:not(:has(ul)):eq(0)").length > 0) {
-                        this.search.supress_callback = true;
-                        error_func = function () {
-                        };
-                        success_func = function (d, t, x) {
-                            var sf = this.get_settings().search.ajax.success;
-                            if (sf) {
-                                d = sf.call(this, d, t, x) || d;
-                            }
-                            this.data.search.to_open = d;
-                            this._search_open();
-                        };
-                        s.ajax.context = this;
-                        s.ajax.error = error_func;
-                        s.ajax.success = success_func;
-                        if ($.isFunction(s.ajax.url)) {
-                            s.ajax.url = s.ajax.url.call(this, str);
-                        }
-                        if ($.isFunction(s.ajax.data)) {
-                            s.ajax.data = s.ajax.data.call(this, str);
-                        }
-                        if (!s.ajax.data) {
-                            s.ajax.data = {"search_string": str};
-                        }
-                        if (!s.ajax.dataType || /^json/.exec(s.ajax.dataType)) {
-                            s.ajax.dataType = "json";
-                        }
-                        $.ajax(s.ajax);
-                        return;
-                    }
-                    if (this.data.search.result.length) {
-                        this.clear_search();
-                    }
-                    this.data.search.result = this.get_container().find("a" + (this.data.languages ? "." + this.get_lang() : "" ) + ":" + (s.search_method) + "(" + this.data.search.str + ")");
-                    this.data.search.result.addClass("jstree-search").parent().parents(".jstree-closed").each(function () {
-                        t.open_node(this, false, true);
-                    });
-                    this.__callback({nodes: this.data.search.result, str: str});
-                },
-                clear_search: function (str) {
-                    this.data.search.result.removeClass("jstree-search");
-                    this.__callback(this.data.search.result);
-                    this.data.search.result = $();
-                },
-                _search_open: function (is_callback) {
-                    var _this = this,
-                        done = true,
-                        current = [],
-                        remaining = [];
-                    if (this.data.search.to_open.length) {
-                        $.each(this.data.search.to_open, function (i, val) {
-                            if (val == "#") {
-                                return true;
-                            }
-                            if ($(val).length && $(val).is(".jstree-closed")) {
-                                current.push(val);
-                            }
-                            else {
-                                remaining.push(val);
-                            }
-                        });
-                        if (current.length) {
-                            this.data.search.to_open = remaining;
-                            $.each(current, function (i, val) {
-                                _this.open_node(val, function () {
-                                    _this._search_open(true);
-                                });
-                            });
-                            done = false;
-                        }
-                    }
-                    if (done) {
-                        this.search(this.data.search.str, true);
-                    }
-                }
-            }
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree contextmenu plugin
-     */
-    (function ($) {
-        $.vakata.context = {
-            hide_on_mouseleave: false,
-
-            cnt: $("<div id='vakata-contextmenu' />"),
-            vis: false,
-            tgt: false,
-            par: false,
-            func: false,
-            data: false,
-            rtl: false,
-            show: function (s, t, x, y, d, p, rtl) {
-                $.vakata.context.rtl = !!rtl;
-                var html = $.vakata.context.parse(s), h, w;
-                if (!html) {
-                    return;
-                }
-                $.vakata.context.vis = true;
-                $.vakata.context.tgt = t;
-                $.vakata.context.par = p || t || null;
-                $.vakata.context.data = d || null;
-                $.vakata.context.cnt
-                    .html(html)
-                    .css({"visibility": "hidden", "display": "block", "left": 0, "top": 0});
-
-                if ($.vakata.context.hide_on_mouseleave) {
-                    $.vakata.context.cnt
-                        .one("mouseleave", function (e) {
-                            $.vakata.context.hide();
-                        });
-                }
-
-                h = $.vakata.context.cnt.height();
-                w = $.vakata.context.cnt.width();
-                if (x + w > $(document).width()) {
-                    x = $(document).width() - (w + 5);
-                    $.vakata.context.cnt.find("li > ul").addClass("right");
-                }
-                if (y + h > $(document).height()) {
-                    y = y - (h + t[0].offsetHeight);
-                    $.vakata.context.cnt.find("li > ul").addClass("bottom");
-                }
-
-                $.vakata.context.cnt
-                    .css({"left": x, "top": y})
-                    .find("li:has(ul)")
-                    .bind("mouseenter", function (e) {
-                        var w = $(document).width(),
-                            h = $(document).height(),
-                            ul = $(this).children("ul").show();
-                        if (w !== $(document).width()) {
-                            ul.toggleClass("right");
-                        }
-                        if (h !== $(document).height()) {
-                            ul.toggleClass("bottom");
-                        }
-                    })
-                    .bind("mouseleave", function (e) {
-                        $(this).children("ul").hide();
-                    })
-                    .end()
-                    .css({"visibility": "visible"})
-                    .show();
-                $(document).triggerHandler("context_show.vakata");
-            },
-            hide: function () {
-                $.vakata.context.vis = false;
-                $.vakata.context.cnt.attr("class", "").css({"visibility": "hidden"});
-                $(document).triggerHandler("context_hide.vakata");
-            },
-            parse: function (s, is_callback) {
-                if (!s) {
-                    return false;
-                }
-                var str = "",
-                    tmp = false,
-                    was_sep = true;
-                if (!is_callback) {
-                    $.vakata.context.func = {};
-                }
-                str += "<ul>";
-                $.each(s, function (i, val) {
-                    if (!val) {
-                        return true;
-                    }
-                    $.vakata.context.func[i] = val.action;
-                    if (!was_sep && val.separator_before) {
-                        str += "<li class='vakata-separator vakata-separator-before'></li>";
-                    }
-                    was_sep = false;
-                    str += "<li class='" + (val._class || "") + (val._disabled ? " jstree-contextmenu-disabled " : "") + "'><ins ";
-                    if (val.icon && val.icon.indexOf("/") === -1) {
-                        str += " class='" + val.icon + "' ";
-                    }
-                    if (val.icon && val.icon.indexOf("/") !== -1) {
-                        str += " style='background:url(" + val.icon + ") center center no-repeat;' ";
-                    }
-                    str += ">&#160;</ins><a href='#' rel='" + i + "'>";
-                    if (val.submenu) {
-                        str += "<span style='float:" + ($.vakata.context.rtl ? "left" : "right") + ";'>&raquo;</span>";
-                    }
-                    str += val.label + "</a>";
-                    if (val.submenu) {
-                        tmp = $.vakata.context.parse(val.submenu, true);
-                        if (tmp) {
-                            str += tmp;
-                        }
-                    }
-                    str += "</li>";
-                    if (val.separator_after) {
-                        str += "<li class='vakata-separator vakata-separator-after'></li>";
-                        was_sep = true;
-                    }
-                });
-                str = str.replace(/<li class\='vakata-separator vakata-separator-after'\><\/li\>$/, "");
-                str += "</ul>";
-                $(document).triggerHandler("context_parse.vakata");
-                return str.length > 10 ? str : false;
-            },
-            exec: function (i) {
-                if ($.isFunction($.vakata.context.func[i])) {
-                    // if is string - eval and call it!
-                    $.vakata.context.func[i].call($.vakata.context.data, $.vakata.context.par);
-                    return true;
-                }
-                else {
-                    return false;
-                }
-            }
-        };
-        $(function () {
-            var css_string = '' +
-                '#vakata-contextmenu { display:block; visibility:hidden; left:0; top:-200px; position:absolute; margin:0; padding:0; min-width:180px; background:#ebebeb; border:1px solid silver; z-index:10000; *width:180px; } ' +
-                '#vakata-contextmenu ul { min-width:180px; *width:180px; } ' +
-                '#vakata-contextmenu ul, #vakata-contextmenu li { margin:0; padding:0; list-style-type:none; display:block; } ' +
-                '#vakata-contextmenu li { line-height:20px; min-height:20px; position:relative; padding:0px; } ' +
-                '#vakata-contextmenu li a { padding:1px 6px; line-height:17px; display:block; text-decoration:none; margin:1px 1px 0 1px; } ' +
-                '#vakata-contextmenu li ins { float:left; width:16px; height:16px; text-decoration:none; margin-right:2px; } ' +
-                '#vakata-contextmenu li a:hover, #vakata-contextmenu li.vakata-hover > a { background:gray; color:white; } ' +
-                '#vakata-contextmenu li ul { display:none; position:absolute; top:-2px; left:100%; background:#ebebeb; border:1px solid gray; } ' +
-                '#vakata-contextmenu .right { right:100%; left:auto; } ' +
-                '#vakata-contextmenu .bottom { bottom:-1px; top:auto; } ' +
-                '#vakata-contextmenu li.vakata-separator { min-height:0; height:1px; line-height:1px; font-size:1px; overflow:hidden; margin:0 2px; background:silver; /* border-top:1px solid #fefefe; */ padding:0; } ';
-            $.vakata.css.add_sheet({str: css_string, title: "vakata"});
-            $.vakata.context.cnt
-                .delegate("a", "click", function (e) {
-                    e.preventDefault();
-                })
-                .delegate("a", "mouseup", function (e) {
-                    if (!$(this).parent().hasClass("jstree-contextmenu-disabled") && $.vakata.context.exec($(this).attr("rel"))) {
-                        $.vakata.context.hide();
-                    }
-                    else {
-                        $(this).blur();
-                    }
-                })
-                .delegate("a", "mouseover", function () {
-                    $.vakata.context.cnt.find(".vakata-hover").removeClass("vakata-hover");
-                })
-                .appendTo("body");
-            $(document).bind("mousedown", function (e) {
-                if ($.vakata.context.vis && !$.contains($.vakata.context.cnt[0], e.target)) {
-                    $.vakata.context.hide();
-                }
-            });
-            if (typeof $.hotkeys !== "undefined") {
-                $(document)
-                    .bind("keydown", "up", function (e) {
-                        if ($.vakata.context.vis) {
-                            var o = $.vakata.context.cnt.find("ul:visible").last().children(".vakata-hover").removeClass("vakata-hover").prevAll("li:not(.vakata-separator)").first();
-                            if (!o.length) {
-                                o = $.vakata.context.cnt.find("ul:visible").last().children("li:not(.vakata-separator)").last();
-                            }
-                            o.addClass("vakata-hover");
-                            e.stopImmediatePropagation();
-                            e.preventDefault();
-                        }
-                    })
-                    .bind("keydown", "down", function (e) {
-                        if ($.vakata.context.vis) {
-                            var o = $.vakata.context.cnt.find("ul:visible").last().children(".vakata-hover").removeClass("vakata-hover").nextAll("li:not(.vakata-separator)").first();
-                            if (!o.length) {
-                                o = $.vakata.context.cnt.find("ul:visible").last().children("li:not(.vakata-separator)").first();
-                            }
-                            o.addClass("vakata-hover");
-                            e.stopImmediatePropagation();
-                            e.preventDefault();
-                        }
-                    })
-                    .bind("keydown", "right", function (e) {
-                        if ($.vakata.context.vis) {
-                            $.vakata.context.cnt.find(".vakata-hover").children("ul").show().children("li:not(.vakata-separator)").removeClass("vakata-hover").first().addClass("vakata-hover");
-                            e.stopImmediatePropagation();
-                            e.preventDefault();
-                        }
-                    })
-                    .bind("keydown", "left", function (e) {
-                        if ($.vakata.context.vis) {
-                            $.vakata.context.cnt.find(".vakata-hover").children("ul").hide().children(".vakata-separator").removeClass("vakata-hover");
-                            e.stopImmediatePropagation();
-                            e.preventDefault();
-                        }
-                    })
-                    .bind("keydown", "esc", function (e) {
-                        $.vakata.context.hide();
-                        e.preventDefault();
-                    })
-                    .bind("keydown", "space", function (e) {
-                        $.vakata.context.cnt.find(".vakata-hover").last().children("a").click();
-                        e.preventDefault();
-                    });
-            }
-        });
-
-        $.jstree.plugin("contextmenu", {
-            __init: function () {
-                this.get_container()
-                    .delegate("a", "contextmenu.jstree", $.proxy(function (e) {
-                        e.preventDefault();
-                        if (!$(e.currentTarget).hasClass("jstree-loading")) {
-                            this.show_contextmenu(e.currentTarget, e.pageX, e.pageY);
-                        }
-                    }, this))
-                    .delegate("a", "click.jstree", $.proxy(function (e) {
-                        if (this.data.contextmenu) {
-                            $.vakata.context.hide();
-                        }
-                    }, this))
-                    .bind("destroy.jstree", $.proxy(function () {
-                        // TODO: move this to descruct method
-                        if (this.data.contextmenu) {
-                            $.vakata.context.hide();
-                        }
-                    }, this));
-                $(document).bind("context_hide.vakata", $.proxy(function () {
-                    this.data.contextmenu = false;
-                }, this));
-            },
-            defaults: {
-                select_node: false, // requires UI plugin
-                show_at_node: true,
-                items: { // Could be a function that should return an object like this one
-                    "create": {
-                        "separator_before": false,
-                        "separator_after": true,
-                        "label": "Create",
-                        "action": function (obj) {
-                            this.create(obj);
-                        }
-                    },
-                    "rename": {
-                        "separator_before": false,
-                        "separator_after": false,
-                        "label": "Rename",
-                        "action": function (obj) {
-                            this.rename(obj);
-                        }
-                    },
-                    "remove": {
-                        "separator_before": false,
-                        "icon": false,
-                        "separator_after": false,
-                        "label": "Delete",
-                        "action": function (obj) {
-                            if (this.is_selected(obj)) {
-                                this.remove();
-                            } else {
-                                this.remove(obj);
-                            }
-                        }
-                    },
-                    "ccp": {
-                        "separator_before": true,
-                        "icon": false,
-                        "separator_after": false,
-                        "label": "Edit",
-                        "action": false,
-                        "submenu": {
-                            "cut": {
-                                "separator_before": false,
-                                "separator_after": false,
-                                "label": "Cut",
-                                "action": function (obj) {
-                                    this.cut(obj);
-                                }
-                            },
-                            "copy": {
-                                "separator_before": false,
-                                "icon": false,
-                                "separator_after": false,
-                                "label": "Copy",
-                                "action": function (obj) {
-                                    this.copy(obj);
-                                }
-                            },
-                            "paste": {
-                                "separator_before": false,
-                                "icon": false,
-                                "separator_after": false,
-                                "label": "Paste",
-                                "action": function (obj) {
-                                    this.paste(obj);
-                                }
-                            }
-                        }
-                    }
-                }
-            },
-            _fn: {
-                show_contextmenu: function (obj, x, y) {
-                    obj = this._get_node(obj);
-                    var s = this.get_settings().contextmenu,
-                        a = obj.children("a:visible:eq(0)"),
-                        o = false,
-                        i = false;
-                    if (s.select_node && this.data.ui && !this.is_selected(obj)) {
-                        this.deselect_all();
-                        this.select_node(obj, true);
-                    }
-                    if (s.show_at_node || typeof x === "undefined" || typeof y === "undefined") {
-                        o = a.offset();
-                        x = o.left;
-                        y = o.top + this.data.core.li_height;
-                    }
-                    i = obj.data("jstree") && obj.data("jstree").contextmenu ? obj.data("jstree").contextmenu : s.items;
-                    if ($.isFunction(i)) {
-                        i = i.call(this, obj);
-                    }
-                    this.data.contextmenu = true;
-                    $.vakata.context.show(i, a, x, y, this, obj, this._get_settings().core.rtl);
-                    if (this.data.themes) {
-                        $.vakata.context.cnt.attr("class", "jstree-" + this.data.themes.theme + "-context");
-                    }
-                }
-            }
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree types plugin
-     * Adds support types of nodes
-     * You can set an attribute on each li node, that represents its type.
-     * According to the type setting the node may get custom icon/validation rules
-     */
-    (function ($) {
-        $.jstree.plugin("types", {
-            __init: function () {
-                var s = this._get_settings().types;
-                this.data.types.attach_to = [];
-                this.get_container()
-                    .bind("init.jstree", $.proxy(function () {
-                        var types = s.types,
-                            attr = s.type_attr,
-                            icons_css = "",
-                            _this = this;
-
-                        $.each(types, function (i, tp) {
-                            $.each(tp, function (k, v) {
-                                if (!/^(max_depth|max_children|icon|valid_children)$/.test(k)) {
-                                    _this.data.types.attach_to.push(k);
-                                }
-                            });
-                            if (!tp.icon) {
-                                return true;
-                            }
-                            if (tp.icon.image || tp.icon.position) {
-                                if (i == "default") {
-                                    icons_css += '.jstree-' + _this.get_index() + ' a > .jstree-icon { ';
-                                }
-                                else {
-                                    icons_css += '.jstree-' + _this.get_index() + ' li[' + attr + '="' + i + '"] > a > .jstree-icon { ';
-                                }
-                                if (tp.icon.image) {
-                                    icons_css += ' background-image:url(' + tp.icon.image + '); ';
-                                }
-                                if (tp.icon.position) {
-                                    icons_css += ' background-position:' + tp.icon.position + '; ';
-                                }
-                                else {
-                                    icons_css += ' background-position:0 0; ';
-                                }
-                                icons_css += '} ';
-                            }
-                        });
-                        if (icons_css !== "") {
-                            $.vakata.css.add_sheet({'str': icons_css, title: "jstree-types"});
-                        }
-                    }, this))
-                    .bind("before.jstree", $.proxy(function (e, data) {
-                        var s, t,
-                            o = this._get_settings().types.use_data ? this._get_node(data.args[0]) : false,
-                            d = o && o !== -1 && o.length ? o.data("jstree") : false;
-                        if (d && d.types && d.types[data.func] === false) {
-                            e.stopImmediatePropagation();
-                            return false;
-                        }
-                        if ($.inArray(data.func, this.data.types.attach_to) !== -1) {
-                            if (!data.args[0] || (!data.args[0].tagName && !data.args[0].jquery)) {
-                                return;
-                            }
-                            s = this._get_settings().types.types;
-                            t = this._get_type(data.args[0]);
-                            if (
-                                (
-                                    (s[t] && typeof s[t][data.func] !== "undefined") ||
-                                    (s["default"] && typeof s["default"][data.func] !== "undefined")
-                                ) && this._check(data.func, data.args[0]) === false
-                            ) {
-                                e.stopImmediatePropagation();
-                                return false;
-                            }
-                        }
-                    }, this));
-                if (is_ie6) {
-                    this.get_container()
-                        .bind("load_node.jstree set_type.jstree", $.proxy(function (e, data) {
-                            var r = data && data.rslt && data.rslt.obj && data.rslt.obj !== -1 ? this._get_node(data.rslt.obj).parent() : this.get_container_ul(),
-                                c = false,
-                                s = this._get_settings().types;
-                            $.each(s.types, function (i, tp) {
-                                if (tp.icon && (tp.icon.image || tp.icon.position)) {
-                                    c = i === "default" ? r.find("li > a > .jstree-icon") : r.find("li[" + s.type_attr + "='" + i + "'] > a > .jstree-icon");
-                                    if (tp.icon.image) {
-                                        c.css("backgroundImage", "url(" + tp.icon.image + ")");
-                                    }
-                                    c.css("backgroundPosition", tp.icon.position || "0 0");
-                                }
-                            });
-                        }, this));
-                }
-            },
-            defaults: {
-                // defines maximum number of root nodes (-1 means unlimited, -2 means disable max_children checking)
-                max_children: -1,
-                // defines the maximum depth of the tree (-1 means unlimited, -2 means disable max_depth checking)
-                max_depth: -1,
-                // defines valid node types for the root nodes
-                valid_children: "all",
-
-                // whether to use $.data
-                use_data: false,
-                // where is the type stores (the rel attribute of the LI element)
-                type_attr: "rel",
-                // a list of types
-                types: {
-                    // the default type
-                    "default": {
-                        "max_children": -1,
-                        "max_depth": -1,
-                        "valid_children": "all"
-
-                        // Bound functions - you can bind any other function here (using boolean or function)
-                        //"select_node"	: true
-                    }
-                }
-            },
-            _fn: {
-                _types_notify: function (n, data) {
-                    if (data.type && this._get_settings().types.use_data) {
-                        this.set_type(data.type, n);
-                    }
-                },
-                _get_type: function (obj) {
-                    obj = this._get_node(obj);
-                    return (!obj || !obj.length) ? false : obj.attr(this._get_settings().types.type_attr) || "default";
-                },
-                set_type: function (str, obj) {
-                    obj = this._get_node(obj);
-                    var ret = (!obj.length || !str) ? false : obj.attr(this._get_settings().types.type_attr, str);
-                    if (ret) {
-                        this.__callback({obj: obj, type: str});
-                    }
-                    return ret;
-                },
-                _check: function (rule, obj, opts) {
-                    obj = this._get_node(obj);
-                    var v = false, t = this._get_type(obj), d = 0, _this = this, s = this._get_settings().types,
-                        data = false;
-                    if (obj === -1) {
-                        if (!!s[rule]) {
-                            v = s[rule];
-                        }
-                        else {
-                            return;
-                        }
-                    }
-                    else {
-                        if (t === false) {
-                            return;
-                        }
-                        data = s.use_data ? obj.data("jstree") : false;
-                        if (data && data.types && typeof data.types[rule] !== "undefined") {
-                            v = data.types[rule];
-                        }
-                        else if (!!s.types[t] && typeof s.types[t][rule] !== "undefined") {
-                            v = s.types[t][rule];
-                        }
-                        else if (!!s.types["default"] && typeof s.types["default"][rule] !== "undefined") {
-                            v = s.types["default"][rule];
-                        }
-                    }
-                    if ($.isFunction(v)) {
-                        v = v.call(this, obj);
-                    }
-                    if (rule === "max_depth" && obj !== -1 && opts !== false && s.max_depth !== -2 && v !== 0) {
-                        // also include the node itself - otherwise if root node it is not checked
-                        obj.children("a:eq(0)").parentsUntil(".jstree", "li").each(function (i) {
-                            // check if current depth already exceeds global tree depth
-                            if (s.max_depth !== -1 && s.max_depth - (i + 1) <= 0) {
-                                v = 0;
-                                return false;
-                            }
-                            d = (i === 0) ? v : _this._check(rule, this, false);
-                            // check if current node max depth is already matched or exceeded
-                            if (d !== -1 && d - (i + 1) <= 0) {
-                                v = 0;
-                                return false;
-                            }
-                            // otherwise - set the max depth to the current value minus current depth
-                            if (d >= 0 && (d - (i + 1) < v || v < 0)) {
-                                v = d - (i + 1);
-                            }
-                            // if the global tree depth exists and it minus the nodes calculated so far is less than `v` or `v` is unlimited
-                            if (s.max_depth >= 0 && (s.max_depth - (i + 1) < v || v < 0)) {
-                                v = s.max_depth - (i + 1);
-                            }
-                        });
-                    }
-                    return v;
-                },
-                check_move: function () {
-                    if (!this.__call_old()) {
-                        return false;
-                    }
-                    var m = this._get_move(),
-                        s = m.rt._get_settings().types,
-                        mc = m.rt._check("max_children", m.cr),
-                        md = m.rt._check("max_depth", m.cr),
-                        vc = m.rt._check("valid_children", m.cr),
-                        ch = 0, d = 1, t;
-
-                    if (vc === "none") {
-                        return false;
-                    }
-                    if ($.isArray(vc) && m.ot && m.ot._get_type) {
-                        m.o.each(function () {
-                            if ($.inArray(m.ot._get_type(this), vc) === -1) {
-                                d = false;
-                                return false;
-                            }
-                        });
-                        if (d === false) {
-                            return false;
-                        }
-                    }
-                    if (s.max_children !== -2 && mc !== -1) {
-                        ch = m.cr === -1 ? this.get_container().find("> ul > li").not(m.o).length : m.cr.find("> ul > li").not(m.o).length;
-                        if (ch + m.o.length > mc) {
-                            return false;
-                        }
-                    }
-                    if (s.max_depth !== -2 && md !== -1) {
-                        d = 0;
-                        if (md === 0) {
-                            return false;
-                        }
-                        if (typeof m.o.d === "undefined") {
-                            // TODO: deal with progressive rendering and async when checking max_depth (how to know the depth of the moved node)
-                            t = m.o;
-                            while (t.length > 0) {
-                                t = t.find("> ul > li");
-                                d++;
-                            }
-                            m.o.d = d;
-                        }
-                        if (md - m.o.d < 0) {
-                            return false;
-                        }
-                    }
-                    return true;
-                },
-                create_node: function (obj, position, js, callback, is_loaded, skip_check) {
-                    if (!skip_check && (is_loaded || this._is_loaded(obj))) {
-                        var p = (typeof position == "string" && position.match(/^before|after$/i) && obj !== -1) ? this._get_parent(obj) : this._get_node(obj),
-                            s = this._get_settings().types,
-                            mc = this._check("max_children", p),
-                            md = this._check("max_depth", p),
-                            vc = this._check("valid_children", p),
-                            ch;
-                        if (typeof js === "string") {
-                            js = {data: js};
-                        }
-                        if (!js) {
-                            js = {};
-                        }
-                        if (vc === "none") {
-                            return false;
-                        }
-                        if ($.isArray(vc)) {
-                            if (!js.attr || !js.attr[s.type_attr]) {
-                                if (!js.attr) {
-                                    js.attr = {};
-                                }
-                                js.attr[s.type_attr] = vc[0];
-                            }
-                            else {
-                                if ($.inArray(js.attr[s.type_attr], vc) === -1) {
-                                    return false;
-                                }
-                            }
-                        }
-                        if (s.max_children !== -2 && mc !== -1) {
-                            ch = p === -1 ? this.get_container().find("> ul > li").length : p.find("> ul > li").length;
-                            if (ch + 1 > mc) {
-                                return false;
-                            }
-                        }
-                        if (s.max_depth !== -2 && md !== -1 && (md - 1) < 0) {
-                            return false;
-                        }
-                    }
-                    return this.__call_old(true, obj, position, js, callback, is_loaded, skip_check);
-                }
-            }
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree HTML plugin
-     * The HTML data store. Datastores are build by replacing the `load_node` and `_is_loaded` functions.
-     */
-    (function ($) {
-        $.jstree.plugin("html_data", {
-            __init: function () {
-                // this used to use html() and clean the whitespace, but this way any attached data was lost
-                this.data.html_data.original_container_html = this.get_container().find(" > ul > li").clone(true);
-                // remove white space from LI node - otherwise nodes appear a bit to the right
-                this.data.html_data.original_container_html.find("li").andSelf().contents().filter(function () {
-                    return this.nodeType == 3;
-                }).remove();
-            },
-            defaults: {
-                data: false,
-                ajax: false,
-                correct_state: true
-            },
-            _fn: {
-                load_node: function (obj, s_call, e_call) {
-                    var _this = this;
-                    this.load_node_html(obj, function () {
-                        _this.__callback({"obj": _this._get_node(obj)});
-                        s_call.call(this);
-                    }, e_call);
-                },
-                _is_loaded: function (obj) {
-                    obj = this._get_node(obj);
-                    return obj == -1 || !obj || (!this._get_settings().html_data.ajax && !$.isFunction(this._get_settings().html_data.data)) || obj.is(".jstree-open, .jstree-leaf") || obj.children("ul").children("li").size() > 0;
-                },
-                load_node_html: function (obj, s_call, e_call) {
-                    var d,
-                        s = this.get_settings().html_data,
-                        error_func = function () {
-                        },
-                        success_func = function () {
-                        };
-                    obj = this._get_node(obj);
-                    if (obj && obj !== -1) {
-                        if (obj.data("jstree_is_loading")) {
-                            return;
-                        }
-                        else {
-                            obj.data("jstree_is_loading", true);
-                        }
-                    }
-                    switch (!0) {
-                        case ($.isFunction(s.data)):
-                            s.data.call(this, obj, $.proxy(function (d) {
-                                if (d && d !== "" && d.toString && d.toString().replace(/^[\s\n]+$/, "") !== "") {
-                                    d = $(d);
-                                    if (!d.is("ul")) {
-                                        d = $("<ul />").append(d);
-                                    }
-                                    if (obj == -1 || !obj) {
-                                        this.get_container().children("ul").empty().append(d.children()).find("li, a").filter(function () {
-                                            return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
-                                        }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
-                                    }
-                                    else {
-                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                        obj.append(d).children("ul").find("li, a").filter(function () {
-                                            return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
-                                        }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
-                                        obj.removeData("jstree_is_loading");
-                                    }
-                                    this.clean_node(obj);
-                                    if (s_call) {
-                                        s_call.call(this);
-                                    }
-                                }
-                                else {
-                                    if (obj && obj !== -1) {
-                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                        obj.removeData("jstree_is_loading");
-                                        if (s.correct_state) {
-                                            this.correct_state(obj);
-                                            if (s_call) {
-                                                s_call.call(this);
-                                            }
-                                        }
-                                    }
-                                    else {
-                                        if (s.correct_state) {
-                                            this.get_container().children("ul").empty();
-                                            if (s_call) {
-                                                s_call.call(this);
-                                            }
-                                        }
-                                    }
-                                }
-                            }, this));
-                            break;
-                        case (!s.data && !s.ajax):
-                            if (!obj || obj == -1) {
-                                this.get_container()
-                                    .children("ul").empty()
-                                    .append(this.data.html_data.original_container_html)
-                                    .find("li, a").filter(function () {
-                                    return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
-                                }).prepend("<ins class='jstree-icon'>&#160;</ins>").end()
-                                    .filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
-                                this.clean_node();
-                            }
-                            if (s_call) {
-                                s_call.call(this);
-                            }
-                            break;
-                        case (!!s.data && !s.ajax) || (!!s.data && !!s.ajax && (!obj || obj === -1)):
-                            if (!obj || obj == -1) {
-                                d = $(s.data);
-                                if (!d.is("ul")) {
-                                    d = $("<ul />").append(d);
-                                }
-                                this.get_container()
-                                    .children("ul").empty().append(d.children())
-                                    .find("li, a").filter(function () {
-                                    return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
-                                }).prepend("<ins class='jstree-icon'>&#160;</ins>").end()
-                                    .filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
-                                this.clean_node();
-                            }
-                            if (s_call) {
-                                s_call.call(this);
-                            }
-                            break;
-                        case (!s.data && !!s.ajax) || (!!s.data && !!s.ajax && obj && obj !== -1):
-                            obj = this._get_node(obj);
-                            error_func = function (x, t, e) {
-                                var ef = this.get_settings().html_data.ajax.error;
-                                if (ef) {
-                                    ef.call(this, x, t, e);
-                                }
-                                if (obj != -1 && obj.length) {
-                                    obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                    obj.removeData("jstree_is_loading");
-                                    if (t === "success" && s.correct_state) {
-                                        this.correct_state(obj);
-                                    }
-                                }
-                                else {
-                                    if (t === "success" && s.correct_state) {
-                                        this.get_container().children("ul").empty();
-                                    }
-                                }
-                                if (e_call) {
-                                    e_call.call(this);
-                                }
-                            };
-                            success_func = function (d, t, x) {
-                                var sf = this.get_settings().html_data.ajax.success;
-                                if (sf) {
-                                    d = sf.call(this, d, t, x) || d;
-                                }
-                                if (d === "" || (d && d.toString && d.toString().replace(/^[\s\n]+$/, "") === "")) {
-                                    return error_func.call(this, x, t, "");
-                                }
-                                if (d) {
-                                    d = $(d);
-                                    if (!d.is("ul")) {
-                                        d = $("<ul />").append(d);
-                                    }
-                                    if (obj == -1 || !obj) {
-                                        this.get_container().children("ul").empty().append(d.children()).find("li, a").filter(function () {
-                                            return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
-                                        }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
-                                    }
-                                    else {
-                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                        obj.append(d).children("ul").find("li, a").filter(function () {
-                                            return !this.firstChild || !this.firstChild.tagName || this.firstChild.tagName !== "INS";
-                                        }).prepend("<ins class='jstree-icon'>&#160;</ins>").end().filter("a").children("ins:first-child").not(".jstree-icon").addClass("jstree-icon");
-                                        obj.removeData("jstree_is_loading");
-                                    }
-                                    this.clean_node(obj);
-                                    if (s_call) {
-                                        s_call.call(this);
-                                    }
-                                }
-                                else {
-                                    if (obj && obj !== -1) {
-                                        obj.children("a.jstree-loading").removeClass("jstree-loading");
-                                        obj.removeData("jstree_is_loading");
-                                        if (s.correct_state) {
-                                            this.correct_state(obj);
-                                            if (s_call) {
-                                                s_call.call(this);
-                                            }
-                                        }
-                                    }
-                                    else {
-                                        if (s.correct_state) {
-                                            this.get_container().children("ul").empty();
-                                            if (s_call) {
-                                                s_call.call(this);
-                                            }
-                                        }
-                                    }
-                                }
-                            };
-                            s.ajax.context = this;
-                            s.ajax.error = error_func;
-                            s.ajax.success = success_func;
-                            if (!s.ajax.dataType) {
-                                s.ajax.dataType = "html";
-                            }
-                            if ($.isFunction(s.ajax.url)) {
-                                s.ajax.url = s.ajax.url.call(this, obj);
-                            }
-                            if ($.isFunction(s.ajax.data)) {
-                                s.ajax.data = s.ajax.data.call(this, obj);
-                            }
-                            $.ajax(s.ajax);
-                            break;
-                    }
-                }
-            }
-        });
-        // include the HTML data plugin by default
-        $.jstree.defaults.plugins.push("html_data");
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree themeroller plugin
-     * Adds support for jQuery UI themes. Include this at the end of your plugins list, also make sure "themes" is not included.
-     */
-    (function ($) {
-        $.jstree.plugin("themeroller", {
-            __init: function () {
-                var s = this._get_settings().themeroller;
-                this.get_container()
-                    .addClass("ui-widget-content")
-                    .addClass("jstree-themeroller")
-                    .delegate("a", "mouseenter.jstree", function (e) {
-                        if (!$(e.currentTarget).hasClass("jstree-loading")) {
-                            $(this).addClass(s.item_h);
-                        }
-                    })
-                    .delegate("a", "mouseleave.jstree", function () {
-                        $(this).removeClass(s.item_h);
-                    })
-                    .bind("init.jstree", $.proxy(function (e, data) {
-                        data.inst.get_container().find("> ul > li > .jstree-loading > ins").addClass("ui-icon-refresh");
-                        this._themeroller(data.inst.get_container().find("> ul > li"));
-                    }, this))
-                    .bind("open_node.jstree create_node.jstree", $.proxy(function (e, data) {
-                        this._themeroller(data.rslt.obj);
-                    }, this))
-                    .bind("loaded.jstree refresh.jstree", $.proxy(function (e) {
-                        this._themeroller();
-                    }, this))
-                    .bind("close_node.jstree", $.proxy(function (e, data) {
-                        this._themeroller(data.rslt.obj);
-                    }, this))
-                    .bind("delete_node.jstree", $.proxy(function (e, data) {
-                        this._themeroller(data.rslt.parent);
-                    }, this))
-                    .bind("correct_state.jstree", $.proxy(function (e, data) {
-                        data.rslt.obj
-                            .children("ins.jstree-icon").removeClass(s.opened + " " + s.closed + " ui-icon").end()
-                            .find("> a > ins.ui-icon")
-                            .filter(function () {
-                                return this.className.toString()
-                                        .replace(s.item_clsd, "").replace(s.item_open, "").replace(s.item_leaf, "")
-                                        .indexOf("ui-icon-") === -1;
-                            }).removeClass(s.item_open + " " + s.item_clsd).addClass(s.item_leaf || "jstree-no-icon");
-                    }, this))
-                    .bind("select_node.jstree", $.proxy(function (e, data) {
-                        data.rslt.obj.children("a").addClass(s.item_a);
-                    }, this))
-                    .bind("deselect_node.jstree deselect_all.jstree", $.proxy(function (e, data) {
-                        this.get_container()
-                            .find("a." + s.item_a).removeClass(s.item_a).end()
-                            .find("a.jstree-clicked").addClass(s.item_a);
-                    }, this))
-                    .bind("dehover_node.jstree", $.proxy(function (e, data) {
-                        data.rslt.obj.children("a").removeClass(s.item_h);
-                    }, this))
-                    .bind("hover_node.jstree", $.proxy(function (e, data) {
-                        this.get_container()
-                            .find("a." + s.item_h).not(data.rslt.obj).removeClass(s.item_h);
-                        data.rslt.obj.children("a").addClass(s.item_h);
-                    }, this))
-                    .bind("move_node.jstree", $.proxy(function (e, data) {
-                        this._themeroller(data.rslt.o);
-                        this._themeroller(data.rslt.op);
-                    }, this));
-            },
-            __destroy: function () {
-                var s = this._get_settings().themeroller,
-                    c = ["ui-icon"];
-                $.each(s, function (i, v) {
-                    v = v.split(" ");
-                    if (v.length) {
-                        c = c.concat(v);
-                    }
-                });
-                this.get_container()
-                    .removeClass("ui-widget-content")
-                    .find("." + c.join(", .")).removeClass(c.join(" "));
-            },
-            _fn: {
-                _themeroller: function (obj) {
-                    var s = this._get_settings().themeroller;
-                    obj = !obj || obj == -1 ? this.get_container_ul() : this._get_node(obj).parent();
-                    obj
-                        .find("li.jstree-closed")
-                        .children("ins.jstree-icon").removeClass(s.opened).addClass("ui-icon " + s.closed).end()
-                        .children("a").addClass(s.item)
-                        .children("ins.jstree-icon").addClass("ui-icon")
-                        .filter(function () {
-                            return this.className.toString()
-                                    .replace(s.item_clsd, "").replace(s.item_open, "").replace(s.item_leaf, "")
-                                    .indexOf("ui-icon-") === -1;
-                        }).removeClass(s.item_leaf + " " + s.item_open).addClass(s.item_clsd || "jstree-no-icon")
-                        .end()
-                        .end()
-                        .end()
-                        .end()
-                        .find("li.jstree-open")
-                        .children("ins.jstree-icon").removeClass(s.closed).addClass("ui-icon " + s.opened).end()
-                        .children("a").addClass(s.item)
-                        .children("ins.jstree-icon").addClass("ui-icon")
-                        .filter(function () {
-                            return this.className.toString()
-                                    .replace(s.item_clsd, "").replace(s.item_open, "").replace(s.item_leaf, "")
-                                    .indexOf("ui-icon-") === -1;
-                        }).removeClass(s.item_leaf + " " + s.item_clsd).addClass(s.item_open || "jstree-no-icon")
-                        .end()
-                        .end()
-                        .end()
-                        .end()
-                        .find("li.jstree-leaf")
-                        .children("ins.jstree-icon").removeClass(s.closed + " ui-icon " + s.opened).end()
-                        .children("a").addClass(s.item)
-                        .children("ins.jstree-icon").addClass("ui-icon")
-                        .filter(function () {
-                            return this.className.toString()
-                                    .replace(s.item_clsd, "").replace(s.item_open, "").replace(s.item_leaf, "")
-                                    .indexOf("ui-icon-") === -1;
-                        }).removeClass(s.item_clsd + " " + s.item_open).addClass(s.item_leaf || "jstree-no-icon");
-                }
-            },
-            defaults: {
-                "opened": "ui-icon-triangle-1-se",
-                "closed": "ui-icon-triangle-1-e",
-                "item": "ui-state-default",
-                "item_h": "ui-state-hover",
-                "item_a": "ui-state-active",
-                "item_open": "ui-icon-folder-open",
-                "item_clsd": "ui-icon-folder-collapsed",
-                "item_leaf": "ui-icon-document"
-            }
-        });
-        $(function () {
-            var css_string = '' +
-                '.jstree-themeroller .ui-icon { overflow:visible; } ' +
-                '.jstree-themeroller a { padding:0 2px; } ' +
-                '.jstree-themeroller .jstree-no-icon { display:none; }';
-            $.vakata.css.add_sheet({str: css_string, title: "jstree"});
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree unique plugin
-     * Forces different names amongst siblings (still a bit experimental)
-     * NOTE: does not check language versions (it will not be possible to have nodes with the same title, even in different languages)
-     */
-    (function ($) {
-        $.jstree.plugin("unique", {
-            __init: function () {
-                this.get_container()
-                    .bind("before.jstree", $.proxy(function (e, data) {
-                        var nms = [], res = true, p, t;
-                        if (data.func == "move_node") {
-                            // obj, ref, position, is_copy, is_prepared, skip_check
-                            if (data.args[4] === true) {
-                                if (data.args[0].o && data.args[0].o.length) {
-                                    data.args[0].o.children("a").each(function () {
-                                        nms.push($(this).text().replace(/^\s+/g, ""));
-                                    });
-                                    res = this._check_unique(nms, data.args[0].np.find("> ul > li").not(data.args[0].o), "move_node");
-                                }
-                            }
-                        }
-                        if (data.func == "create_node") {
-                            // obj, position, js, callback, is_loaded
-                            if (data.args[4] || this._is_loaded(data.args[0])) {
-                                p = this._get_node(data.args[0]);
-                                if (data.args[1] && (data.args[1] === "before" || data.args[1] === "after")) {
-                                    p = this._get_parent(data.args[0]);
-                                    if (!p || p === -1) {
-                                        p = this.get_container();
-                                    }
-                                }
-                                if (typeof data.args[2] === "string") {
-                                    nms.push(data.args[2]);
-                                }
-                                else if (!data.args[2] || !data.args[2].data) {
-                                    nms.push(this._get_string("new_node"));
-                                }
-                                else {
-                                    nms.push(data.args[2].data);
-                                }
-                                res = this._check_unique(nms, p.find("> ul > li"), "create_node");
-                            }
-                        }
-                        if (data.func == "rename_node") {
-                            // obj, val
-                            nms.push(data.args[1]);
-                            t = this._get_node(data.args[0]);
-                            p = this._get_parent(t);
-                            if (!p || p === -1) {
-                                p = this.get_container();
-                            }
-                            res = this._check_unique(nms, p.find("> ul > li").not(t), "rename_node");
-                        }
-                        if (!res) {
-                            e.stopPropagation();
-                            return false;
-                        }
-                    }, this));
-            },
-            defaults: {
-                error_callback: $.noop
-            },
-            _fn: {
-                _check_unique: function (nms, p, func) {
-                    var cnms = [];
-                    p.children("a").each(function () {
-                        cnms.push($(this).text().replace(/^\s+/g, ""));
-                    });
-                    if (!cnms.length || !nms.length) {
-                        return true;
-                    }
-                    cnms = cnms.sort().join(",,").replace(/(,|^)([^,]+)(,,\2)+(,|$)/g, "$1$2$4").replace(/,,+/g, ",").replace(/,$/, "").split(",");
-                    if ((cnms.length + nms.length) != cnms.concat(nms).sort().join(",,").replace(/(,|^)([^,]+)(,,\2)+(,|$)/g, "$1$2$4").replace(/,,+/g, ",").replace(/,$/, "").split(",").length) {
-                        this._get_settings().unique.error_callback.call(null, nms, p, func);
-                        return false;
-                    }
-                    return true;
-                },
-                check_move: function () {
-                    if (!this.__call_old()) {
-                        return false;
-                    }
-                    var p = this._get_move(), nms = [];
-                    if (p.o && p.o.length) {
-                        p.o.children("a").each(function () {
-                            nms.push($(this).text().replace(/^\s+/g, ""));
-                        });
-                        return this._check_unique(nms, p.np.find("> ul > li").not(p.o), "check_move");
-                    }
-                    return true;
-                }
-            }
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree wholerow plugin
-     * Makes select and hover work on the entire width of the node
-     * MAY BE HEAVY IN LARGE DOM
-     */
-    (function ($) {
-        $.jstree.plugin("wholerow", {
-            __init: function () {
-                if (!this.data.ui) {
-                    throw "jsTree wholerow: jsTree UI plugin not included.";
-                }
-                this.data.wholerow.html = false;
-                this.data.wholerow.to = false;
-                this.get_container()
-                    .bind("init.jstree", $.proxy(function (e, data) {
-                        this._get_settings().core.animation = 0;
-                    }, this))
-                    .bind("open_node.jstree create_node.jstree clean_node.jstree loaded.jstree", $.proxy(function (e, data) {
-                        this._prepare_wholerow_span(data && data.rslt && data.rslt.obj ? data.rslt.obj : -1);
-                    }, this))
-                    .bind("search.jstree clear_search.jstree reopen.jstree after_open.jstree after_close.jstree create_node.jstree delete_node.jstree clean_node.jstree", $.proxy(function (e, data) {
-                        if (this.data.to) {
-                            clearTimeout(this.data.to);
-                        }
-                        this.data.to = setTimeout((function (t, o) {
-                            return function () {
-                                t._prepare_wholerow_ul(o);
-                            };
-                        })(this, data && data.rslt && data.rslt.obj ? data.rslt.obj : -1), 0);
-                    }, this))
-                    .bind("deselect_all.jstree", $.proxy(function (e, data) {
-                        this.get_container().find(" > .jstree-wholerow .jstree-clicked").removeClass("jstree-clicked " + (this.data.themeroller ? this._get_settings().themeroller.item_a : "" ));
-                    }, this))
-                    .bind("select_node.jstree deselect_node.jstree ", $.proxy(function (e, data) {
-                        data.rslt.obj.each(function () {
-                            var ref = data.inst.get_container().find(" > .jstree-wholerow li:visible:eq(" + ( parseInt((($(this).offset().top - data.inst.get_container().offset().top + data.inst.get_container()[0].scrollTop) / data.inst.data.core.li_height), 10)) + ")");
-                            // ref.children("a")[e.type === "select_node" ? "addClass" : "removeClass"]("jstree-clicked");
-                            ref.children("a").attr("class", data.rslt.obj.children("a").attr("class"));
-                        });
-                    }, this))
-                    .bind("hover_node.jstree dehover_node.jstree", $.proxy(function (e, data) {
-                        this.get_container().find(" > .jstree-wholerow .jstree-hovered").removeClass("jstree-hovered " + (this.data.themeroller ? this._get_settings().themeroller.item_h : "" ));
-                        if (e.type === "hover_node") {
-                            var ref = this.get_container().find(" > .jstree-wholerow li:visible:eq(" + ( parseInt(((data.rslt.obj.offset().top - this.get_container().offset().top + this.get_container()[0].scrollTop) / this.data.core.li_height), 10)) + ")");
-                            // ref.children("a").addClass("jstree-hovered");
-                            ref.children("a").attr("class", data.rslt.obj.children(".jstree-hovered").attr("class"));
-                        }
-                    }, this))
-                    .delegate(".jstree-wholerow-span, ins.jstree-icon, li", "click.jstree", function (e) {
-                        var n = $(e.currentTarget);
-                        if (e.target.tagName === "A" || (e.target.tagName === "INS" && n.closest("li").is(".jstree-open, .jstree-closed"))) {
-                            return;
-                        }
-                        n.closest("li").children("a:visible:eq(0)").click();
-                        e.stopImmediatePropagation();
-                    })
-                    .delegate("li", "mouseover.jstree", $.proxy(function (e) {
-                        e.stopImmediatePropagation();
-                        if ($(e.currentTarget).children(".jstree-hovered, .jstree-clicked").length) {
-                            return false;
-                        }
-                        this.hover_node(e.currentTarget);
-                        return false;
-                    }, this))
-                    .delegate("li", "mouseleave.jstree", $.proxy(function (e) {
-                        if ($(e.currentTarget).children("a").hasClass("jstree-hovered").length) {
-                            return;
-                        }
-                        this.dehover_node(e.currentTarget);
-                    }, this));
-                if (is_ie7 || is_ie6) {
-                    $.vakata.css.add_sheet({
-                        str: ".jstree-" + this.get_index() + " { position:relative; } ",
-                        title: "jstree"
-                    });
-                }
-            },
-            defaults: {},
-            __destroy: function () {
-                this.get_container().children(".jstree-wholerow").remove();
-                this.get_container().find(".jstree-wholerow-span").remove();
-            },
-            _fn: {
-                _prepare_wholerow_span: function (obj) {
-                    obj = !obj || obj == -1 ? this.get_container().find("> ul > li") : this._get_node(obj);
-                    if (obj === false) {
-                        return;
-                    } // added for removing root nodes
-                    obj.each(function () {
-                        $(this).find("li").andSelf().each(function () {
-                            var $t = $(this);
-                            if ($t.children(".jstree-wholerow-span").length) {
-                                return true;
-                            }
-                            $t.prepend("<span class='jstree-wholerow-span' style='width:" + ($t.parentsUntil(".jstree", "li").length * 18) + "px;'>&#160;</span>");
-                        });
-                    });
-                },
-                _prepare_wholerow_ul: function () {
-                    var o = this.get_container().children("ul").eq(0), h = o.html();
-                    o.addClass("jstree-wholerow-real");
-                    if (this.data.wholerow.last_html !== h) {
-                        this.data.wholerow.last_html = h;
-                        this.get_container().children(".jstree-wholerow").remove();
-                        this.get_container().append(
-                            o.clone().removeClass("jstree-wholerow-real")
-                                .wrapAll("<div class='jstree-wholerow' />").parent()
-                                .width(o.parent()[0].scrollWidth)
-                                .css("top", (o.height() + ( is_ie7 ? 5 : 0)) * -1)
-                                .find("li[id]").each(function () {
-                                this.removeAttribute("id");
-                            }).end()
-                        );
-                    }
-                }
-            }
-        });
-        $(function () {
-            var css_string = '' +
-                '.jstree .jstree-wholerow-real { position:relative; z-index:1; } ' +
-                '.jstree .jstree-wholerow-real li { cursor:pointer; } ' +
-                '.jstree .jstree-wholerow-real a { border-left-color:transparent !important; border-right-color:transparent !important; } ' +
-                '.jstree .jstree-wholerow { position:relative; z-index:0; height:0; } ' +
-                '.jstree .jstree-wholerow ul, .jstree .jstree-wholerow li { width:100%; } ' +
-                '.jstree .jstree-wholerow, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow li, .jstree .jstree-wholerow a { margin:0 !important; padding:0 !important; } ' +
-                '.jstree .jstree-wholerow, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow li { background:transparent !important; }' +
-                '.jstree .jstree-wholerow ins, .jstree .jstree-wholerow span, .jstree .jstree-wholerow input { display:none !important; }' +
-                '.jstree .jstree-wholerow a, .jstree .jstree-wholerow a:hover { text-indent:-9999px; !important; width:100%; padding:0 !important; border-right-width:0px !important; border-left-width:0px !important; } ' +
-                '.jstree .jstree-wholerow-span { position:absolute; left:0; margin:0px; padding:0; height:18px; border-width:0; padding:0; z-index:0; }';
-            if (is_ff2) {
-                css_string += '' +
-                    '.jstree .jstree-wholerow a { display:block; height:18px; margin:0; padding:0; border:0; } ' +
-                    '.jstree .jstree-wholerow-real a { border-color:transparent !important; } ';
-            }
-            if (is_ie7 || is_ie6) {
-                css_string += '' +
-                    '.jstree .jstree-wholerow, .jstree .jstree-wholerow li, .jstree .jstree-wholerow ul, .jstree .jstree-wholerow a { margin:0; padding:0; line-height:18px; } ' +
-                    '.jstree .jstree-wholerow a { display:block; height:18px; line-height:18px; overflow:hidden; } ';
-            }
-            $.vakata.css.add_sheet({str: css_string, title: "jstree"});
-        });
-    })(jQuery);
-//*/
-
-    /*
-     * jsTree model plugin
-     * This plugin gets jstree to use a class model to retrieve data, creating great dynamism
-     */
-    (function ($) {
-        var nodeInterface = ["getChildren", "getChildrenCount", "getAttr", "getName", "getProps"],
-            validateInterface = function (obj, inter) {
-                var valid = true;
-                obj = obj || {};
-                inter = [].concat(inter);
-                $.each(inter, function (i, v) {
-                    if (!$.isFunction(obj[v])) {
-                        valid = false;
-                        return false;
-                    }
-                });
-                return valid;
-            };
-        $.jstree.plugin("model", {
-            __init: function () {
-                if (!this.data.json_data) {
-                    throw "jsTree model: jsTree json_data plugin not included.";
-                }
-                this._get_settings().json_data.data = function (n, b) {
-                    var obj = (n == -1) ? this._get_settings().model.object : n.data("jstree_model");
-                    if (!validateInterface(obj, nodeInterface)) {
-                        return b.call(null, false);
-                    }
-                    if (this._get_settings().model.async) {
-                        obj.getChildren($.proxy(function (data) {
-                            this.model_done(data, b);
-                        }, this));
-                    }
-                    else {
-                        this.model_done(obj.getChildren(), b);
-                    }
-                };
-            },
-            defaults: {
-                object: false,
-                id_prefix: false,
-                async: false
-            },
-            _fn: {
-                model_done: function (data, callback) {
-                    var ret = [],
-                        s = this._get_settings(),
-                        _this = this;
-
-                    if (!$.isArray(data)) {
-                        data = [data];
-                    }
-                    $.each(data, function (i, nd) {
-                        var r = nd.getProps() || {};
-                        r.attr = nd.getAttr() || {};
-                        if (nd.getChildrenCount()) {
-                            r.state = "closed";
-                        }
-                        r.data = nd.getName();
-                        if (!$.isArray(r.data)) {
-                            r.data = [r.data];
-                        }
-                        if (_this.data.types && $.isFunction(nd.getType)) {
-                            r.attr[s.types.type_attr] = nd.getType();
-                        }
-                        if (r.attr.id && s.model.id_prefix) {
-                            r.attr.id = s.model.id_prefix + r.attr.id;
-                        }
-                        if (!r.metadata) {
-                            r.metadata = {};
-                        }
-                        r.metadata.jstree_model = nd;
-                        ret.push(r);
-                    });
-                    callback.call(null, ret);
-                }
-            }
-        });
-    })(jQuery);
-//*/
-
-})();
\ No newline at end of file
Index: DMS/templates/DMS/try_jstree.html
===================================================================
--- DMS/templates/DMS/try_jstree.html	(revision bc68b351b9f9b801928a41147abff436c769539b)
+++ DMS/templates/DMS/try_jstree.html	(revision bc68b351b9f9b801928a41147abff436c769539b)
@@ -1,22 +0,0 @@
-<div class="well" id="jstree">
-    <ul>
-        <li data-jstree="{ 'opened':true }">Root node 1
-            <ul>
-                <li>Child node 1</li>
-                ...
-            </ul>
-        </li>
-        ...
-    </ul>
-</div>
-
-$('#jstree-sample').jstree({
-"plugins": ["types"],
-"types": {
-"default" : {
-"icon": false,
-"draggable": false,
-"clickable": false
-}
-}
-});
\ No newline at end of file
Index: DMS/templates/DMS/treejs.html
===================================================================
--- DMS/templates/DMS/treejs.html	(revision bc68b351b9f9b801928a41147abff436c769539b)
+++ DMS/templates/DMS/treejs.html	(revision bc68b351b9f9b801928a41147abff436c769539b)
@@ -1,30 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <title>Title</title>
-</head>
-<body>
-<div class="well" id="jstree">
-    <ul>
-        <li data-jstree="{ 'opened':true }">Root node 1
-            <ul>
-                <li>Child node 1</li>
-            </ul>
-        </li>
-
-    </ul>
-</div>
-
-$('#jstree').jstree({
-"plugins": ["types"],
-"types": {
-"default" : {
-"icon": false,
-"draggable": false,
-"clickable": false
-}
-}
-});
-</body>
-</html>
\ No newline at end of file
Index: DMS/templates/DMS/tree.html
===================================================================
--- DMS/templates/DMS/tree.html	(revision bc68b351b9f9b801928a41147abff436c769539b)
+++ DMS/templates/DMS/tree.html	(revision bc68b351b9f9b801928a41147abff436c769539b)
@@ -1,37 +0,0 @@
-<link rel="stylesheet"
-      href="http://www.orangehilldev.com/jstree-bootstrap-theme/demo/assets/dist/themes/proton/style.css"/>
-
-<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
-
-
-<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/jstree/3.0.9/themes/default/style.min.css"/>
-
-
-<script src="//cdnjs.cloudflare.com/ajax/libs/jstree/3.0.9/jstree.min.js"></script>
-
-
-<div id="container">
-    <ul>
-        <li>Root node
-            <ul>
-                <li>Child node 1</li>
-                <li>Child node 2</li>
-            </ul>
-        </li>
-    </ul>
-</div>
-
-
-<script>
-    $(function () {
-        $('#container').jstree({
-            'core': {
-                'themes': {
-                    'name': 'proton',
-                    'responsive': true
-                }
-            },
-            "plugins": ["contextmenu"]
-        });
-    });
-</script>
\ No newline at end of file
Index: DMS/templates/DMS/tree.js
===================================================================
--- DMS/templates/DMS/tree.js	(revision bc68b351b9f9b801928a41147abff436c769539b)
+++ DMS/templates/DMS/tree.js	(revision bc68b351b9f9b801928a41147abff436c769539b)
@@ -1,20 +0,0 @@
-/**
- * Created by livia on 6/13/2017.
- */
-$(document).ready(function () {
-    $('#data').jstree({
-        "plugins": ["checkbox"]
-    });
-    $("#data").on("changed.jstree", function (e, data) {
-        if (data.selected.length) {
-
-            $(data.selected).each(function (idx) {
-                var node = data.instance._get_node(data.selected[idx]);
-                console.log('the selected node is:' + node.text);
-            });
-        }
-
-    });
-
-});
-0;
\ No newline at end of file
Index: DMS/templates/DMS/jquery.js
===================================================================
--- DMS/templates/DMS/jquery.js	(revision bc68b351b9f9b801928a41147abff436c769539b)
+++ DMS/templates/DMS/jquery.js	(revision bc68b351b9f9b801928a41147abff436c769539b)
@@ -1,18 +0,0 @@
-/*!
- * jQuery JavaScript Library v1.6.2
- * http://jquery.com/
- *
- * Copyright 2011, John Resig
- * Dual licensed under the MIT or GPL Version 2 licenses.
- * http://jquery.org/license
- *
- * Includes Sizzle.js
- * http://sizzlejs.com/
- * Copyright 2011, The Dojo Foundation
- * Released under the MIT, BSD, and GPL Licenses.
- *
- * Date: Thu Jun 30 14:16:56 2011 -0400
- */
-(function(a,b){function cv(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cs(a){if(!cg[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){ch||(ch=c.createElement("iframe"),ch.frameBorder=ch.width=ch.height=0),b.appendChild(ch);if(!ci||!ch.createElement)ci=(ch.contentWindow||ch.contentDocument).document,ci.write((c.compatMode==="CSS1Compat"?"<!doctype html>":"")+"<html><body>"),ci.close();d=ci.createElement(a),ci.body.appendChild(d),e=f.css(d,"display"),b.removeChild(ch)}cg[a]=e}return cg[a]}function cr(a,b){var c={};f.each(cm.concat.apply([],cm.slice(0,b)),function(){c[this]=a});return c}function cq(){cn=b}function cp(){setTimeout(cq,0);return cn=f.now()}function cf(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ce(){try{return new a.XMLHttpRequest}catch(b){}}function b$(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function bZ(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function bY(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bC.test(a)?d(a,e):bY(a+"["+(typeof e=="object"||f.isArray(e)?b:"")+"]",e,c,d)});else if(!c&&b!=null&&typeof b=="object")for(var e in b)bY(a+"["+e+"]",b[e],c,d);else d(a,b)}function bX(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bR,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=bX(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=bX(a,c,d,e,"*",g));return l}function bW(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bN),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bA(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?bv:bw;if(d>0){c!=="border"&&f.each(e,function(){c||(d-=parseFloat(f.css(a,"padding"+this))||0),c==="margin"?d+=parseFloat(f.css(a,c+this))||0:d-=parseFloat(f.css(a,"border"+this+"Width"))||0});return d+"px"}d=bx(a,b,b);if(d<0||d==null)d=a.style[b]||0;d=parseFloat(d)||0,c&&f.each(e,function(){d+=parseFloat(f.css(a,"padding"+this))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+this+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+this))||0)});return d+"px"}function bm(a,b){b.src?f.ajax({url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(be,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)}function bl(a){f.nodeName(a,"input")?bk(a):"getElementsByTagName"in a&&f.grep(a.getElementsByTagName("input"),bk)}function bk(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bj(a){return"getElementsByTagName"in a?a.getElementsByTagName("*"):"querySelectorAll"in a?a.querySelectorAll("*"):[]}function bi(a,b){var c;if(b.nodeType===1){b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase();if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(f.expando)}}function bh(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c=f.expando,d=f.data(a),e=f.data(b,d);if(d=d[c]){var g=d.events;e=e[c]=f.extend({},d);if(g){delete e.handle,e.events={};for(var h in g)for(var i=0,j=g[h].length;i<j;i++)f.event.add(b,h+(g[h][i].namespace?".":"")+g[h][i].namespace,g[h][i],g[h][i].data)}}}}function bg(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function W(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(R.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function V(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function N(a,b){return(a&&a!=="*"?a+".":"")+b.replace(z,"`").replace(A,"&")}function M(a){var b,c,d,e,g,h,i,j,k,l,m,n,o,p=[],q=[],r=f._data(this,"events");if(!(a.liveFired===this||!r||!r.live||a.target.disabled||a.button&&a.type==="click")){a.namespace&&(n=new RegExp("(^|\\.)"+a.namespace.split(".").join("\\.(?:.*\\.)?")+"(\\.|$)")),a.liveFired=this;var s=r.live.slice(0);for(i=0;i<s.length;i++)g=s[i],g.origType.replace(x,"")===a.type?q.push(g.selector):s.splice(i--,1);e=f(a.target).closest(q,a.currentTarget);for(j=0,k=e.length;j<k;j++){m=e[j];for(i=0;i<s.length;i++){g=s[i];if(m.selector===g.selector&&(!n||n.test(g.namespace))&&!m.elem.disabled){h=m.elem,d=null;if(g.preType==="mouseenter"||g.preType==="mouseleave")a.type=g.preType,d=f(a.relatedTarget).closest(g.selector)[0],d&&f.contains(h,d)&&(d=h);(!d||d!==h)&&p.push({elem:h,handleObj:g,level:m.level})}}}for(j=0,k=p.length;j<k;j++){e=p[j];if(c&&e.level>c)break;a.currentTarget=e.elem,a.data=e.handleObj.data,a.handleObj=e.handleObj,o=e.handleObj.origHandler.apply(e.elem,arguments);if(o===!1||a.isPropagationStopped()){c=e.level,o===!1&&(b=!1);if(a.isImmediatePropagationStopped())break}}return b}}function K(a,c,d){var e=f.extend({},d[0]);e.type=a,e.originalEvent={},e.liveFired=b,f.event.handle.call(c,e),e.isDefaultPrevented()&&d[0].preventDefault()}function E(){return!0}function D(){return!1}function m(a,c,d){var e=c+"defer",g=c+"queue",h=c+"mark",i=f.data(a,e,b,!0);i&&(d==="queue"||!f.data(a,g,b,!0))&&(d==="mark"||!f.data(a,h,b,!0))&&setTimeout(function(){!f.data(a,g,b,!0)&&!f.data(a,h,b,!0)&&(f.removeData(a,e,!0),i.resolve())},0)}function l(a){for(var b in a)if(b!=="toJSON")return!1;return!0}function k(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(j,"$1-$2").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNaN(d)?i.test(d)?f.parseJSON(d):d:parseFloat(d)}catch(g){}f.data(a,c,d)}else d=b}return d}var c=a.document,d=a.navigator,e=a.location,f=function(){function J(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(J,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/\d/,n=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,o=/^[\],:{}\s]*$/,p=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,q=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,r=/(?:^|:|,)(?:\s*\[)+/g,s=/(webkit)[ \/]([\w.]+)/,t=/(opera)(?:.*version)?[ \/]([\w.]+)/,u=/(msie) ([\w.]+)/,v=/(mozilla)(?:.*? rv:([\w.]+))?/,w=/-([a-z])/ig,x=function(a,b){return b.toUpperCase()},y=d.userAgent,z,A,B,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,E=Array.prototype.push,F=Array.prototype.slice,G=String.prototype.trim,H=Array.prototype.indexOf,I={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=n.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.6.2",length:0,size:function(){return this.length},toArray:function(){return F.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?E.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),A.done(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(F.apply(this,arguments),"slice",F.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:E,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;A.resolveWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").unbind("ready")}},bindReady:function(){if(!A){A=e._Deferred();if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",B,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",B),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&J()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a&&typeof a=="object"&&"setInterval"in a},isNaN:function(a){return a==null||!m.test(a)||isNaN(a)},type:function(a){return a==null?String(a):I[C.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;if(a.constructor&&!D.call(a,"constructor")&&!D.call(a.constructor.prototype,"isPrototypeOf"))return!1;var c;for(c in a);return c===b||D.call(a,c)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw a},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(o.test(b.replace(p,"@").replace(q,"]").replace(r,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(b,c,d){a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b)),d=c.documentElement,(!d||!d.nodeName||d.nodeName==="parsererror")&&e.error("Invalid XML: "+b);return c},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(w,x)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:G?function(a){return a==null?"":G.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?E.call(c,a):e.merge(c,a)}return c},inArray:function(a,b){if(H)return H.call(b,a);for(var c=0,d=b.length;c<d;c++)if(b[c]===a)return c;return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=F.call(arguments,2),g=function(){return a.apply(c,f.concat(F.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h){var i=a.length;if(typeof c=="object"){for(var j in c)e.access(a,j,c[j],f,g,d);return a}if(d!==b){f=!h&&f&&e.isFunction(d);for(var k=0;k<i;k++)g(a[k],c,f?d.call(a[k],k,g(a[k],c)):d,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=s.exec(a)||t.exec(a)||u.exec(a)||a.indexOf("compatible")<0&&v.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){I["[object "+b+"]"]=b.toLowerCase()}),z=e.uaMatch(y),z.browser&&(e.browser[z.browser]=!0,e.browser.version=z.version),e.browser.webkit&&(e.browser.safari=!0),j.test(" ")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?B=function(){c.removeEventListener("DOMContentLoaded",B,!1),e.ready()}:c.attachEvent&&(B=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",B),e.ready())});return e}(),g="done fail isResolved isRejected promise then always pipe".split(" "),h=[].slice;f.extend({_Deferred:function(){var a=[],b,c,d,e={done:function(){if(!d){var c=arguments,g,h,i,j,k;b&&(k=b,b=0);for(g=0,h=c.length;g<h;g++)i=c[g],j=f.type(i),j==="array"?e.done.apply(e,i):j==="function"&&a.push(i);k&&e.resolveWith(k[0],k[1])}return this},resolveWith:function(e,f){if(!d&&!b&&!c){f=f||[],c=1;try{while(a[0])a.shift().apply(e,f)}finally{b=[e,f],c=0}}return this},resolve:function(){e.resolveWith(this,arguments);return this},isResolved:function(){return!!c||!!b},cancel:function(){d=1,a=[];return this}};return e},Deferred:function(a){var b=f._Deferred(),c=f._Deferred(),d;f.extend(b,{then:function(a,c){b.done(a).fail(c);return this},always:function(){return b.done.apply(b,arguments).fail.apply(this,arguments)},fail:c.done,rejectWith:c.resolveWith,reject:c.resolve,isRejected:c.isResolved,pipe:function(a,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[c,"reject"]},function(a,c){var e=c[0],g=c[1],h;f.isFunction(e)?b[a](function(){h=e.apply(this,arguments),h&&f.isFunction(h.promise)?h.promise().then(d.resolve,d.reject):d[g](h)}):b[a](d[g])})}).promise()},promise:function(a){if(a==null){if(d)return d;d=a={}}var c=g.length;while(c--)a[g[c]]=b[g[c]];return a}}),b.done(c.cancel).fail(b.cancel),delete b.cancel,a&&a.call(b,b);return b},when:function(a){function i(a){return function(c){b[a]=arguments.length>1?h.call(arguments,0):c,--e||g.resolveWith(g,h.call(b,0))}}var b=arguments,c=0,d=b.length,e=d,g=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred();if(d>1){for(;c<d;c++)b[c]&&f.isFunction(b[c].promise)?b[c].promise().then(i(c),g.reject):--e;e||g.resolveWith(g,b)}else g!==a&&g.resolveWith(g,d?[a]:[]);return g.promise()}}),f.support=function(){var a=c.createElement("div"),b=c.documentElement,d,e,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;a.setAttribute("className","t"),a.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",d=a.getElementsByTagName("*"),e=a.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=a.getElementsByTagName("input")[0],k={leadingWhitespace:a.firstChild.nodeType===3,tbody:!a.getElementsByTagName("tbody").length,htmlSerialize:!!a.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55$/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:a.className!=="t",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0},i.checked=!0,k.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,k.optDisabled=!h.disabled;try{delete a.test}catch(v){k.deleteExpando=!1}!a.addEventListener&&a.attachEvent&&a.fireEvent&&(a.attachEvent("onclick",function(){k.noCloneEvent=!1}),a.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),k.radioValue=i.value==="t",i.setAttribute("checked","checked"),a.appendChild(i),l=c.createDocumentFragment(),l.appendChild(a.firstChild),k.checkClone=l.cloneNode(!0).cloneNode(!0).lastChild.checked,a.innerHTML="",a.style.width=a.style.paddingLeft="1px",m=c.getElementsByTagName("body")[0],o=c.createElement(m?"div":"body"),p={visibility:"hidden",width:0,height:0,border:0,margin:0},m&&f.extend(p,{position:"absolute",left:-1e3,top:-1e3});for(t in p)o.style[t]=p[t];o.appendChild(a),n=m||b,n.insertBefore(o,n.firstChild),k.appendChecked=i.checked,k.boxModel=a.offsetWidth===2,"zoom"in a.style&&(a.style.display="inline",a.style.zoom=1,k.inlineBlockNeedsLayout=a.offsetWidth===2,a.style.display="",a.innerHTML="<div style='width:4px;'></div>",k.shrinkWrapBlocks=a.offsetWidth!==2),a.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>",q=a.getElementsByTagName("td"),u=q[0].offsetHeight===0,q[0].style.display="",q[1].style.display="none",k.reliableHiddenOffsets=u&&q[0].offsetHeight===0,a.innerHTML="",c.defaultView&&c.defaultView.getComputedStyle&&(j=c.createElement("div"),j.style.width="0",j.style.marginRight="0",a.appendChild(j),k.reliableMarginRight=(parseInt((c.defaultView.getComputedStyle(j,null)||{marginRight:0}).marginRight,10)||0)===0),o.innerHTML="",n.removeChild(o);if(a.attachEvent)for(t in{submit:1,change:1,focusin:1})s="on"+t,u=s in a,u||(a.setAttribute(s,"return;"),u=typeof a[s]=="function"),k[t+"Bubbles"]=u;o=l=g=h=m=j=a=i=null;return k}(),f.boxModel=f.support.boxModel;var i=/^(?:\{.*\}|\[.*\])$/,j=/([a-z])([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!l(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g=f.expando,h=typeof c=="string",i,j=a.nodeType,k=j?f.cache:a,l=j?a[f.expando]:a[f.expando]&&f.expando;if((!l||e&&l&&!k[l][g])&&h&&d===b)return;l||(j?a[f.expando]=l=++f.uuid:l=f.expando),k[l]||(k[l]={},j||(k[l].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?k[l][g]=f.extend(k[l][g],c):k[l]=f.extend(k[l],c);i=k[l],e&&(i[g]||(i[g]={}),i=i[g]),d!==b&&(i[f.camelCase(c)]=d);if(c==="events"&&!i[c])return i[g]&&i[g].events;return h?i[f.camelCase(c)]||i[c]:i}},removeData:function(b,c,d){if(!!f.acceptData(b)){var e=f.expando,g=b.nodeType,h=g?f.cache:b,i=g?b[f.expando]:f.expando;if(!h[i])return;if(c){var j=d?h[i][e]:h[i];if(j){delete j[c];if(!l(j))return}}if(d){delete h[i][e];if(!l(h[i]))return}var k=h[i][e];f.support.deleteExpando||h!=a?delete h[i]:h[i]=null,k?(h[i]={},g||(h[i].toJSON=f.noop),h[i][e]=k):g&&(f.support.deleteExpando?delete b[f.expando]:b.removeAttribute?b.removeAttribute(f.expando):b[f.expando]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d=null;if(typeof a=="undefined"){if(this.length){d=f.data(this[0]);if(this[0].nodeType===1){var e=this[0].attributes,g;for(var h=0,i=e.length;h<i;h++)g=e[h].name,g.indexOf("data-")===0&&(g=f.camelCase(g.substring(5)),k(this[0],g,d[g]))}}return d}if(typeof a=="object")return this.each(function(){f.data(this,a)});var j=a.split(".");j[1]=j[1]?"."+j[1]:"";if(c===b){d=this.triggerHandler("getData"+j[1]+"!",[j[0]]),d===b&&this.length&&(d=f.data(this[0],a),d=k(this[0],a,d));return d===b&&j[1]?this.data(j[0]):d}return this.each(function(){var b=f(this),d=[j[0],c];b.triggerHandler("setData"+j[1]+"!",d),f.data(this,a,c),b.triggerHandler("changeData"+j[1]+"!",d)})},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,c){a&&(c=(c||"fx")+"mark",f.data(a,c,(f.data(a,c,b,!0)||0)+1,!0))},_unmark:function(a,c,d){a!==!0&&(d=c,c=a,a=!1);if(c){d=d||"fx";var e=d+"mark",g=a?0:(f.data(c,e,b,!0)||1)-1;g?f.data(c,e,g,!0):(f.removeData(c,e,!0),m(c,d,"mark"))}},queue:function(a,c,d){if(a){c=(c||"fx")+"queue";var e=f.data(a,c,b,!0);d&&(!e||f.isArray(d)?e=f.data(a,c,f.makeArray(d),!0):e.push(d));return e||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e;d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),d.call(a,function(){f.dequeue(a,b)})),c.length||(f.removeData(a,b+"queue",!0),m(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){typeof a!="string"&&(c=a,a="fx");if(c===b)return f.queue(this[0],a);return this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(){var c=this;setTimeout(function(){f.dequeue(c,b)},a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f._Deferred(),!0))h++,l.done(m);m();return d.promise()}});var n=/[\n\t\r]/g,o=/\s+/,p=/\r/g,q=/^(?:button|input)$/i,r=/^(?:button|input|object|select|textarea)$/i,s=/^a(?:rea)?$/i,t=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,u=/\:|^on/,v,w;f.fn.extend({attr:function(a,b){return f.access(this,a,b,!0,f.attr)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,a,b,!0,f.prop)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(o);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(o);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(n," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(o);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ";for(var c=0,d=this.length;c<d;c++)if((" "+this[c].className+" ").replace(n," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e=this[0];if(!arguments.length){if(e){c=f.valHooks[e.nodeName.toLowerCase()]||f.valHooks[e.type];if(c&&"get"in c&&(d=c.get(e,"value"))!==b)return d;d=e.value;return typeof d=="string"?d.replace(p,""):d==null?"":d}return b}var g=f.isFunction(a);return this.each(function(d){var e=f(this),h;if(this.nodeType===1){g?h=a.call(this,d,e.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.nodeName.toLowerCase()]||f.valHooks[this.type];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c=a.selectedIndex,d=[],e=a.options,g=a.type==="select-one";if(c<0)return null;for(var h=g?c:0,i=g?c+1:e.length;h<i;h++){var j=e[h];if(j.selected&&(f.support.optDisabled?!j.disabled:j.getAttribute("disabled")===null)&&(!j.parentNode.disabled||!f.nodeName(j.parentNode,"optgroup"))){b=f(j).val();if(g)return b;d.push(b)}}if(g&&!d.length&&e.length)return f(e[c]).val();return d},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attrFix:{tabindex:"tabIndex"},attr:function(a,c,d,e){var g=a.nodeType;if(!a||g===3||g===8||g===2)return b;if(e&&c in f.attrFn)return f(a)[c](d);if(!("getAttribute"in a))return f.prop(a,c,d);var h,i,j=g!==1||!f.isXMLDoc(a);j&&(c=f.attrFix[c]||c,i=f.attrHooks[c],i||(t.test(c)?i=w:v&&c!=="className"&&(f.nodeName(a,"form")||u.test(c))&&(i=v)));if(d!==b){if(d===null){f.removeAttr(a,c);return b}if(i&&"set"in i&&j&&(h=i.set(a,d,c))!==b)return h;a.setAttribute(c,""+d);return d}if(i&&"get"in i&&j&&(h=i.get(a,c))!==null)return h;h=a.getAttribute(c);return h===null?b:h},removeAttr:function(a,b){var c;a.nodeType===1&&(b=f.attrFix[b]||b,f.support.getSetAttribute?a.removeAttribute(b):(f.attr(a,b,""),a.removeAttributeNode(a.getAttributeNode(b))),t.test(b)&&(c=f.propFix[b]||b)in a&&(a[c]=!1))},attrHooks:{type:{set:function(a,b){if(q.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},tabIndex:{get:function(a){var c=a.getAttributeNode("tabIndex");return c&&c.specified?parseInt(c.value,10):r.test(a.nodeName)||s.test(a.nodeName)&&a.href?0:b}},value:{get:function(a,b){if(v&&f.nodeName(a,"button"))return v.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(v&&f.nodeName(a,"button"))return v.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e=a.nodeType;if(!a||e===3||e===8||e===2)return b;var g,h,i=e!==1||!f.isXMLDoc(a);i&&(c=f.propFix[c]||c,h=f.propHooks[c]);return d!==b?h&&"set"in h&&(g=h.set(a,d,c))!==b?g:a[c]=d:h&&"get"in h&&(g=h.get(a,c))!==b?g:a[c]},propHooks:{}}),w={get:function(a,c){return f.prop(a,c)?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},f.support.getSetAttribute||(f.attrFix=f.propFix,v=f.attrHooks.name=f.attrHooks.title=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&d.nodeValue!==""?d.nodeValue:b},set:function(a,b,c){var d=a.getAttributeNode(c);if(d){d.nodeValue=b;return b}}},f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})})),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}})),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var x=/\.(.*)$/,y=/^(?:textarea|input|select)$/i,z=/\./g,A=/ /g,B=/[^\w\s.|`]/g,C=function(a){return a.replace(B,"\\$&")};f.event={add:function(a,c,d,e){if(a.nodeType!==3&&a.nodeType!==8){if(d===!1)d=D;else if(!d)return;var g,h;d.handler&&(g=d,d=g.handler),d.guid||(d.guid=f.guid++);var i=f._data(a);if(!i)return;var j=i.events,k=i.handle;j||(i.events=j={}),k||(i.handle=k=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.handle.apply(k.elem,arguments):b}),k.elem=a,c=c.split(" ");var l,m=0,n;while(l=c[m++]){h=g?f.extend({},g):{handler:d,data:e},l.indexOf(".")>-1?(n=l.split("."),l=n.shift(),h.namespace=n.slice(0).sort().join(".")):(n=[],h.namespace=""),h.type=l,h.guid||(h.guid=d.guid);var o=j[l],p=f.event.special[l]||{};if(!o){o=j[l]=[];if(!p.setup||p.setup.call(a,e,n,k)===!1)a.addEventListener?a.addEventListener(l,k,!1):a.attachEvent&&a.attachEvent("on"+l,k)}p.add&&(p.add.call(a,h),h.handler.guid||(h.handler.guid=d.guid)),o.push(h),f.event.global[l]=!0}a=null}},global:{},remove:function(a,c,d,e){if(a.nodeType!==3&&a.nodeType!==8){d===!1&&(d=D);var g,h,i,j,k=0,l,m,n,o,p,q,r,s=f.hasData(a)&&f._data(a),t=s&&s.events;if(!s||!t)return;c&&c.type&&(d=c.handler,c=c.type);if(!c||typeof c=="string"&&c.charAt(0)==="."){c=c||"";for(h in t)f.event.remove(a,h+c);return}c=c.split(" ");while(h=c[k++]){r=h,q=null,l=h.indexOf(".")<0,m=[],l||(m=h.split("."),h=m.shift(),n=new RegExp("(^|\\.)"+f.map(m.slice(0).sort(),C).join("\\.(?:.*\\.)?")+"(\\.|$)")),p=t[h];if(!p)continue;if(!d){for(j=0;j<p.length;j++){q=p[j];if(l||n.test(q.namespace))f.event.remove(a,r,q.handler,j),p.splice(j--,1)}continue}o=f.event.special[h]||{};for(j=e||0;j<p.length;j++){q=p[j];if(d.guid===q.guid){if(l||n.test(q.namespace))e==null&&p.splice(j--,1),o.remove&&o.remove.call(a,q);if(e!=null)break}}if(p.length===0||e!=null&&p.length===1)(!o.teardown||o.teardown.call(a,m)===!1)&&f.removeEvent(a,h,s.handle),g=null,delete t[h]}if(f.isEmptyObject(t)){var u=s.handle;u&&(u.elem=null),delete s.events,delete s.handle,f.isEmptyObject(s)&&f.removeData(a,b,!0)}}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){var h=c.type||c,i=[],j;h.indexOf("!")>=0&&(h=h.slice(0,-1),j=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.
-shift(),i.sort());if(!!e&&!f.event.customEvent[h]||!!f.event.global[h]){c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.exclusive=j,c.namespace=i.join("."),c.namespace_re=new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)");if(g||!e)c.preventDefault(),c.stopPropagation();if(!e){f.each(f.cache,function(){var a=f.expando,b=this[a];b&&b.events&&b.events[h]&&f.event.trigger(c,d,b.handle.elem)});return}if(e.nodeType===3||e.nodeType===8)return;c.result=b,c.target=e,d=d!=null?f.makeArray(d):[],d.unshift(c);var k=e,l=h.indexOf(":")<0?"on"+h:"";do{var m=f._data(k,"handle");c.currentTarget=k,m&&m.apply(k,d),l&&f.acceptData(k)&&k[l]&&k[l].apply(k,d)===!1&&(c.result=!1,c.preventDefault()),k=k.parentNode||k.ownerDocument||k===c.target.ownerDocument&&a}while(k&&!c.isPropagationStopped());if(!c.isDefaultPrevented()){var n,o=f.event.special[h]||{};if((!o._default||o._default.call(e.ownerDocument,c)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)){try{l&&e[h]&&(n=e[l],n&&(e[l]=null),f.event.triggered=h,e[h]())}catch(p){}n&&(e[l]=n),f.event.triggered=b}}return c.result}},handle:function(c){c=f.event.fix(c||a.event);var d=((f._data(this,"events")||{})[c.type]||[]).slice(0),e=!c.exclusive&&!c.namespace,g=Array.prototype.slice.call(arguments,0);g[0]=c,c.currentTarget=this;for(var h=0,i=d.length;h<i;h++){var j=d[h];if(e||c.namespace_re.test(j.namespace)){c.handler=j.handler,c.data=j.data,c.handleObj=j;var k=j.handler.apply(this,g);k!==b&&(c.result=k,k===!1&&(c.preventDefault(),c.stopPropagation()));if(c.isImmediatePropagationStopped())break}}return c.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),fix:function(a){if(a[f.expando])return a;var d=a;a=f.Event(d);for(var e=this.props.length,g;e;)g=this.props[--e],a[g]=d[g];a.target||(a.target=a.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),!a.relatedTarget&&a.fromElement&&(a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement);if(a.pageX==null&&a.clientX!=null){var h=a.target.ownerDocument||c,i=h.documentElement,j=h.body;a.pageX=a.clientX+(i&&i.scrollLeft||j&&j.scrollLeft||0)-(i&&i.clientLeft||j&&j.clientLeft||0),a.pageY=a.clientY+(i&&i.scrollTop||j&&j.scrollTop||0)-(i&&i.clientTop||j&&j.clientTop||0)}a.which==null&&(a.charCode!=null||a.keyCode!=null)&&(a.which=a.charCode!=null?a.charCode:a.keyCode),!a.metaKey&&a.ctrlKey&&(a.metaKey=a.ctrlKey),!a.which&&a.button!==b&&(a.which=a.button&1?1:a.button&2?3:a.button&4?2:0);return a},guid:1e8,proxy:f.proxy,special:{ready:{setup:f.bindReady,teardown:f.noop},live:{add:function(a){f.event.add(this,N(a.origType,a.selector),f.extend({},a,{handler:M,guid:a.handler.guid}))},remove:function(a){f.event.remove(this,N(a.origType,a.selector),a)}},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}}},f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!this.preventDefault)return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?E:D):this.type=a,b&&f.extend(this,b),this.timeStamp=f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=E;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=E;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=E,this.stopPropagation()},isDefaultPrevented:D,isPropagationStopped:D,isImmediatePropagationStopped:D};var F=function(a){var b=a.relatedTarget,c=!1,d=a.type;a.type=a.data,b!==this&&(b&&(c=f.contains(this,b)),c||(f.event.handle.apply(this,arguments),a.type=d))},G=function(a){a.type=a.data,f.event.handle.apply(this,arguments)};f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]={setup:function(c){f.event.add(this,b,c&&c.selector?G:F,a)},teardown:function(a){f.event.remove(this,b,a&&a.selector?G:F)}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(a,b){if(!f.nodeName(this,"form"))f.event.add(this,"click.specialSubmit",function(a){var b=a.target,c=b.type;(c==="submit"||c==="image")&&f(b).closest("form").length&&K("submit",this,arguments)}),f.event.add(this,"keypress.specialSubmit",function(a){var b=a.target,c=b.type;(c==="text"||c==="password")&&f(b).closest("form").length&&a.keyCode===13&&K("submit",this,arguments)});else return!1},teardown:function(a){f.event.remove(this,".specialSubmit")}});if(!f.support.changeBubbles){var H,I=function(a){var b=a.type,c=a.value;b==="radio"||b==="checkbox"?c=a.checked:b==="select-multiple"?c=a.selectedIndex>-1?f.map(a.options,function(a){return a.selected}).join("-"):"":f.nodeName(a,"select")&&(c=a.selectedIndex);return c},J=function(c){var d=c.target,e,g;if(!!y.test(d.nodeName)&&!d.readOnly){e=f._data(d,"_change_data"),g=I(d),(c.type!=="focusout"||d.type!=="radio")&&f._data(d,"_change_data",g);if(e===b||g===e)return;if(e!=null||g)c.type="change",c.liveFired=b,f.event.trigger(c,arguments[1],d)}};f.event.special.change={filters:{focusout:J,beforedeactivate:J,click:function(a){var b=a.target,c=f.nodeName(b,"input")?b.type:"";(c==="radio"||c==="checkbox"||f.nodeName(b,"select"))&&J.call(this,a)},keydown:function(a){var b=a.target,c=f.nodeName(b,"input")?b.type:"";(a.keyCode===13&&!f.nodeName(b,"textarea")||a.keyCode===32&&(c==="checkbox"||c==="radio")||c==="select-multiple")&&J.call(this,a)},beforeactivate:function(a){var b=a.target;f._data(b,"_change_data",I(b))}},setup:function(a,b){if(this.type==="file")return!1;for(var c in H)f.event.add(this,c+".specialChange",H[c]);return y.test(this.nodeName)},teardown:function(a){f.event.remove(this,".specialChange");return y.test(this.nodeName)}},H=f.event.special.change.filters,H.focus=H.beforeactivate}f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){function e(a){var c=f.event.fix(a);c.type=b,c.originalEvent={},f.event.trigger(c,null,c.target),c.isDefaultPrevented()&&a.preventDefault()}var d=0;f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.each(["bind","one"],function(a,c){f.fn[c]=function(a,d,e){var g;if(typeof a=="object"){for(var h in a)this[c](h,d,a[h],e);return this}if(arguments.length===2||d===!1)e=d,d=b;c==="one"?(g=function(a){f(this).unbind(a,g);return e.apply(this,arguments)},g.guid=e.guid||f.guid++):g=e;if(a==="unload"&&c!=="one")this.one(a,d,e);else for(var i=0,j=this.length;i<j;i++)f.event.add(this[i],a,g,d);return this}}),f.fn.extend({unbind:function(a,b){if(typeof a=="object"&&!a.preventDefault)for(var c in a)this.unbind(c,a[c]);else for(var d=0,e=this.length;d<e;d++)f.event.remove(this[d],a,b);return this},delegate:function(a,b,c,d){return this.live(b,c,d,a)},undelegate:function(a,b,c){return arguments.length===0?this.unbind("live"):this.die(b,null,c,a)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f.data(this,"lastToggle"+a.guid)||0)%d;f.data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var L={focus:"focusin",blur:"focusout",mouseenter:"mouseover",mouseleave:"mouseout"};f.each(["live","die"],function(a,c){f.fn[c]=function(a,d,e,g){var h,i=0,j,k,l,m=g||this.selector,n=g?this:f(this.context);if(typeof a=="object"&&!a.preventDefault){for(var o in a)n[c](o,d,a[o],m);return this}if(c==="die"&&!a&&g&&g.charAt(0)==="."){n.unbind(g);return this}if(d===!1||f.isFunction(d))e=d||D,d=b;a=(a||"").split(" ");while((h=a[i++])!=null){j=x.exec(h),k="",j&&(k=j[0],h=h.replace(x,""));if(h==="hover"){a.push("mouseenter"+k,"mouseleave"+k);continue}l=h,L[h]?(a.push(L[h]+k),h=h+k):h=(L[h]||h)+k;if(c==="live")for(var p=0,q=n.length;p<q;p++)f.event.add(n[p],"live."+N(h,m),{data:d,selector:m,handler:e,origType:h,origHandler:e,preType:l});else n.unbind("live."+N(h,m),e)}return this}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.bind(b,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0)}),function(){function u(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}if(i.nodeType===1){f||(i.sizcache=c,i.sizset=g);if(typeof b!="string"){if(i===b){j=!0;break}}else if(k.filter(b,[i]).length>0){j=i;break}}i=i[a]}d[g]=j}}}function t(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}i.nodeType===1&&!f&&(i.sizcache=c,i.sizset=g);if(i.nodeName.toLowerCase()===b){j=i;break}i=i[a]}d[g]=j}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d=0,e=Object.prototype.toString,g=!1,h=!0,i=/\\/g,j=/\W/;[0,0].sort(function(){h=!1;return 0});var k=function(b,d,f,g){f=f||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return f;var i,j,n,o,q,r,s,t,u=!0,w=k.isXML(d),x=[],y=b;do{a.exec(""),i=a.exec(y);if(i){y=i[3],x.push(i[1]);if(i[2]){o=i[3];break}}}while(i);if(x.length>1&&m.exec(b))if(x.length===2&&l.relative[x[0]])j=v(x[0]+x[1],d);else{j=l.relative[x[0]]?[d]:k(x.shift(),d);while(x.length)b=x.shift(),l.relative[b]&&(b+=x.shift()),j=v(b,j)}else{!g&&x.length>1&&d.nodeType===9&&!w&&l.match.ID.test(x[0])&&!l.match.ID.test(x[x.length-1])&&(q=k.find(x.shift(),d,w),d=q.expr?k.filter(q.expr,q.set)[0]:q.set[0]);if(d){q=g?{expr:x.pop(),set:p(g)}:k.find(x.pop(),x.length===1&&(x[0]==="~"||x[0]==="+")&&d.parentNode?d.parentNode:d,w),j=q.expr?k.filter(q.expr,q.set):q.set,x.length>0?n=p(j):u=!1;while(x.length)r=x.pop(),s=r,l.relative[r]?s=x.pop():r="",s==null&&(s=d),l.relative[r](n,s,w)}else n=x=[]}n||(n=j),n||k.error(r||b);if(e.call(n)==="[object Array]")if(!u)f.push.apply(f,n);else if(d&&d.nodeType===1)for(t=0;n[t]!=null;t++)n[t]&&(n[t]===!0||n[t].nodeType===1&&k.contains(d,n[t]))&&f.push(j[t]);else for(t=0;n[t]!=null;t++)n[t]&&n[t].nodeType===1&&f.push(j[t]);else p(n,f);o&&(k(o,h,f,g),k.uniqueSort(f));return f};k.uniqueSort=function(a){if(r){g=h,a.sort(r);if(g)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},k.matches=function(a,b){return k(a,null,null,b)},k.matchesSelector=function(a,b){return k(b,null,null,[a]).length>0},k.find=function(a,b,c){var d;if(!a)return[];for(var e=0,f=l.order.length;e<f;e++){var g,h=l.order[e];if(g=l.leftMatch[h].exec(a)){var j=g[1];g.splice(1,1);if(j.substr(j.length-1)!=="\\"){g[1]=(g[1]||"").replace(i,""),d=l.find[h](g,b,c);if(d!=null){a=a.replace(l.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},k.filter=function(a,c,d,e){var f,g,h=a,i=[],j=c,m=c&&c[0]&&k.isXML(c[0]);while(a&&c.length){for(var n in l.filter)if((f=l.leftMatch[n].exec(a))!=null&&f[2]){var o,p,q=l.filter[n],r=f[1];g=!1,f.splice(1,1);if(r.substr(r.length-1)==="\\")continue;j===i&&(i=[]);if(l.preFilter[n]){f=l.preFilter[n](f,j,d,i,e,m);if(!f)g=o=!0;else if(f===!0)continue}if(f)for(var s=0;(p=j[s])!=null;s++)if(p){o=q(p,f,s,j);var t=e^!!o;d&&o!=null?t?g=!0:j[s]=!1:t&&(i.push(p),g=!0)}if(o!==b){d||(j=i),a=a.replace(l.match[n],"");if(!g)return[];break}}if(a===h)if(g==null)k.error(a);else break;h=a}return j},k.error=function(a){throw"Syntax error, unrecognized expression: "+a};var l=k.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!j.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&k.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!j.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&k.filter(b,a,!0)}},"":function(a,b,c){var e,f=d++,g=u;typeof b=="string"&&!j.test(b)&&(b=b.toLowerCase(),e=b,g=t),g("parentNode",b,f,a,e,c)},"~":function(a,b,c){var e,f=d++,g=u;typeof b=="string"&&!j.test(b)&&(b=b.toLowerCase(),e=b,g=t),g("previousSibling",b,f,a,e,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(i,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(i,"")},TAG:function(a,b){return a[1].replace(i,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||k.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&k.error(a[0]);a[0]=d++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(i,"");!f&&l.attrMap[g]&&(a[1]=l.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(i,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=k(b[3],null,null,c);else{var g=k.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(l.match.POS.test(b[0])||l.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!k(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=l.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||k.getText([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}k.error(e)},CHILD:function(a,b){var c=b[1],d=a;switch(c){case"only":case"first":while(d=d.previousSibling)if(d.nodeType===1)return!1;if(c==="first")return!0;d=a;case"last":while(d=d.nextSibling)if(d.nodeType===1)return!1;return!0;case"nth":var e=b[2],f=b[3];if(e===1&&f===0)return!0;var g=b[0],h=a.parentNode;if(h&&(h.sizcache!==g||!a.nodeIndex)){var i=0;for(d=h.firstChild;d;d=d.nextSibling)d.nodeType===1&&(d.nodeIndex=++i);h.sizcache=g}var j=a.nodeIndex-f;return e===0?j===0:j%e===0&&j/e>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=l.attrHandle[c]?l.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=l.setFilters[e];if(f)return f(a,c,b,d)}}},m=l.match.POS,n=function(a,b){return"\\"+(b-0+1)};for(var o in l.match)l.match[o]=new RegExp(l.match[o].source+/(?![^\[]*\])(?![^\(]*\))/.source),l.leftMatch[o]=new RegExp(/(^(?:.|\r|\n)*?)/.source+l.match[o].source.replace(/\\(\d+)/g,n));var p=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(q){p=function(a,b){var c=0,d=b||[];if(e.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var f=a.length;c<f;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var r,s;c.documentElement.compareDocumentPosition?r=function(a,b){if(a===b){g=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(r=function(a,b){if(a===b){g=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],h=a.parentNode,i=b.parentNode,j=h;if(h===i)return s(a,b);if(!h)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return s(e[k],f[k]);return k===c?s(a,f[k],-1):s(e[k],b,1)},s=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),k.getText=function(a){var b="",c;for(var d=0;a[d];d++)c=a[d],c.nodeType===3||c.nodeType===4?b+=c.nodeValue:c.nodeType!==8&&(b+=k.getText(c.childNodes));return b},function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(l.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},l.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(l.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(l.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=k,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){k=function(b,e,f,g){e=e||c;if(!g&&!k.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return p(e.getElementsByTagName(b),f);if(h[2]&&l.find.CLASS&&e.getElementsByClassName)return p(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return p([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return p([],f);if(i.id===h[3])return p([i],f)}try{return p(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var m=e,n=e.getAttribute("id"),o=n||d,q=e.parentNode,r=/^\s*[+~]/.test(b);n?o=o.replace(/'/g,"\\$&"):e.setAttribute("id",o),r&&q&&(e=e.parentNode);try{if(!r||q)return p(e.querySelectorAll("[id='"+o+"'] "+b),f)}catch(s){}finally{n||m.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)k[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}k.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!k.isXML(a))try{if(e||!l.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return k(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;l.order.splice(1,0,"CLASS"),l.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?k.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?k.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:k.contains=function(){return!1},k.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var v=function(a,b){var c,d=[],e="",f=b.nodeType?[b]:b;while(c=l.match.PSEUDO.exec(a))e+=c[0],a=a.replace(l.match.PSEUDO,"");a=l.relative[a]?a+"*":a;for(var g=0,h=f.length;g<h;g++)k(a,f[g],d);return k.filter(e,d)};f.find=k,f.expr=k.selectors,f.expr[":"]=f.expr.filters,f.unique=k.uniqueSort,f.text=k.getText,f.isXMLDoc=k.isXML,f.contains=k.contains}();var O=/Until$/,P=/^(?:parents|prevUntil|prevAll)/,Q=/,/,R=/^.[^:#\[\.,]*$/,S=Array.prototype.slice,T=f.expr.match.POS,U={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(W(this,a,!1),"not",a)},filter:function(a){return this.pushStack(W(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h,i,j={},k=1;if(g&&a.length){for(d=0,e=a.length;d<e;d++)i=a[d],j[i]||(j[i]=T.test(i)?f(i,b||this.context):i);while(g&&g.ownerDocument&&g!==b){for(i in j)h=j[i],(h.jquery?h.index(g)>-1:f(g).is(h))&&c.push({selector:i,elem:g,level:k});g=g.parentNode,k++}}return c}var l=T.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(l?l.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a||typeof a=="string")return f.inArray(this[0],a?f(a):this.parent().children());return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(V(c[0])||V(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling(a.parentNode.firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c),g=S.call(arguments);O.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!U[a]?f.unique(e):e,(this.length>1||Q.test(d))&&P.test(a)&&(e=e.reverse());return this.pushStack(e,a,g.join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var X=/ jQuery\d+="(?:\d+|null)"/g,Y=/^\s+/,Z=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,$=/<([\w:]+)/,_=/<tbody/i,ba=/<|&#?\w+;/,bb=/<(?:script|object|embed|option|style)/i,bc=/checked\s*(?:[^=]|=\s*.checked.)/i,bd=/\/(java|ecma)script/i,be=/^\s*<!(?:\[CDATA\[|\-\-)/,bf={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};bf.optgroup=bf.option,bf.tbody=bf.tfoot=bf.colgroup=bf.caption=bf.thead,bf.th=bf.td,f.support.htmlSerialize||(bf._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){if(f.isFunction(a))return this.each(function(b){var c=f(this);c.text(a.call(this,b,c.text()))});if(typeof a!="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return f.text(this)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){f(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,f(arguments[0]).toArray());return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(X,""):null;if(typeof a=="string"&&!bb.test(a)&&(f.support.leadingWhitespace||!Y.test(a))&&!bf[($.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Z,"<$1></$2>");try{for(var c=0,d=this.length;c<d;c++)this[c].nodeType===1&&(f.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(e){this.empty().append(a)}}else f.isFunction(a)?this.each(function(b){var c=f(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bc.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bg(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,bm)}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i;b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof a[0]=="string"&&a[0].length<512&&i===c&&a[0].charAt(0)==="<"&&!bb.test(a[0])&&(f.support.checkClone||!bc.test(a[0]))&&(g=!0,h=f.fragments[a[0]],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[a[0]]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j
-)}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d=a.cloneNode(!0),e,g,h;if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bi(a,d),e=bj(a),g=bj(d);for(h=0;e[h];++h)bi(e[h],g[h])}if(b){bh(a,d);if(c){e=bj(a),g=bj(d);for(h=0;e[h];++h)bh(e[h],g[h])}}e=g=null;return d},clean:function(a,b,d,e){var g;b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var h=[],i;for(var j=0,k;(k=a[j])!=null;j++){typeof k=="number"&&(k+="");if(!k)continue;if(typeof k=="string")if(!ba.test(k))k=b.createTextNode(k);else{k=k.replace(Z,"<$1></$2>");var l=($.exec(k)||["",""])[1].toLowerCase(),m=bf[l]||bf._default,n=m[0],o=b.createElement("div");o.innerHTML=m[1]+k+m[2];while(n--)o=o.lastChild;if(!f.support.tbody){var p=_.test(k),q=l==="table"&&!p?o.firstChild&&o.firstChild.childNodes:m[1]==="<table>"&&!p?o.childNodes:[];for(i=q.length-1;i>=0;--i)f.nodeName(q[i],"tbody")&&!q[i].childNodes.length&&q[i].parentNode.removeChild(q[i])}!f.support.leadingWhitespace&&Y.test(k)&&o.insertBefore(b.createTextNode(Y.exec(k)[0]),o.firstChild),k=o.childNodes}var r;if(!f.support.appendChecked)if(k[0]&&typeof (r=k.length)=="number")for(i=0;i<r;i++)bl(k[i]);else bl(k);k.nodeType?h.push(k):h=f.merge(h,k)}if(d){g=function(a){return!a.type||bd.test(a.type)};for(j=0;h[j];j++)if(e&&f.nodeName(h[j],"script")&&(!h[j].type||h[j].type.toLowerCase()==="text/javascript"))e.push(h[j].parentNode?h[j].parentNode.removeChild(h[j]):h[j]);else{if(h[j].nodeType===1){var s=f.grep(h[j].getElementsByTagName("script"),g);h.splice.apply(h,[j+1,0].concat(s))}d.appendChild(h[j])}}return h},cleanData:function(a){var b,c,d=f.cache,e=f.expando,g=f.event.special,h=f.support.deleteExpando;for(var i=0,j;(j=a[i])!=null;i++){if(j.nodeName&&f.noData[j.nodeName.toLowerCase()])continue;c=j[f.expando];if(c){b=d[c]&&d[c][e];if(b&&b.events){for(var k in b.events)g[k]?f.event.remove(j,k):f.removeEvent(j,k,b.handle);b.handle&&(b.handle.elem=null)}h?delete j[f.expando]:j.removeAttribute&&j.removeAttribute(f.expando),delete d[c]}}}});var bn=/alpha\([^)]*\)/i,bo=/opacity=([^)]*)/,bp=/([A-Z]|^ms)/g,bq=/^-?\d+(?:px)?$/i,br=/^-?\d/,bs=/^[+\-]=/,bt=/[^+\-\.\de]+/g,bu={position:"absolute",visibility:"hidden",display:"block"},bv=["Left","Right"],bw=["Top","Bottom"],bx,by,bz;f.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return f.access(this,a,c,!0,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)})},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bx(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d;if(h==="number"&&isNaN(d)||d==null)return;h==="string"&&bs.test(d)&&(d=+d.replace(bt,"")+parseFloat(f.css(a,c)),h="number"),h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(bx)return bx(a,c)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]}}),f.curCSS=f.css,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){var e;if(c){if(a.offsetWidth!==0)return bA(a,b,d);f.swap(a,bu,function(){e=bA(a,b,d)});return e}},set:function(a,b){if(!bq.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return bo.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle;c.zoom=1;var e=f.isNaN(b)?"":"alpha(opacity="+b*100+")",g=d&&d.filter||c.filter||"";c.filter=bn.test(g)?g.replace(bn,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){var c;f.swap(a,{display:"inline-block"},function(){b?c=bx(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(by=function(a,c){var d,e,g;c=c.replace(bp,"-$1").toLowerCase();if(!(e=a.ownerDocument.defaultView))return b;if(g=e.getComputedStyle(a,null))d=g.getPropertyValue(c),d===""&&!f.contains(a.ownerDocument.documentElement,a)&&(d=f.style(a,c));return d}),c.documentElement.currentStyle&&(bz=function(a,b){var c,d=a.currentStyle&&a.currentStyle[b],e=a.runtimeStyle&&a.runtimeStyle[b],f=a.style;!bq.test(d)&&br.test(d)&&(c=f.left,e&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":d||0,d=f.pixelLeft+"px",f.left=c,e&&(a.runtimeStyle.left=e));return d===""?"auto":d}),bx=by||bz,f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)});var bB=/%20/g,bC=/\[\]$/,bD=/\r?\n/g,bE=/#.*$/,bF=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bG=/^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bH=/^(?:about|app|app\-storage|.+\-extension|file|widget):$/,bI=/^(?:GET|HEAD)$/,bJ=/^\/\//,bK=/\?/,bL=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bM=/^(?:select|textarea)/i,bN=/\s+/,bO=/([?&])_=[^&]*/,bP=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bQ=f.fn.load,bR={},bS={},bT,bU;try{bT=e.href}catch(bV){bT=c.createElement("a"),bT.href="",bT=bT.href}bU=bP.exec(bT.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bQ)return bQ.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bL,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bM.test(this.nodeName)||bG.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bD,"\r\n")}}):{name:b.name,value:c.replace(bD,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.bind(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?f.extend(!0,a,f.ajaxSettings,b):(b=a,a=f.extend(!0,f.ajaxSettings,b));for(var c in{context:1,url:1})c in b?a[c]=b[c]:c in f.ajaxSettings&&(a[c]=f.ajaxSettings[c]);return a},ajaxSettings:{url:bT,isLocal:bH.test(bU[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":"*/*"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML}},ajaxPrefilter:bW(bR),ajaxTransport:bW(bS),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a?4:0;var o,r,u,w=l?bZ(d,v,l):b,x,y;if(a>=200&&a<300||a===304){if(d.ifModified){if(x=v.getResponseHeader("Last-Modified"))f.lastModified[k]=x;if(y=v.getResponseHeader("Etag"))f.etag[k]=y}if(a===304)c="notmodified",o=!0;else try{r=b$(d,w),c="success",o=!0}catch(z){c="parsererror",u=z}}else{u=c;if(!c||a)c="error",a<0&&(a=0)}v.status=a,v.statusText=c,o?h.resolveWith(e,[r,c,v]):h.rejectWith(e,[v,c,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.resolveWith(e,[v,c]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f._Deferred(),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bF.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.done,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bE,"").replace(bJ,bU[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bN),d.crossDomain==null&&(r=bP.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bU[1]&&r[2]==bU[2]&&(r[3]||(r[1]==="http:"?80:443))==(bU[3]||(bU[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),bX(bR,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bI.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bK.test(d.url)?"&":"?")+d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bO,"$1_="+x);d.url=y+(y===d.url?(bK.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", */*; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=bX(bS,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){status<2?w(-1,z):f.error(z)}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)bY(g,a[g],c,e);return d.join("&").replace(bB,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var b_=f.now(),ca=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+b_++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=b.contentType==="application/x-www-form-urlencoded"&&typeof b.data=="string";if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(ca.test(b.url)||e&&ca.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(ca,l),b.url===j&&(e&&(k=k.replace(ca,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var cb=a.ActiveXObject?function(){for(var a in cd)cd[a](0,1)}:!1,cc=0,cd;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ce()||cf()}:ce,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,cb&&delete cd[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n),m.text=h.responseText;try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++cc,cb&&(cd||(cd={},f(a).unload(cb)),cd[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var cg={},ch,ci,cj=/^(?:toggle|show|hide)$/,ck=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cl,cm=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],cn,co=a.webkitRequestAnimationFrame||a.mozRequestAnimationFrame||a.oRequestAnimationFrame;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(cr("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),e===""&&f.css(d,"display")==="none"&&f._data(d,"olddisplay",cs(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(cr("hide",3),a,b,c);for(var d=0,e=this.length;d<e;d++)if(this[d].style){var g=f.css(this[d],"display");g!=="none"&&!f._data(this[d],"olddisplay")&&f._data(this[d],"olddisplay",g)}for(d=0;d<e;d++)this[d].style&&(this[d].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(cr("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return this[e.queue===!1?"each":"queue"](function(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]),h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(f.support.inlineBlockNeedsLayout?(j=cs(this.nodeName),j==="inline"?this.style.display="inline-block":(this.style.display="inline",this.style.zoom=1)):this.style.display="inline-block"))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)k=new f.fx(this,b,i),h=a[i],cj.test(h)?k[h==="toggle"?d?"show":"hide":h]():(l=ck.exec(h),m=k.cur(),l?(n=parseFloat(l[2]),o=l[3]||(f.cssNumber[i]?"":"px"),o!=="px"&&(f.style(this,i,(n||1)+o),m=(n||1)/k.cur()*m,f.style(this,i,m+o)),l[1]&&(n=(l[1]==="-="?-1:1)*n+m),k.custom(m,n,o)):k.custom(m,h,""));return!0})},stop:function(a,b){a&&this.queue([]),this.each(function(){var a=f.timers,c=a.length;b||f._unmark(!0,this);while(c--)a[c].elem===this&&(b&&a[c](!0),a.splice(c,1))}),b||this.dequeue();return this}}),f.each({slideDown:cr("show",1),slideUp:cr("hide",1),slideToggle:cr("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default,d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue!==!1?f.dequeue(this):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,b,c){function h(a){return d.step(a)}var d=this,e=f.fx,g;this.startTime=cn||cp(),this.start=a,this.end=b,this.unit=c||this.unit||(f.cssNumber[this.prop]?"":"px"),this.now=this.start,this.pos=this.state=0,h.elem=this.elem,h()&&f.timers.push(h)&&!cl&&(co?(cl=!0,g=function(){cl&&(co(g),e.tick())},co(g)):cl=setInterval(e.tick,e.interval))},show:function(){this.options.orig[this.prop]=f.style(this.elem,this.prop),this.options.show=!0,this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b=cn||cp(),c=!0,d=this.elem,e=this.options,g,h;if(a||b>=e.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),e.animatedProperties[this.prop]=!0;for(g in e.animatedProperties)e.animatedProperties[g]!==!0&&(c=!1);if(c){e.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){d.style["overflow"+b]=e.overflow[a]}),e.hide&&f(d).hide();if(e.hide||e.show)for(var i in e.animatedProperties)f.style(d,i,e.orig[i]);e.complete.call(d)}return!1}e.duration==Infinity?this.now=b:(h=b-this.startTime,this.state=h/e.duration,this.pos=f.easing[e.animatedProperties[this.prop]](this.state,h,0,1,e.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){for(var a=f.timers,b=0;b<a.length;++b)a[b]()||a.splice(b--,1);a.length||f.fx.stop()},interval:13,stop:function(){clearInterval(cl),cl=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=(a.prop==="width"||a.prop==="height"?Math.max(0,a.now):a.now)+a.unit:a.elem[a.prop]=a.now}}}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var ct=/^t(?:able|d|h)$/i,cu=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?f.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(d){}var e=b.ownerDocument,g=e.documentElement;if(!c||!f.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=e.body,i=cv(e),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||f.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||f.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:f.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);f.offset.initialize();var c,d=b.offsetParent,e=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(f.offset.supportsFixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===d&&(l+=b.offsetTop,m+=b.offsetLeft,f.offset.doesNotAddBorder&&(!f.offset.doesAddBorderForTableAndCells||!ct.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),e=d,d=b.offsetParent),f.offset.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;f.offset.supportsFixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},f.offset={initialize:function(){var a=c.body,b=c.createElement("div"),d,e,g,h,i=parseFloat(f.css(a,"marginTop"))||0,j="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";f.extend(b.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"}),b.innerHTML=j,a.insertBefore(b,a.firstChild),d=b.firstChild,e=d.firstChild,h=d.nextSibling.firstChild.firstChild,this.doesNotAddBorder=e.offsetTop!==5,this.doesAddBorderForTableAndCells=h.offsetTop===5,e.style.position="fixed",e.style.top="20px",this.supportsFixedPosition=e.offsetTop===20||e.offsetTop===15,e.style.position=e.style.top="",d.style.overflow="hidden",d.style.position="relative",this.subtractsBorderForOverflowNotVisible=e.offsetTop===-5,this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==i,a.removeChild(b),f.offset.initialize=f.noop},bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.offset.initialize(),f.offset.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=cu.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!cu.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each(["Left","Top"],function(a,c){var d="scroll"+c;f.fn[d]=function(c){var e,g;if(c===b){e=this[0];if(!e)return null;g=cv(e);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:f.support.boxModel&&g.document.documentElement[d]||g.document.body[d]:e[d]}return this.each(function(){g=cv(this),g?g.scrollTo(a?f(g).scrollLeft():c,a?c:f(g).scrollTop()):this[d]=c})}}),f.each(["Height","Width"],function(a,c){var d=c.toLowerCase();f.fn["inner"+c]=function(){var a=this[0];return a&&a.style?parseFloat(f.css(a,d,"padding")):null},f.fn["outer"+c]=function(a){var b=this[0];return b&&b.style?parseFloat(f.css(b,d,a?"margin":"border")):null},f.fn[d]=function(a){var e=this[0];if(!e)return a==null?null:this;if(f.isFunction(a))return this.each(function(b){var c=f(this);c[d](a.call(this,b,c[d]()))});if(f.isWindow(e)){var g=e.document.documentElement["client"+c];return e.document.compatMode==="CSS1Compat"&&g||e.document.body["client"+c]||g}if(e.nodeType===9)return Math.max(e.documentElement["client"+c],e.body["scroll"+c],e.documentElement["scroll"+c],e.body["offset"+c],e.documentElement["offset"+c]);if(a===b){var h=f.css(e,d),i=parseFloat(h);return f.isNaN(i)?h:i}return this.css(d,typeof a=="string"?a:a+"px")}}),a.jQuery=a.$=f})(window);
